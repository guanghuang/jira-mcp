/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.User;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * BulkOperationProgress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class BulkOperationProgress {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  @javax.annotation.Nullable
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_FAILED_ACCESSIBLE_ISSUES = "failedAccessibleIssues";
  @SerializedName(SERIALIZED_NAME_FAILED_ACCESSIBLE_ISSUES)
  @javax.annotation.Nullable
  private Map<String, List<String>> failedAccessibleIssues = new HashMap<>();

  public static final String SERIALIZED_NAME_INVALID_OR_INACCESSIBLE_ISSUE_COUNT = "invalidOrInaccessibleIssueCount";
  @SerializedName(SERIALIZED_NAME_INVALID_OR_INACCESSIBLE_ISSUE_COUNT)
  @javax.annotation.Nullable
  private Integer invalidOrInaccessibleIssueCount;

  public static final String SERIALIZED_NAME_PROCESSED_ACCESSIBLE_ISSUES = "processedAccessibleIssues";
  @SerializedName(SERIALIZED_NAME_PROCESSED_ACCESSIBLE_ISSUES)
  @javax.annotation.Nullable
  private List<Long> processedAccessibleIssues = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROGRESS_PERCENT = "progressPercent";
  @SerializedName(SERIALIZED_NAME_PROGRESS_PERCENT)
  @javax.annotation.Nullable
  private Long progressPercent;

  public static final String SERIALIZED_NAME_STARTED = "started";
  @SerializedName(SERIALIZED_NAME_STARTED)
  @javax.annotation.Nullable
  private OffsetDateTime started;

  /**
   * The status of the task.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ENQUEUED("ENQUEUED"),
    
    RUNNING("RUNNING"),
    
    COMPLETE("COMPLETE"),
    
    FAILED("FAILED"),
    
    CANCEL_REQUESTED("CANCEL_REQUESTED"),
    
    CANCELLED("CANCELLED"),
    
    DEAD("DEAD");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBMITTED_BY = "submittedBy";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_BY)
  @javax.annotation.Nullable
  private User submittedBy;

  public static final String SERIALIZED_NAME_TASK_ID = "taskId";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  @javax.annotation.Nullable
  private String taskId;

  public static final String SERIALIZED_NAME_TOTAL_ISSUE_COUNT = "totalIssueCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_ISSUE_COUNT)
  @javax.annotation.Nullable
  private Integer totalIssueCount;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  @javax.annotation.Nullable
  private OffsetDateTime updated;

  public BulkOperationProgress() {
  }

  public BulkOperationProgress(
     String taskId
  ) {
    this();
    this.taskId = taskId;
  }

  public BulkOperationProgress created(@javax.annotation.Nullable OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * A timestamp of when the task was submitted.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(@javax.annotation.Nullable OffsetDateTime created) {
    this.created = created;
  }


  public BulkOperationProgress failedAccessibleIssues(@javax.annotation.Nullable Map<String, List<String>> failedAccessibleIssues) {
    this.failedAccessibleIssues = failedAccessibleIssues;
    return this;
  }

  public BulkOperationProgress putFailedAccessibleIssuesItem(String key, List<String> failedAccessibleIssuesItem) {
    if (this.failedAccessibleIssues == null) {
      this.failedAccessibleIssues = new HashMap<>();
    }
    this.failedAccessibleIssues.put(key, failedAccessibleIssuesItem);
    return this;
  }

  /**
   * Map of issue IDs for which the operation failed and that the user has permission to view, to their one or more reasons for failure. These reasons are open-ended text descriptions of the error and are not selected from a predefined list of standard reasons.
   * @return failedAccessibleIssues
   */
  @javax.annotation.Nullable
  public Map<String, List<String>> getFailedAccessibleIssues() {
    return failedAccessibleIssues;
  }

  public void setFailedAccessibleIssues(@javax.annotation.Nullable Map<String, List<String>> failedAccessibleIssues) {
    this.failedAccessibleIssues = failedAccessibleIssues;
  }


  public BulkOperationProgress invalidOrInaccessibleIssueCount(@javax.annotation.Nullable Integer invalidOrInaccessibleIssueCount) {
    this.invalidOrInaccessibleIssueCount = invalidOrInaccessibleIssueCount;
    return this;
  }

  /**
   * The number of issues that are either invalid or issues that the user doesn&#39;t have permission to view, regardless of the success or failure of the operation.
   * @return invalidOrInaccessibleIssueCount
   */
  @javax.annotation.Nullable
  public Integer getInvalidOrInaccessibleIssueCount() {
    return invalidOrInaccessibleIssueCount;
  }

  public void setInvalidOrInaccessibleIssueCount(@javax.annotation.Nullable Integer invalidOrInaccessibleIssueCount) {
    this.invalidOrInaccessibleIssueCount = invalidOrInaccessibleIssueCount;
  }


  public BulkOperationProgress processedAccessibleIssues(@javax.annotation.Nullable List<Long> processedAccessibleIssues) {
    this.processedAccessibleIssues = processedAccessibleIssues;
    return this;
  }

  public BulkOperationProgress addProcessedAccessibleIssuesItem(Long processedAccessibleIssuesItem) {
    if (this.processedAccessibleIssues == null) {
      this.processedAccessibleIssues = new ArrayList<>();
    }
    this.processedAccessibleIssues.add(processedAccessibleIssuesItem);
    return this;
  }

  /**
   * List of issue IDs for which the operation was successful and that the user has permission to view.
   * @return processedAccessibleIssues
   */
  @javax.annotation.Nullable
  public List<Long> getProcessedAccessibleIssues() {
    return processedAccessibleIssues;
  }

  public void setProcessedAccessibleIssues(@javax.annotation.Nullable List<Long> processedAccessibleIssues) {
    this.processedAccessibleIssues = processedAccessibleIssues;
  }


  public BulkOperationProgress progressPercent(@javax.annotation.Nullable Long progressPercent) {
    this.progressPercent = progressPercent;
    return this;
  }

  /**
   * Progress of the task as a percentage.
   * @return progressPercent
   */
  @javax.annotation.Nullable
  public Long getProgressPercent() {
    return progressPercent;
  }

  public void setProgressPercent(@javax.annotation.Nullable Long progressPercent) {
    this.progressPercent = progressPercent;
  }


  public BulkOperationProgress started(@javax.annotation.Nullable OffsetDateTime started) {
    this.started = started;
    return this;
  }

  /**
   * A timestamp of when the task was started.
   * @return started
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStarted() {
    return started;
  }

  public void setStarted(@javax.annotation.Nullable OffsetDateTime started) {
    this.started = started;
  }


  public BulkOperationProgress status(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the task.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
  }


  public BulkOperationProgress submittedBy(@javax.annotation.Nullable User submittedBy) {
    this.submittedBy = submittedBy;
    return this;
  }

  /**
   * Get submittedBy
   * @return submittedBy
   */
  @javax.annotation.Nullable
  public User getSubmittedBy() {
    return submittedBy;
  }

  public void setSubmittedBy(@javax.annotation.Nullable User submittedBy) {
    this.submittedBy = submittedBy;
  }


  /**
   * The ID of the task.
   * @return taskId
   */
  @javax.annotation.Nullable
  public String getTaskId() {
    return taskId;
  }



  public BulkOperationProgress totalIssueCount(@javax.annotation.Nullable Integer totalIssueCount) {
    this.totalIssueCount = totalIssueCount;
    return this;
  }

  /**
   * The number of issues that the bulk operation was attempted on.
   * @return totalIssueCount
   */
  @javax.annotation.Nullable
  public Integer getTotalIssueCount() {
    return totalIssueCount;
  }

  public void setTotalIssueCount(@javax.annotation.Nullable Integer totalIssueCount) {
    this.totalIssueCount = totalIssueCount;
  }


  public BulkOperationProgress updated(@javax.annotation.Nullable OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * A timestamp of when the task progress was last updated.
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(@javax.annotation.Nullable OffsetDateTime updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkOperationProgress bulkOperationProgress = (BulkOperationProgress) o;
    return Objects.equals(this.created, bulkOperationProgress.created) &&
        Objects.equals(this.failedAccessibleIssues, bulkOperationProgress.failedAccessibleIssues) &&
        Objects.equals(this.invalidOrInaccessibleIssueCount, bulkOperationProgress.invalidOrInaccessibleIssueCount) &&
        Objects.equals(this.processedAccessibleIssues, bulkOperationProgress.processedAccessibleIssues) &&
        Objects.equals(this.progressPercent, bulkOperationProgress.progressPercent) &&
        Objects.equals(this.started, bulkOperationProgress.started) &&
        Objects.equals(this.status, bulkOperationProgress.status) &&
        Objects.equals(this.submittedBy, bulkOperationProgress.submittedBy) &&
        Objects.equals(this.taskId, bulkOperationProgress.taskId) &&
        Objects.equals(this.totalIssueCount, bulkOperationProgress.totalIssueCount) &&
        Objects.equals(this.updated, bulkOperationProgress.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, failedAccessibleIssues, invalidOrInaccessibleIssueCount, processedAccessibleIssues, progressPercent, started, status, submittedBy, taskId, totalIssueCount, updated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkOperationProgress {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    failedAccessibleIssues: ").append(toIndentedString(failedAccessibleIssues)).append("\n");
    sb.append("    invalidOrInaccessibleIssueCount: ").append(toIndentedString(invalidOrInaccessibleIssueCount)).append("\n");
    sb.append("    processedAccessibleIssues: ").append(toIndentedString(processedAccessibleIssues)).append("\n");
    sb.append("    progressPercent: ").append(toIndentedString(progressPercent)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    submittedBy: ").append(toIndentedString(submittedBy)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    totalIssueCount: ").append(toIndentedString(totalIssueCount)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("failedAccessibleIssues");
    openapiFields.add("invalidOrInaccessibleIssueCount");
    openapiFields.add("processedAccessibleIssues");
    openapiFields.add("progressPercent");
    openapiFields.add("started");
    openapiFields.add("status");
    openapiFields.add("submittedBy");
    openapiFields.add("taskId");
    openapiFields.add("totalIssueCount");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BulkOperationProgress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BulkOperationProgress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkOperationProgress is not found in the empty JSON string", BulkOperationProgress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BulkOperationProgress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkOperationProgress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("processedAccessibleIssues") != null && !jsonObj.get("processedAccessibleIssues").isJsonNull() && !jsonObj.get("processedAccessibleIssues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `processedAccessibleIssues` to be an array in the JSON string but got `%s`", jsonObj.get("processedAccessibleIssues").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `submittedBy`
      if (jsonObj.get("submittedBy") != null && !jsonObj.get("submittedBy").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("submittedBy"));
      }
      if ((jsonObj.get("taskId") != null && !jsonObj.get("taskId").isJsonNull()) && !jsonObj.get("taskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkOperationProgress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkOperationProgress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkOperationProgress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkOperationProgress.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkOperationProgress>() {
           @Override
           public void write(JsonWriter out, BulkOperationProgress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkOperationProgress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BulkOperationProgress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BulkOperationProgress
   * @throws IOException if the JSON string is invalid with respect to BulkOperationProgress
   */
  public static BulkOperationProgress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkOperationProgress.class);
  }

  /**
   * Convert an instance of BulkOperationProgress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

