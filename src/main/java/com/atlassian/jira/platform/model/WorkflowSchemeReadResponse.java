/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.DocumentVersion;
import com.atlassian.jira.platform.model.WorkflowMetadataAndIssueTypeRestModel;
import com.atlassian.jira.platform.model.WorkflowMetadataRestModel;
import com.atlassian.jira.platform.model.WorkflowScope;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * WorkflowSchemeReadResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class WorkflowSchemeReadResponse {
  public static final String SERIALIZED_NAME_DEFAULT_WORKFLOW = "defaultWorkflow";
  @SerializedName(SERIALIZED_NAME_DEFAULT_WORKFLOW)
  @javax.annotation.Nullable
  private WorkflowMetadataRestModel defaultWorkflow;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PROJECT_IDS_USING_SCHEME = "projectIdsUsingScheme";
  @SerializedName(SERIALIZED_NAME_PROJECT_IDS_USING_SCHEME)
  @javax.annotation.Nullable
  private List<String> projectIdsUsingScheme;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  @javax.annotation.Nonnull
  private WorkflowScope scope;

  public static final String SERIALIZED_NAME_TASK_ID = "taskId";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  @javax.annotation.Nullable
  private String taskId;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nonnull
  private DocumentVersion version;

  public static final String SERIALIZED_NAME_WORKFLOWS_FOR_ISSUE_TYPES = "workflowsForIssueTypes";
  @SerializedName(SERIALIZED_NAME_WORKFLOWS_FOR_ISSUE_TYPES)
  @javax.annotation.Nonnull
  private List<WorkflowMetadataAndIssueTypeRestModel> workflowsForIssueTypes = new ArrayList<>();

  public WorkflowSchemeReadResponse() {
  }

  public WorkflowSchemeReadResponse defaultWorkflow(@javax.annotation.Nullable WorkflowMetadataRestModel defaultWorkflow) {
    this.defaultWorkflow = defaultWorkflow;
    return this;
  }

  /**
   * Get defaultWorkflow
   * @return defaultWorkflow
   */
  @javax.annotation.Nullable
  public WorkflowMetadataRestModel getDefaultWorkflow() {
    return defaultWorkflow;
  }

  public void setDefaultWorkflow(@javax.annotation.Nullable WorkflowMetadataRestModel defaultWorkflow) {
    this.defaultWorkflow = defaultWorkflow;
  }


  public WorkflowSchemeReadResponse description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the workflow scheme.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public WorkflowSchemeReadResponse id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the workflow scheme.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public WorkflowSchemeReadResponse name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the workflow scheme.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public WorkflowSchemeReadResponse projectIdsUsingScheme(@javax.annotation.Nullable List<String> projectIdsUsingScheme) {
    this.projectIdsUsingScheme = projectIdsUsingScheme;
    return this;
  }

  public WorkflowSchemeReadResponse addProjectIdsUsingSchemeItem(String projectIdsUsingSchemeItem) {
    if (this.projectIdsUsingScheme == null) {
      this.projectIdsUsingScheme = new ArrayList<>();
    }
    this.projectIdsUsingScheme.add(projectIdsUsingSchemeItem);
    return this;
  }

  /**
   * Deprecated. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-2298) for details.  The IDs of projects using the workflow scheme.
   * @return projectIdsUsingScheme
   */
  @javax.annotation.Nullable
  public List<String> getProjectIdsUsingScheme() {
    return projectIdsUsingScheme;
  }

  public void setProjectIdsUsingScheme(@javax.annotation.Nullable List<String> projectIdsUsingScheme) {
    this.projectIdsUsingScheme = projectIdsUsingScheme;
  }


  public WorkflowSchemeReadResponse scope(@javax.annotation.Nonnull WorkflowScope scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nonnull
  public WorkflowScope getScope() {
    return scope;
  }

  public void setScope(@javax.annotation.Nonnull WorkflowScope scope) {
    this.scope = scope;
  }


  public WorkflowSchemeReadResponse taskId(@javax.annotation.Nullable String taskId) {
    this.taskId = taskId;
    return this;
  }

  /**
   * Indicates if there&#39;s an [asynchronous task](#async-operations) for this workflow scheme.
   * @return taskId
   */
  @javax.annotation.Nullable
  public String getTaskId() {
    return taskId;
  }

  public void setTaskId(@javax.annotation.Nullable String taskId) {
    this.taskId = taskId;
  }


  public WorkflowSchemeReadResponse version(@javax.annotation.Nonnull DocumentVersion version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public DocumentVersion getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nonnull DocumentVersion version) {
    this.version = version;
  }


  public WorkflowSchemeReadResponse workflowsForIssueTypes(@javax.annotation.Nonnull List<WorkflowMetadataAndIssueTypeRestModel> workflowsForIssueTypes) {
    this.workflowsForIssueTypes = workflowsForIssueTypes;
    return this;
  }

  public WorkflowSchemeReadResponse addWorkflowsForIssueTypesItem(WorkflowMetadataAndIssueTypeRestModel workflowsForIssueTypesItem) {
    if (this.workflowsForIssueTypes == null) {
      this.workflowsForIssueTypes = new ArrayList<>();
    }
    this.workflowsForIssueTypes.add(workflowsForIssueTypesItem);
    return this;
  }

  /**
   * Mappings from workflows to issue types.
   * @return workflowsForIssueTypes
   */
  @javax.annotation.Nonnull
  public List<WorkflowMetadataAndIssueTypeRestModel> getWorkflowsForIssueTypes() {
    return workflowsForIssueTypes;
  }

  public void setWorkflowsForIssueTypes(@javax.annotation.Nonnull List<WorkflowMetadataAndIssueTypeRestModel> workflowsForIssueTypes) {
    this.workflowsForIssueTypes = workflowsForIssueTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowSchemeReadResponse workflowSchemeReadResponse = (WorkflowSchemeReadResponse) o;
    return Objects.equals(this.defaultWorkflow, workflowSchemeReadResponse.defaultWorkflow) &&
        Objects.equals(this.description, workflowSchemeReadResponse.description) &&
        Objects.equals(this.id, workflowSchemeReadResponse.id) &&
        Objects.equals(this.name, workflowSchemeReadResponse.name) &&
        Objects.equals(this.projectIdsUsingScheme, workflowSchemeReadResponse.projectIdsUsingScheme) &&
        Objects.equals(this.scope, workflowSchemeReadResponse.scope) &&
        Objects.equals(this.taskId, workflowSchemeReadResponse.taskId) &&
        Objects.equals(this.version, workflowSchemeReadResponse.version) &&
        Objects.equals(this.workflowsForIssueTypes, workflowSchemeReadResponse.workflowsForIssueTypes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultWorkflow, description, id, name, projectIdsUsingScheme, scope, taskId, version, workflowsForIssueTypes);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowSchemeReadResponse {\n");
    sb.append("    defaultWorkflow: ").append(toIndentedString(defaultWorkflow)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    projectIdsUsingScheme: ").append(toIndentedString(projectIdsUsingScheme)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    workflowsForIssueTypes: ").append(toIndentedString(workflowsForIssueTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultWorkflow");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("projectIdsUsingScheme");
    openapiFields.add("scope");
    openapiFields.add("taskId");
    openapiFields.add("version");
    openapiFields.add("workflowsForIssueTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("scope");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("workflowsForIssueTypes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowSchemeReadResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowSchemeReadResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowSchemeReadResponse is not found in the empty JSON string", WorkflowSchemeReadResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowSchemeReadResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowSchemeReadResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkflowSchemeReadResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `defaultWorkflow`
      if (jsonObj.get("defaultWorkflow") != null && !jsonObj.get("defaultWorkflow").isJsonNull()) {
        WorkflowMetadataRestModel.validateJsonElement(jsonObj.get("defaultWorkflow"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("projectIdsUsingScheme") != null && !jsonObj.get("projectIdsUsingScheme").isJsonNull() && !jsonObj.get("projectIdsUsingScheme").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectIdsUsingScheme` to be an array in the JSON string but got `%s`", jsonObj.get("projectIdsUsingScheme").toString()));
      }
      // validate the required field `scope`
      WorkflowScope.validateJsonElement(jsonObj.get("scope"));
      if ((jsonObj.get("taskId") != null && !jsonObj.get("taskId").isJsonNull()) && !jsonObj.get("taskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskId").toString()));
      }
      // validate the required field `version`
      DocumentVersion.validateJsonElement(jsonObj.get("version"));
      // ensure the json data is an array
      if (!jsonObj.get("workflowsForIssueTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflowsForIssueTypes` to be an array in the JSON string but got `%s`", jsonObj.get("workflowsForIssueTypes").toString()));
      }

      JsonArray jsonArrayworkflowsForIssueTypes = jsonObj.getAsJsonArray("workflowsForIssueTypes");
      // validate the required field `workflowsForIssueTypes` (array)
      for (int i = 0; i < jsonArrayworkflowsForIssueTypes.size(); i++) {
        WorkflowMetadataAndIssueTypeRestModel.validateJsonElement(jsonArrayworkflowsForIssueTypes.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowSchemeReadResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowSchemeReadResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowSchemeReadResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowSchemeReadResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowSchemeReadResponse>() {
           @Override
           public void write(JsonWriter out, WorkflowSchemeReadResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowSchemeReadResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowSchemeReadResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowSchemeReadResponse
   * @throws IOException if the JSON string is invalid with respect to WorkflowSchemeReadResponse
   */
  public static WorkflowSchemeReadResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowSchemeReadResponse.class);
  }

  /**
   * Convert an instance of WorkflowSchemeReadResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

