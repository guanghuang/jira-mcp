/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.RequiredMappingByIssueType;
import com.atlassian.jira.platform.model.RequiredMappingByWorkflows;
import com.atlassian.jira.platform.model.StatusMetadata;
import com.atlassian.jira.platform.model.StatusesPerWorkflow;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * WorkflowSchemeUpdateRequiredMappingsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class WorkflowSchemeUpdateRequiredMappingsResponse {
  public static final String SERIALIZED_NAME_STATUS_MAPPINGS_BY_ISSUE_TYPES = "statusMappingsByIssueTypes";
  @SerializedName(SERIALIZED_NAME_STATUS_MAPPINGS_BY_ISSUE_TYPES)
  @javax.annotation.Nullable
  private Set<RequiredMappingByIssueType> statusMappingsByIssueTypes = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_STATUS_MAPPINGS_BY_WORKFLOWS = "statusMappingsByWorkflows";
  @SerializedName(SERIALIZED_NAME_STATUS_MAPPINGS_BY_WORKFLOWS)
  @javax.annotation.Nullable
  private Set<RequiredMappingByWorkflows> statusMappingsByWorkflows = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  @javax.annotation.Nullable
  private Set<StatusMetadata> statuses = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_STATUSES_PER_WORKFLOW = "statusesPerWorkflow";
  @SerializedName(SERIALIZED_NAME_STATUSES_PER_WORKFLOW)
  @javax.annotation.Nullable
  private Set<StatusesPerWorkflow> statusesPerWorkflow = new LinkedHashSet<>();

  public WorkflowSchemeUpdateRequiredMappingsResponse() {
  }

  public WorkflowSchemeUpdateRequiredMappingsResponse statusMappingsByIssueTypes(@javax.annotation.Nullable Set<RequiredMappingByIssueType> statusMappingsByIssueTypes) {
    this.statusMappingsByIssueTypes = statusMappingsByIssueTypes;
    return this;
  }

  public WorkflowSchemeUpdateRequiredMappingsResponse addStatusMappingsByIssueTypesItem(RequiredMappingByIssueType statusMappingsByIssueTypesItem) {
    if (this.statusMappingsByIssueTypes == null) {
      this.statusMappingsByIssueTypes = new LinkedHashSet<>();
    }
    this.statusMappingsByIssueTypes.add(statusMappingsByIssueTypesItem);
    return this;
  }

  /**
   * The list of required status mappings by issue type.
   * @return statusMappingsByIssueTypes
   */
  @javax.annotation.Nullable
  public Set<RequiredMappingByIssueType> getStatusMappingsByIssueTypes() {
    return statusMappingsByIssueTypes;
  }

  public void setStatusMappingsByIssueTypes(@javax.annotation.Nullable Set<RequiredMappingByIssueType> statusMappingsByIssueTypes) {
    this.statusMappingsByIssueTypes = statusMappingsByIssueTypes;
  }


  public WorkflowSchemeUpdateRequiredMappingsResponse statusMappingsByWorkflows(@javax.annotation.Nullable Set<RequiredMappingByWorkflows> statusMappingsByWorkflows) {
    this.statusMappingsByWorkflows = statusMappingsByWorkflows;
    return this;
  }

  public WorkflowSchemeUpdateRequiredMappingsResponse addStatusMappingsByWorkflowsItem(RequiredMappingByWorkflows statusMappingsByWorkflowsItem) {
    if (this.statusMappingsByWorkflows == null) {
      this.statusMappingsByWorkflows = new LinkedHashSet<>();
    }
    this.statusMappingsByWorkflows.add(statusMappingsByWorkflowsItem);
    return this;
  }

  /**
   * The list of required status mappings by workflow.
   * @return statusMappingsByWorkflows
   */
  @javax.annotation.Nullable
  public Set<RequiredMappingByWorkflows> getStatusMappingsByWorkflows() {
    return statusMappingsByWorkflows;
  }

  public void setStatusMappingsByWorkflows(@javax.annotation.Nullable Set<RequiredMappingByWorkflows> statusMappingsByWorkflows) {
    this.statusMappingsByWorkflows = statusMappingsByWorkflows;
  }


  public WorkflowSchemeUpdateRequiredMappingsResponse statuses(@javax.annotation.Nullable Set<StatusMetadata> statuses) {
    this.statuses = statuses;
    return this;
  }

  public WorkflowSchemeUpdateRequiredMappingsResponse addStatusesItem(StatusMetadata statusesItem) {
    if (this.statuses == null) {
      this.statuses = new LinkedHashSet<>();
    }
    this.statuses.add(statusesItem);
    return this;
  }

  /**
   * The details of the statuses in the associated workflows.
   * @return statuses
   */
  @javax.annotation.Nullable
  public Set<StatusMetadata> getStatuses() {
    return statuses;
  }

  public void setStatuses(@javax.annotation.Nullable Set<StatusMetadata> statuses) {
    this.statuses = statuses;
  }


  public WorkflowSchemeUpdateRequiredMappingsResponse statusesPerWorkflow(@javax.annotation.Nullable Set<StatusesPerWorkflow> statusesPerWorkflow) {
    this.statusesPerWorkflow = statusesPerWorkflow;
    return this;
  }

  public WorkflowSchemeUpdateRequiredMappingsResponse addStatusesPerWorkflowItem(StatusesPerWorkflow statusesPerWorkflowItem) {
    if (this.statusesPerWorkflow == null) {
      this.statusesPerWorkflow = new LinkedHashSet<>();
    }
    this.statusesPerWorkflow.add(statusesPerWorkflowItem);
    return this;
  }

  /**
   * The statuses associated with each workflow.
   * @return statusesPerWorkflow
   */
  @javax.annotation.Nullable
  public Set<StatusesPerWorkflow> getStatusesPerWorkflow() {
    return statusesPerWorkflow;
  }

  public void setStatusesPerWorkflow(@javax.annotation.Nullable Set<StatusesPerWorkflow> statusesPerWorkflow) {
    this.statusesPerWorkflow = statusesPerWorkflow;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowSchemeUpdateRequiredMappingsResponse workflowSchemeUpdateRequiredMappingsResponse = (WorkflowSchemeUpdateRequiredMappingsResponse) o;
    return Objects.equals(this.statusMappingsByIssueTypes, workflowSchemeUpdateRequiredMappingsResponse.statusMappingsByIssueTypes) &&
        Objects.equals(this.statusMappingsByWorkflows, workflowSchemeUpdateRequiredMappingsResponse.statusMappingsByWorkflows) &&
        Objects.equals(this.statuses, workflowSchemeUpdateRequiredMappingsResponse.statuses) &&
        Objects.equals(this.statusesPerWorkflow, workflowSchemeUpdateRequiredMappingsResponse.statusesPerWorkflow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statusMappingsByIssueTypes, statusMappingsByWorkflows, statuses, statusesPerWorkflow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowSchemeUpdateRequiredMappingsResponse {\n");
    sb.append("    statusMappingsByIssueTypes: ").append(toIndentedString(statusMappingsByIssueTypes)).append("\n");
    sb.append("    statusMappingsByWorkflows: ").append(toIndentedString(statusMappingsByWorkflows)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    statusesPerWorkflow: ").append(toIndentedString(statusesPerWorkflow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("statusMappingsByIssueTypes");
    openapiFields.add("statusMappingsByWorkflows");
    openapiFields.add("statuses");
    openapiFields.add("statusesPerWorkflow");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowSchemeUpdateRequiredMappingsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowSchemeUpdateRequiredMappingsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowSchemeUpdateRequiredMappingsResponse is not found in the empty JSON string", WorkflowSchemeUpdateRequiredMappingsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowSchemeUpdateRequiredMappingsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowSchemeUpdateRequiredMappingsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("statusMappingsByIssueTypes") != null && !jsonObj.get("statusMappingsByIssueTypes").isJsonNull()) {
        JsonArray jsonArraystatusMappingsByIssueTypes = jsonObj.getAsJsonArray("statusMappingsByIssueTypes");
        if (jsonArraystatusMappingsByIssueTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statusMappingsByIssueTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statusMappingsByIssueTypes` to be an array in the JSON string but got `%s`", jsonObj.get("statusMappingsByIssueTypes").toString()));
          }

          // validate the optional field `statusMappingsByIssueTypes` (array)
          for (int i = 0; i < jsonArraystatusMappingsByIssueTypes.size(); i++) {
            RequiredMappingByIssueType.validateJsonElement(jsonArraystatusMappingsByIssueTypes.get(i));
          };
        }
      }
      if (jsonObj.get("statusMappingsByWorkflows") != null && !jsonObj.get("statusMappingsByWorkflows").isJsonNull()) {
        JsonArray jsonArraystatusMappingsByWorkflows = jsonObj.getAsJsonArray("statusMappingsByWorkflows");
        if (jsonArraystatusMappingsByWorkflows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statusMappingsByWorkflows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statusMappingsByWorkflows` to be an array in the JSON string but got `%s`", jsonObj.get("statusMappingsByWorkflows").toString()));
          }

          // validate the optional field `statusMappingsByWorkflows` (array)
          for (int i = 0; i < jsonArraystatusMappingsByWorkflows.size(); i++) {
            RequiredMappingByWorkflows.validateJsonElement(jsonArraystatusMappingsByWorkflows.get(i));
          };
        }
      }
      if (jsonObj.get("statuses") != null && !jsonObj.get("statuses").isJsonNull()) {
        JsonArray jsonArraystatuses = jsonObj.getAsJsonArray("statuses");
        if (jsonArraystatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statuses` to be an array in the JSON string but got `%s`", jsonObj.get("statuses").toString()));
          }

          // validate the optional field `statuses` (array)
          for (int i = 0; i < jsonArraystatuses.size(); i++) {
            StatusMetadata.validateJsonElement(jsonArraystatuses.get(i));
          };
        }
      }
      if (jsonObj.get("statusesPerWorkflow") != null && !jsonObj.get("statusesPerWorkflow").isJsonNull()) {
        JsonArray jsonArraystatusesPerWorkflow = jsonObj.getAsJsonArray("statusesPerWorkflow");
        if (jsonArraystatusesPerWorkflow != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statusesPerWorkflow").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statusesPerWorkflow` to be an array in the JSON string but got `%s`", jsonObj.get("statusesPerWorkflow").toString()));
          }

          // validate the optional field `statusesPerWorkflow` (array)
          for (int i = 0; i < jsonArraystatusesPerWorkflow.size(); i++) {
            StatusesPerWorkflow.validateJsonElement(jsonArraystatusesPerWorkflow.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowSchemeUpdateRequiredMappingsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowSchemeUpdateRequiredMappingsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowSchemeUpdateRequiredMappingsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowSchemeUpdateRequiredMappingsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowSchemeUpdateRequiredMappingsResponse>() {
           @Override
           public void write(JsonWriter out, WorkflowSchemeUpdateRequiredMappingsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowSchemeUpdateRequiredMappingsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowSchemeUpdateRequiredMappingsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowSchemeUpdateRequiredMappingsResponse
   * @throws IOException if the JSON string is invalid with respect to WorkflowSchemeUpdateRequiredMappingsResponse
   */
  public static WorkflowSchemeUpdateRequiredMappingsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowSchemeUpdateRequiredMappingsResponse.class);
  }

  /**
   * Convert an instance of WorkflowSchemeUpdateRequiredMappingsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

