/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.JiraComponentField;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * JiraMultiSelectComponentField
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class JiraMultiSelectComponentField {
  /**
   * Gets or Sets bulkEditMultiSelectFieldOption
   */
  @JsonAdapter(BulkEditMultiSelectFieldOptionEnum.Adapter.class)
  public enum BulkEditMultiSelectFieldOptionEnum {
    ADD("ADD"),
    
    REMOVE("REMOVE"),
    
    REPLACE("REPLACE"),
    
    REMOVE_ALL("REMOVE_ALL");

    private String value;

    BulkEditMultiSelectFieldOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BulkEditMultiSelectFieldOptionEnum fromValue(String value) {
      for (BulkEditMultiSelectFieldOptionEnum b : BulkEditMultiSelectFieldOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BulkEditMultiSelectFieldOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BulkEditMultiSelectFieldOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BulkEditMultiSelectFieldOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BulkEditMultiSelectFieldOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BulkEditMultiSelectFieldOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BULK_EDIT_MULTI_SELECT_FIELD_OPTION = "bulkEditMultiSelectFieldOption";
  @SerializedName(SERIALIZED_NAME_BULK_EDIT_MULTI_SELECT_FIELD_OPTION)
  @javax.annotation.Nonnull
  private BulkEditMultiSelectFieldOptionEnum bulkEditMultiSelectFieldOption;

  public static final String SERIALIZED_NAME_COMPONENTS = "components";
  @SerializedName(SERIALIZED_NAME_COMPONENTS)
  @javax.annotation.Nonnull
  private List<JiraComponentField> components = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIELD_ID = "fieldId";
  @SerializedName(SERIALIZED_NAME_FIELD_ID)
  @javax.annotation.Nonnull
  private String fieldId;

  public JiraMultiSelectComponentField() {
  }

  public JiraMultiSelectComponentField bulkEditMultiSelectFieldOption(@javax.annotation.Nonnull BulkEditMultiSelectFieldOptionEnum bulkEditMultiSelectFieldOption) {
    this.bulkEditMultiSelectFieldOption = bulkEditMultiSelectFieldOption;
    return this;
  }

  /**
   * Get bulkEditMultiSelectFieldOption
   * @return bulkEditMultiSelectFieldOption
   */
  @javax.annotation.Nonnull
  public BulkEditMultiSelectFieldOptionEnum getBulkEditMultiSelectFieldOption() {
    return bulkEditMultiSelectFieldOption;
  }

  public void setBulkEditMultiSelectFieldOption(@javax.annotation.Nonnull BulkEditMultiSelectFieldOptionEnum bulkEditMultiSelectFieldOption) {
    this.bulkEditMultiSelectFieldOption = bulkEditMultiSelectFieldOption;
  }


  public JiraMultiSelectComponentField components(@javax.annotation.Nonnull List<JiraComponentField> components) {
    this.components = components;
    return this;
  }

  public JiraMultiSelectComponentField addComponentsItem(JiraComponentField componentsItem) {
    if (this.components == null) {
      this.components = new ArrayList<>();
    }
    this.components.add(componentsItem);
    return this;
  }

  /**
   * Get components
   * @return components
   */
  @javax.annotation.Nonnull
  public List<JiraComponentField> getComponents() {
    return components;
  }

  public void setComponents(@javax.annotation.Nonnull List<JiraComponentField> components) {
    this.components = components;
  }


  public JiraMultiSelectComponentField fieldId(@javax.annotation.Nonnull String fieldId) {
    this.fieldId = fieldId;
    return this;
  }

  /**
   * Get fieldId
   * @return fieldId
   */
  @javax.annotation.Nonnull
  public String getFieldId() {
    return fieldId;
  }

  public void setFieldId(@javax.annotation.Nonnull String fieldId) {
    this.fieldId = fieldId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JiraMultiSelectComponentField jiraMultiSelectComponentField = (JiraMultiSelectComponentField) o;
    return Objects.equals(this.bulkEditMultiSelectFieldOption, jiraMultiSelectComponentField.bulkEditMultiSelectFieldOption) &&
        Objects.equals(this.components, jiraMultiSelectComponentField.components) &&
        Objects.equals(this.fieldId, jiraMultiSelectComponentField.fieldId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bulkEditMultiSelectFieldOption, components, fieldId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JiraMultiSelectComponentField {\n");
    sb.append("    bulkEditMultiSelectFieldOption: ").append(toIndentedString(bulkEditMultiSelectFieldOption)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    fieldId: ").append(toIndentedString(fieldId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bulkEditMultiSelectFieldOption");
    openapiFields.add("components");
    openapiFields.add("fieldId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bulkEditMultiSelectFieldOption");
    openapiRequiredFields.add("components");
    openapiRequiredFields.add("fieldId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JiraMultiSelectComponentField
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JiraMultiSelectComponentField.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JiraMultiSelectComponentField is not found in the empty JSON string", JiraMultiSelectComponentField.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JiraMultiSelectComponentField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JiraMultiSelectComponentField` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JiraMultiSelectComponentField.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("bulkEditMultiSelectFieldOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bulkEditMultiSelectFieldOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bulkEditMultiSelectFieldOption").toString()));
      }
      // validate the required field `bulkEditMultiSelectFieldOption`
      BulkEditMultiSelectFieldOptionEnum.validateJsonElement(jsonObj.get("bulkEditMultiSelectFieldOption"));
      // ensure the json data is an array
      if (!jsonObj.get("components").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `components` to be an array in the JSON string but got `%s`", jsonObj.get("components").toString()));
      }

      JsonArray jsonArraycomponents = jsonObj.getAsJsonArray("components");
      // validate the required field `components` (array)
      for (int i = 0; i < jsonArraycomponents.size(); i++) {
        JiraComponentField.validateJsonElement(jsonArraycomponents.get(i));
      };
      if (!jsonObj.get("fieldId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JiraMultiSelectComponentField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JiraMultiSelectComponentField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JiraMultiSelectComponentField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JiraMultiSelectComponentField.class));

       return (TypeAdapter<T>) new TypeAdapter<JiraMultiSelectComponentField>() {
           @Override
           public void write(JsonWriter out, JiraMultiSelectComponentField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JiraMultiSelectComponentField read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JiraMultiSelectComponentField given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JiraMultiSelectComponentField
   * @throws IOException if the JSON string is invalid with respect to JiraMultiSelectComponentField
   */
  public static JiraMultiSelectComponentField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JiraMultiSelectComponentField.class);
  }

  /**
   * Convert an instance of JiraMultiSelectComponentField to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

