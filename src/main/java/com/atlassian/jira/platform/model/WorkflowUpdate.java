/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.DocumentVersion;
import com.atlassian.jira.platform.model.StatusLayoutUpdate;
import com.atlassian.jira.platform.model.StatusMappingDTO;
import com.atlassian.jira.platform.model.StatusMigration;
import com.atlassian.jira.platform.model.TransitionUpdateDTO;
import com.atlassian.jira.platform.model.WorkflowLayout;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * The details of the workflows to update.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class WorkflowUpdate {
  public static final String SERIALIZED_NAME_DEFAULT_STATUS_MAPPINGS = "defaultStatusMappings";
  @SerializedName(SERIALIZED_NAME_DEFAULT_STATUS_MAPPINGS)
  @javax.annotation.Nullable
  private List<StatusMigration> defaultStatusMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_START_POINT_LAYOUT = "startPointLayout";
  @SerializedName(SERIALIZED_NAME_START_POINT_LAYOUT)
  @javax.annotation.Nullable
  private WorkflowLayout startPointLayout;

  public static final String SERIALIZED_NAME_STATUS_MAPPINGS = "statusMappings";
  @SerializedName(SERIALIZED_NAME_STATUS_MAPPINGS)
  @javax.annotation.Nullable
  private List<StatusMappingDTO> statusMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  @javax.annotation.Nonnull
  private List<StatusLayoutUpdate> statuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSITIONS = "transitions";
  @SerializedName(SERIALIZED_NAME_TRANSITIONS)
  @javax.annotation.Nonnull
  private List<TransitionUpdateDTO> transitions = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nonnull
  private DocumentVersion version;

  public WorkflowUpdate() {
  }

  public WorkflowUpdate defaultStatusMappings(@javax.annotation.Nullable List<StatusMigration> defaultStatusMappings) {
    this.defaultStatusMappings = defaultStatusMappings;
    return this;
  }

  public WorkflowUpdate addDefaultStatusMappingsItem(StatusMigration defaultStatusMappingsItem) {
    if (this.defaultStatusMappings == null) {
      this.defaultStatusMappings = new ArrayList<>();
    }
    this.defaultStatusMappings.add(defaultStatusMappingsItem);
    return this;
  }

  /**
   * The mapping of old to new status ID.
   * @return defaultStatusMappings
   */
  @javax.annotation.Nullable
  public List<StatusMigration> getDefaultStatusMappings() {
    return defaultStatusMappings;
  }

  public void setDefaultStatusMappings(@javax.annotation.Nullable List<StatusMigration> defaultStatusMappings) {
    this.defaultStatusMappings = defaultStatusMappings;
  }


  public WorkflowUpdate description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * The new description for this workflow.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public WorkflowUpdate id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of this workflow.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public WorkflowUpdate startPointLayout(@javax.annotation.Nullable WorkflowLayout startPointLayout) {
    this.startPointLayout = startPointLayout;
    return this;
  }

  /**
   * Get startPointLayout
   * @return startPointLayout
   */
  @javax.annotation.Nullable
  public WorkflowLayout getStartPointLayout() {
    return startPointLayout;
  }

  public void setStartPointLayout(@javax.annotation.Nullable WorkflowLayout startPointLayout) {
    this.startPointLayout = startPointLayout;
  }


  public WorkflowUpdate statusMappings(@javax.annotation.Nullable List<StatusMappingDTO> statusMappings) {
    this.statusMappings = statusMappings;
    return this;
  }

  public WorkflowUpdate addStatusMappingsItem(StatusMappingDTO statusMappingsItem) {
    if (this.statusMappings == null) {
      this.statusMappings = new ArrayList<>();
    }
    this.statusMappings.add(statusMappingsItem);
    return this;
  }

  /**
   * The mapping of old to new status ID for a specific project and issue type.
   * @return statusMappings
   */
  @javax.annotation.Nullable
  public List<StatusMappingDTO> getStatusMappings() {
    return statusMappings;
  }

  public void setStatusMappings(@javax.annotation.Nullable List<StatusMappingDTO> statusMappings) {
    this.statusMappings = statusMappings;
  }


  public WorkflowUpdate statuses(@javax.annotation.Nonnull List<StatusLayoutUpdate> statuses) {
    this.statuses = statuses;
    return this;
  }

  public WorkflowUpdate addStatusesItem(StatusLayoutUpdate statusesItem) {
    if (this.statuses == null) {
      this.statuses = new ArrayList<>();
    }
    this.statuses.add(statusesItem);
    return this;
  }

  /**
   * The statuses associated with this workflow.
   * @return statuses
   */
  @javax.annotation.Nonnull
  public List<StatusLayoutUpdate> getStatuses() {
    return statuses;
  }

  public void setStatuses(@javax.annotation.Nonnull List<StatusLayoutUpdate> statuses) {
    this.statuses = statuses;
  }


  public WorkflowUpdate transitions(@javax.annotation.Nonnull List<TransitionUpdateDTO> transitions) {
    this.transitions = transitions;
    return this;
  }

  public WorkflowUpdate addTransitionsItem(TransitionUpdateDTO transitionsItem) {
    if (this.transitions == null) {
      this.transitions = new ArrayList<>();
    }
    this.transitions.add(transitionsItem);
    return this;
  }

  /**
   * The transitions of this workflow.
   * @return transitions
   */
  @javax.annotation.Nonnull
  public List<TransitionUpdateDTO> getTransitions() {
    return transitions;
  }

  public void setTransitions(@javax.annotation.Nonnull List<TransitionUpdateDTO> transitions) {
    this.transitions = transitions;
  }


  public WorkflowUpdate version(@javax.annotation.Nonnull DocumentVersion version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public DocumentVersion getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nonnull DocumentVersion version) {
    this.version = version;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WorkflowUpdate instance itself
   */
  public WorkflowUpdate putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowUpdate workflowUpdate = (WorkflowUpdate) o;
    return Objects.equals(this.defaultStatusMappings, workflowUpdate.defaultStatusMappings) &&
        Objects.equals(this.description, workflowUpdate.description) &&
        Objects.equals(this.id, workflowUpdate.id) &&
        Objects.equals(this.startPointLayout, workflowUpdate.startPointLayout) &&
        Objects.equals(this.statusMappings, workflowUpdate.statusMappings) &&
        Objects.equals(this.statuses, workflowUpdate.statuses) &&
        Objects.equals(this.transitions, workflowUpdate.transitions) &&
        Objects.equals(this.version, workflowUpdate.version)&&
        Objects.equals(this.additionalProperties, workflowUpdate.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultStatusMappings, description, id, startPointLayout, statusMappings, statuses, transitions, version, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowUpdate {\n");
    sb.append("    defaultStatusMappings: ").append(toIndentedString(defaultStatusMappings)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    startPointLayout: ").append(toIndentedString(startPointLayout)).append("\n");
    sb.append("    statusMappings: ").append(toIndentedString(statusMappings)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    transitions: ").append(toIndentedString(transitions)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultStatusMappings");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("startPointLayout");
    openapiFields.add("statusMappings");
    openapiFields.add("statuses");
    openapiFields.add("transitions");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("statuses");
    openapiRequiredFields.add("transitions");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowUpdate is not found in the empty JSON string", WorkflowUpdate.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkflowUpdate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("defaultStatusMappings") != null && !jsonObj.get("defaultStatusMappings").isJsonNull() && !jsonObj.get("defaultStatusMappings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultStatusMappings` to be an array in the JSON string but got `%s`", jsonObj.get("defaultStatusMappings").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `startPointLayout`
      if (jsonObj.get("startPointLayout") != null && !jsonObj.get("startPointLayout").isJsonNull()) {
        WorkflowLayout.validateJsonElement(jsonObj.get("startPointLayout"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("statusMappings") != null && !jsonObj.get("statusMappings").isJsonNull() && !jsonObj.get("statusMappings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusMappings` to be an array in the JSON string but got `%s`", jsonObj.get("statusMappings").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("statuses") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("statuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses` to be an array in the JSON string but got `%s`", jsonObj.get("statuses").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("transitions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("transitions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transitions` to be an array in the JSON string but got `%s`", jsonObj.get("transitions").toString()));
      }
      // validate the required field `version`
      DocumentVersion.validateJsonElement(jsonObj.get("version"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowUpdate>() {
           @Override
           public void write(JsonWriter out, WorkflowUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             WorkflowUpdate instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowUpdate
   * @throws IOException if the JSON string is invalid with respect to WorkflowUpdate
   */
  public static WorkflowUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowUpdate.class);
  }

  /**
   * Convert an instance of WorkflowUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

