/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.ApprovalConfiguration;
import com.atlassian.jira.platform.model.WorkflowLayout;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * The statuses associated with this workflow.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class StatusLayoutUpdate {
  public static final String SERIALIZED_NAME_APPROVAL_CONFIGURATION = "approvalConfiguration";
  @SerializedName(SERIALIZED_NAME_APPROVAL_CONFIGURATION)
  @javax.annotation.Nullable
  private ApprovalConfiguration approvalConfiguration;

  public static final String SERIALIZED_NAME_LAYOUT = "layout";
  @SerializedName(SERIALIZED_NAME_LAYOUT)
  @javax.annotation.Nullable
  private WorkflowLayout layout;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  @javax.annotation.Nonnull
  private Map<String, String> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_STATUS_REFERENCE = "statusReference";
  @SerializedName(SERIALIZED_NAME_STATUS_REFERENCE)
  @javax.annotation.Nonnull
  private String statusReference;

  public StatusLayoutUpdate() {
  }

  public StatusLayoutUpdate approvalConfiguration(@javax.annotation.Nullable ApprovalConfiguration approvalConfiguration) {
    this.approvalConfiguration = approvalConfiguration;
    return this;
  }

  /**
   * Get approvalConfiguration
   * @return approvalConfiguration
   */
  @javax.annotation.Nullable
  public ApprovalConfiguration getApprovalConfiguration() {
    return approvalConfiguration;
  }

  public void setApprovalConfiguration(@javax.annotation.Nullable ApprovalConfiguration approvalConfiguration) {
    this.approvalConfiguration = approvalConfiguration;
  }


  public StatusLayoutUpdate layout(@javax.annotation.Nullable WorkflowLayout layout) {
    this.layout = layout;
    return this;
  }

  /**
   * Get layout
   * @return layout
   */
  @javax.annotation.Nullable
  public WorkflowLayout getLayout() {
    return layout;
  }

  public void setLayout(@javax.annotation.Nullable WorkflowLayout layout) {
    this.layout = layout;
  }


  public StatusLayoutUpdate properties(@javax.annotation.Nonnull Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public StatusLayoutUpdate putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * The properties for this status layout.
   * @return properties
   */
  @javax.annotation.Nonnull
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(@javax.annotation.Nonnull Map<String, String> properties) {
    this.properties = properties;
  }


  public StatusLayoutUpdate statusReference(@javax.annotation.Nonnull String statusReference) {
    this.statusReference = statusReference;
    return this;
  }

  /**
   * A unique ID which the status will use to refer to this layout configuration.
   * @return statusReference
   */
  @javax.annotation.Nonnull
  public String getStatusReference() {
    return statusReference;
  }

  public void setStatusReference(@javax.annotation.Nonnull String statusReference) {
    this.statusReference = statusReference;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the StatusLayoutUpdate instance itself
   */
  public StatusLayoutUpdate putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatusLayoutUpdate statusLayoutUpdate = (StatusLayoutUpdate) o;
    return Objects.equals(this.approvalConfiguration, statusLayoutUpdate.approvalConfiguration) &&
        Objects.equals(this.layout, statusLayoutUpdate.layout) &&
        Objects.equals(this.properties, statusLayoutUpdate.properties) &&
        Objects.equals(this.statusReference, statusLayoutUpdate.statusReference)&&
        Objects.equals(this.additionalProperties, statusLayoutUpdate.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(approvalConfiguration, layout, properties, statusReference, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatusLayoutUpdate {\n");
    sb.append("    approvalConfiguration: ").append(toIndentedString(approvalConfiguration)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    statusReference: ").append(toIndentedString(statusReference)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approvalConfiguration");
    openapiFields.add("layout");
    openapiFields.add("properties");
    openapiFields.add("statusReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("properties");
    openapiRequiredFields.add("statusReference");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StatusLayoutUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StatusLayoutUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatusLayoutUpdate is not found in the empty JSON string", StatusLayoutUpdate.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StatusLayoutUpdate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `approvalConfiguration`
      if (jsonObj.get("approvalConfiguration") != null && !jsonObj.get("approvalConfiguration").isJsonNull()) {
        ApprovalConfiguration.validateJsonElement(jsonObj.get("approvalConfiguration"));
      }
      // validate the optional field `layout`
      if (jsonObj.get("layout") != null && !jsonObj.get("layout").isJsonNull()) {
        WorkflowLayout.validateJsonElement(jsonObj.get("layout"));
      }
      if (!jsonObj.get("statusReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusReference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatusLayoutUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatusLayoutUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatusLayoutUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatusLayoutUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<StatusLayoutUpdate>() {
           @Override
           public void write(JsonWriter out, StatusLayoutUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public StatusLayoutUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             StatusLayoutUpdate instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StatusLayoutUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StatusLayoutUpdate
   * @throws IOException if the JSON string is invalid with respect to StatusLayoutUpdate
   */
  public static StatusLayoutUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatusLayoutUpdate.class);
  }

  /**
   * Convert an instance of StatusLayoutUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

