/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * Details of a field that can be used in advanced searches.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class FieldReferenceData {
  /**
   * Whether the field provide auto-complete suggestions.
   */
  @JsonAdapter(AutoEnum.Adapter.class)
  public enum AutoEnum {
    TRUE("true"),
    
    FALSE("false");

    private String value;

    AutoEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutoEnum fromValue(String value) {
      for (AutoEnum b : AutoEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutoEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutoEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutoEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutoEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AutoEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTO = "auto";
  @SerializedName(SERIALIZED_NAME_AUTO)
  @javax.annotation.Nullable
  private AutoEnum auto;

  public static final String SERIALIZED_NAME_CFID = "cfid";
  @SerializedName(SERIALIZED_NAME_CFID)
  @javax.annotation.Nullable
  private String cfid;

  /**
   * Whether this field has been deprecated.
   */
  @JsonAdapter(DeprecatedEnum.Adapter.class)
  public enum DeprecatedEnum {
    TRUE("true"),
    
    FALSE("false");

    private String value;

    DeprecatedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeprecatedEnum fromValue(String value) {
      for (DeprecatedEnum b : DeprecatedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeprecatedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeprecatedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeprecatedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeprecatedEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeprecatedEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEPRECATED = "deprecated";
  @SerializedName(SERIALIZED_NAME_DEPRECATED)
  @javax.annotation.Nullable
  private DeprecatedEnum deprecated;

  public static final String SERIALIZED_NAME_DEPRECATED_SEARCHER_KEY = "deprecatedSearcherKey";
  @SerializedName(SERIALIZED_NAME_DEPRECATED_SEARCHER_KEY)
  @javax.annotation.Nullable
  private String deprecatedSearcherKey;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  @javax.annotation.Nullable
  private String displayName;

  public static final String SERIALIZED_NAME_OPERATORS = "operators";
  @SerializedName(SERIALIZED_NAME_OPERATORS)
  @javax.annotation.Nullable
  private List<String> operators = new ArrayList<>();

  /**
   * Whether the field can be used in a query&#39;s &#x60;ORDER BY&#x60; clause.
   */
  @JsonAdapter(OrderableEnum.Adapter.class)
  public enum OrderableEnum {
    TRUE("true"),
    
    FALSE("false");

    private String value;

    OrderableEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderableEnum fromValue(String value) {
      for (OrderableEnum b : OrderableEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrderableEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderableEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderableEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrderableEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrderableEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORDERABLE = "orderable";
  @SerializedName(SERIALIZED_NAME_ORDERABLE)
  @javax.annotation.Nullable
  private OrderableEnum orderable;

  /**
   * Whether the content of this field can be searched.
   */
  @JsonAdapter(SearchableEnum.Adapter.class)
  public enum SearchableEnum {
    TRUE("true"),
    
    FALSE("false");

    private String value;

    SearchableEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SearchableEnum fromValue(String value) {
      for (SearchableEnum b : SearchableEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SearchableEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SearchableEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SearchableEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SearchableEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SearchableEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEARCHABLE = "searchable";
  @SerializedName(SERIALIZED_NAME_SEARCHABLE)
  @javax.annotation.Nullable
  private SearchableEnum searchable;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  @javax.annotation.Nullable
  private List<String> types = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nullable
  private String value;

  public FieldReferenceData() {
  }

  public FieldReferenceData auto(@javax.annotation.Nullable AutoEnum auto) {
    this.auto = auto;
    return this;
  }

  /**
   * Whether the field provide auto-complete suggestions.
   * @return auto
   */
  @javax.annotation.Nullable
  public AutoEnum getAuto() {
    return auto;
  }

  public void setAuto(@javax.annotation.Nullable AutoEnum auto) {
    this.auto = auto;
  }


  public FieldReferenceData cfid(@javax.annotation.Nullable String cfid) {
    this.cfid = cfid;
    return this;
  }

  /**
   * If the item is a custom field, the ID of the custom field.
   * @return cfid
   */
  @javax.annotation.Nullable
  public String getCfid() {
    return cfid;
  }

  public void setCfid(@javax.annotation.Nullable String cfid) {
    this.cfid = cfid;
  }


  public FieldReferenceData deprecated(@javax.annotation.Nullable DeprecatedEnum deprecated) {
    this.deprecated = deprecated;
    return this;
  }

  /**
   * Whether this field has been deprecated.
   * @return deprecated
   */
  @javax.annotation.Nullable
  public DeprecatedEnum getDeprecated() {
    return deprecated;
  }

  public void setDeprecated(@javax.annotation.Nullable DeprecatedEnum deprecated) {
    this.deprecated = deprecated;
  }


  public FieldReferenceData deprecatedSearcherKey(@javax.annotation.Nullable String deprecatedSearcherKey) {
    this.deprecatedSearcherKey = deprecatedSearcherKey;
    return this;
  }

  /**
   * The searcher key of the field, only passed when the field is deprecated.
   * @return deprecatedSearcherKey
   */
  @javax.annotation.Nullable
  public String getDeprecatedSearcherKey() {
    return deprecatedSearcherKey;
  }

  public void setDeprecatedSearcherKey(@javax.annotation.Nullable String deprecatedSearcherKey) {
    this.deprecatedSearcherKey = deprecatedSearcherKey;
  }


  public FieldReferenceData displayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name contains the following:   *  for system fields, the field name. For example, &#x60;Summary&#x60;.  *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, &#x60;Component - Component[Dropdown]&#x60;.  *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, &#x60;Component - cf[10061]&#x60;.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
  }


  public FieldReferenceData operators(@javax.annotation.Nullable List<String> operators) {
    this.operators = operators;
    return this;
  }

  public FieldReferenceData addOperatorsItem(String operatorsItem) {
    if (this.operators == null) {
      this.operators = new ArrayList<>();
    }
    this.operators.add(operatorsItem);
    return this;
  }

  /**
   * The valid search operators for the field.
   * @return operators
   */
  @javax.annotation.Nullable
  public List<String> getOperators() {
    return operators;
  }

  public void setOperators(@javax.annotation.Nullable List<String> operators) {
    this.operators = operators;
  }


  public FieldReferenceData orderable(@javax.annotation.Nullable OrderableEnum orderable) {
    this.orderable = orderable;
    return this;
  }

  /**
   * Whether the field can be used in a query&#39;s &#x60;ORDER BY&#x60; clause.
   * @return orderable
   */
  @javax.annotation.Nullable
  public OrderableEnum getOrderable() {
    return orderable;
  }

  public void setOrderable(@javax.annotation.Nullable OrderableEnum orderable) {
    this.orderable = orderable;
  }


  public FieldReferenceData searchable(@javax.annotation.Nullable SearchableEnum searchable) {
    this.searchable = searchable;
    return this;
  }

  /**
   * Whether the content of this field can be searched.
   * @return searchable
   */
  @javax.annotation.Nullable
  public SearchableEnum getSearchable() {
    return searchable;
  }

  public void setSearchable(@javax.annotation.Nullable SearchableEnum searchable) {
    this.searchable = searchable;
  }


  public FieldReferenceData types(@javax.annotation.Nullable List<String> types) {
    this.types = types;
    return this;
  }

  public FieldReferenceData addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

  /**
   * The data types of items in the field.
   * @return types
   */
  @javax.annotation.Nullable
  public List<String> getTypes() {
    return types;
  }

  public void setTypes(@javax.annotation.Nullable List<String> types) {
    this.types = types;
  }


  public FieldReferenceData value(@javax.annotation.Nullable String value) {
    this.value = value;
    return this;
  }

  /**
   * The field identifier.
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nullable String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldReferenceData fieldReferenceData = (FieldReferenceData) o;
    return Objects.equals(this.auto, fieldReferenceData.auto) &&
        Objects.equals(this.cfid, fieldReferenceData.cfid) &&
        Objects.equals(this.deprecated, fieldReferenceData.deprecated) &&
        Objects.equals(this.deprecatedSearcherKey, fieldReferenceData.deprecatedSearcherKey) &&
        Objects.equals(this.displayName, fieldReferenceData.displayName) &&
        Objects.equals(this.operators, fieldReferenceData.operators) &&
        Objects.equals(this.orderable, fieldReferenceData.orderable) &&
        Objects.equals(this.searchable, fieldReferenceData.searchable) &&
        Objects.equals(this.types, fieldReferenceData.types) &&
        Objects.equals(this.value, fieldReferenceData.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auto, cfid, deprecated, deprecatedSearcherKey, displayName, operators, orderable, searchable, types, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldReferenceData {\n");
    sb.append("    auto: ").append(toIndentedString(auto)).append("\n");
    sb.append("    cfid: ").append(toIndentedString(cfid)).append("\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    deprecatedSearcherKey: ").append(toIndentedString(deprecatedSearcherKey)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    operators: ").append(toIndentedString(operators)).append("\n");
    sb.append("    orderable: ").append(toIndentedString(orderable)).append("\n");
    sb.append("    searchable: ").append(toIndentedString(searchable)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto");
    openapiFields.add("cfid");
    openapiFields.add("deprecated");
    openapiFields.add("deprecatedSearcherKey");
    openapiFields.add("displayName");
    openapiFields.add("operators");
    openapiFields.add("orderable");
    openapiFields.add("searchable");
    openapiFields.add("types");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FieldReferenceData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FieldReferenceData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldReferenceData is not found in the empty JSON string", FieldReferenceData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FieldReferenceData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FieldReferenceData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("auto") != null && !jsonObj.get("auto").isJsonNull()) && !jsonObj.get("auto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auto").toString()));
      }
      // validate the optional field `auto`
      if (jsonObj.get("auto") != null && !jsonObj.get("auto").isJsonNull()) {
        AutoEnum.validateJsonElement(jsonObj.get("auto"));
      }
      if ((jsonObj.get("cfid") != null && !jsonObj.get("cfid").isJsonNull()) && !jsonObj.get("cfid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cfid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cfid").toString()));
      }
      if ((jsonObj.get("deprecated") != null && !jsonObj.get("deprecated").isJsonNull()) && !jsonObj.get("deprecated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deprecated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deprecated").toString()));
      }
      // validate the optional field `deprecated`
      if (jsonObj.get("deprecated") != null && !jsonObj.get("deprecated").isJsonNull()) {
        DeprecatedEnum.validateJsonElement(jsonObj.get("deprecated"));
      }
      if ((jsonObj.get("deprecatedSearcherKey") != null && !jsonObj.get("deprecatedSearcherKey").isJsonNull()) && !jsonObj.get("deprecatedSearcherKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deprecatedSearcherKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deprecatedSearcherKey").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("operators") != null && !jsonObj.get("operators").isJsonNull() && !jsonObj.get("operators").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `operators` to be an array in the JSON string but got `%s`", jsonObj.get("operators").toString()));
      }
      if ((jsonObj.get("orderable") != null && !jsonObj.get("orderable").isJsonNull()) && !jsonObj.get("orderable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderable").toString()));
      }
      // validate the optional field `orderable`
      if (jsonObj.get("orderable") != null && !jsonObj.get("orderable").isJsonNull()) {
        OrderableEnum.validateJsonElement(jsonObj.get("orderable"));
      }
      if ((jsonObj.get("searchable") != null && !jsonObj.get("searchable").isJsonNull()) && !jsonObj.get("searchable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchable").toString()));
      }
      // validate the optional field `searchable`
      if (jsonObj.get("searchable") != null && !jsonObj.get("searchable").isJsonNull()) {
        SearchableEnum.validateJsonElement(jsonObj.get("searchable"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("types") != null && !jsonObj.get("types").isJsonNull() && !jsonObj.get("types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldReferenceData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldReferenceData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldReferenceData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldReferenceData.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldReferenceData>() {
           @Override
           public void write(JsonWriter out, FieldReferenceData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldReferenceData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FieldReferenceData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FieldReferenceData
   * @throws IOException if the JSON string is invalid with respect to FieldReferenceData
   */
  public static FieldReferenceData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldReferenceData.class);
  }

  /**
   * Convert an instance of FieldReferenceData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

