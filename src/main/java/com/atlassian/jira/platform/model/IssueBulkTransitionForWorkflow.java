/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.SimplifiedIssueTransition;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * IssueBulkTransitionForWorkflow
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class IssueBulkTransitionForWorkflow {
  public static final String SERIALIZED_NAME_IS_TRANSITIONS_FILTERED = "isTransitionsFiltered";
  @SerializedName(SERIALIZED_NAME_IS_TRANSITIONS_FILTERED)
  @javax.annotation.Nullable
  private Boolean isTransitionsFiltered;

  public static final String SERIALIZED_NAME_ISSUES = "issues";
  @SerializedName(SERIALIZED_NAME_ISSUES)
  @javax.annotation.Nullable
  private List<String> issues = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSITIONS = "transitions";
  @SerializedName(SERIALIZED_NAME_TRANSITIONS)
  @javax.annotation.Nullable
  private List<SimplifiedIssueTransition> transitions = new ArrayList<>();

  public IssueBulkTransitionForWorkflow() {
  }

  public IssueBulkTransitionForWorkflow(
     Boolean isTransitionsFiltered, 
     List<String> issues, 
     List<SimplifiedIssueTransition> transitions
  ) {
    this();
    this.isTransitionsFiltered = isTransitionsFiltered;
    this.issues = issues;
    this.transitions = transitions;
  }

  /**
   * Indicates whether all the transitions of this workflow are available in the transitions list or not.
   * @return isTransitionsFiltered
   */
  @javax.annotation.Nullable
  public Boolean getIsTransitionsFiltered() {
    return isTransitionsFiltered;
  }



  /**
   * List of issue keys from the request which are associated with this workflow.
   * @return issues
   */
  @javax.annotation.Nullable
  public List<String> getIssues() {
    return issues;
  }



  /**
   * List of transitions available for issues from the request which are associated with this workflow.   **This list includes only those transitions that are common across the issues in this workflow and do not involve any additional field updates.** 
   * @return transitions
   */
  @javax.annotation.Nullable
  public List<SimplifiedIssueTransition> getTransitions() {
    return transitions;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueBulkTransitionForWorkflow issueBulkTransitionForWorkflow = (IssueBulkTransitionForWorkflow) o;
    return Objects.equals(this.isTransitionsFiltered, issueBulkTransitionForWorkflow.isTransitionsFiltered) &&
        Objects.equals(this.issues, issueBulkTransitionForWorkflow.issues) &&
        Objects.equals(this.transitions, issueBulkTransitionForWorkflow.transitions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isTransitionsFiltered, issues, transitions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueBulkTransitionForWorkflow {\n");
    sb.append("    isTransitionsFiltered: ").append(toIndentedString(isTransitionsFiltered)).append("\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("    transitions: ").append(toIndentedString(transitions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isTransitionsFiltered");
    openapiFields.add("issues");
    openapiFields.add("transitions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IssueBulkTransitionForWorkflow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IssueBulkTransitionForWorkflow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssueBulkTransitionForWorkflow is not found in the empty JSON string", IssueBulkTransitionForWorkflow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IssueBulkTransitionForWorkflow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IssueBulkTransitionForWorkflow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("issues") != null && !jsonObj.get("issues").isJsonNull() && !jsonObj.get("issues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `issues` to be an array in the JSON string but got `%s`", jsonObj.get("issues").toString()));
      }
      if (jsonObj.get("transitions") != null && !jsonObj.get("transitions").isJsonNull()) {
        JsonArray jsonArraytransitions = jsonObj.getAsJsonArray("transitions");
        if (jsonArraytransitions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transitions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transitions` to be an array in the JSON string but got `%s`", jsonObj.get("transitions").toString()));
          }

          // validate the optional field `transitions` (array)
          for (int i = 0; i < jsonArraytransitions.size(); i++) {
            SimplifiedIssueTransition.validateJsonElement(jsonArraytransitions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssueBulkTransitionForWorkflow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssueBulkTransitionForWorkflow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssueBulkTransitionForWorkflow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssueBulkTransitionForWorkflow.class));

       return (TypeAdapter<T>) new TypeAdapter<IssueBulkTransitionForWorkflow>() {
           @Override
           public void write(JsonWriter out, IssueBulkTransitionForWorkflow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IssueBulkTransitionForWorkflow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IssueBulkTransitionForWorkflow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IssueBulkTransitionForWorkflow
   * @throws IOException if the JSON string is invalid with respect to IssueBulkTransitionForWorkflow
   */
  public static IssueBulkTransitionForWorkflow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssueBulkTransitionForWorkflow.class);
  }

  /**
   * Convert an instance of IssueBulkTransitionForWorkflow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

