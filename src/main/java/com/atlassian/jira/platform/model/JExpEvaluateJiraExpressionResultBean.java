/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.JExpEvaluateMetaDataBean;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * The result of evaluating a Jira expression.This bean will be replacing &#x60;JiraExpressionResultBean&#x60; bean as part of new evaluate endpoint
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class JExpEvaluateJiraExpressionResultBean {
  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  @javax.annotation.Nullable
  private JExpEvaluateMetaDataBean meta;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nullable
  private Object value = null;

  public JExpEvaluateJiraExpressionResultBean() {
  }

  public JExpEvaluateJiraExpressionResultBean meta(@javax.annotation.Nullable JExpEvaluateMetaDataBean meta) {
    this.meta = meta;
    return this;
  }

  /**
   * Contains various characteristics of the performed expression evaluation.
   * @return meta
   */
  @javax.annotation.Nullable
  public JExpEvaluateMetaDataBean getMeta() {
    return meta;
  }

  public void setMeta(@javax.annotation.Nullable JExpEvaluateMetaDataBean meta) {
    this.meta = meta;
  }


  public JExpEvaluateJiraExpressionResultBean value(@javax.annotation.Nullable Object value) {
    this.value = value;
    return this;
  }

  /**
   * The value of the evaluated expression. It may be a primitive JSON value or a Jira REST API object. (Some expressions do not produce any meaningful results—for example, an expression that returns a lambda function—if that&#39;s the case a simple string representation is returned. These string representations should not be relied upon and may change without notice.)
   * @return value
   */
  @javax.annotation.Nullable
  public Object getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nullable Object value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JExpEvaluateJiraExpressionResultBean jexpEvaluateJiraExpressionResultBean = (JExpEvaluateJiraExpressionResultBean) o;
    return Objects.equals(this.meta, jexpEvaluateJiraExpressionResultBean.meta) &&
        Objects.equals(this.value, jexpEvaluateJiraExpressionResultBean.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(meta, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JExpEvaluateJiraExpressionResultBean {\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("meta");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JExpEvaluateJiraExpressionResultBean
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JExpEvaluateJiraExpressionResultBean.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JExpEvaluateJiraExpressionResultBean is not found in the empty JSON string", JExpEvaluateJiraExpressionResultBean.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JExpEvaluateJiraExpressionResultBean.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JExpEvaluateJiraExpressionResultBean` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JExpEvaluateJiraExpressionResultBean.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        JExpEvaluateMetaDataBean.validateJsonElement(jsonObj.get("meta"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JExpEvaluateJiraExpressionResultBean.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JExpEvaluateJiraExpressionResultBean' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JExpEvaluateJiraExpressionResultBean> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JExpEvaluateJiraExpressionResultBean.class));

       return (TypeAdapter<T>) new TypeAdapter<JExpEvaluateJiraExpressionResultBean>() {
           @Override
           public void write(JsonWriter out, JExpEvaluateJiraExpressionResultBean value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JExpEvaluateJiraExpressionResultBean read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JExpEvaluateJiraExpressionResultBean given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JExpEvaluateJiraExpressionResultBean
   * @throws IOException if the JSON string is invalid with respect to JExpEvaluateJiraExpressionResultBean
   */
  public static JExpEvaluateJiraExpressionResultBean fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JExpEvaluateJiraExpressionResultBean.class);
  }

  /**
   * Convert an instance of JExpEvaluateJiraExpressionResultBean to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

