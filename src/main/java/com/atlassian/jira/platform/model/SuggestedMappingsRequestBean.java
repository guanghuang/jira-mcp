/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.SuggestedMappingsForPrioritiesRequestBean;
import com.atlassian.jira.platform.model.SuggestedMappingsForProjectsRequestBean;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * Details of changes to a priority scheme that require suggested priority mappings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class SuggestedMappingsRequestBean {
  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  @javax.annotation.Nullable
  private Integer maxResults;

  public static final String SERIALIZED_NAME_PRIORITIES = "priorities";
  @SerializedName(SERIALIZED_NAME_PRIORITIES)
  @javax.annotation.Nullable
  private SuggestedMappingsForPrioritiesRequestBean priorities;

  public static final String SERIALIZED_NAME_PROJECTS = "projects";
  @SerializedName(SERIALIZED_NAME_PROJECTS)
  @javax.annotation.Nullable
  private SuggestedMappingsForProjectsRequestBean projects;

  public static final String SERIALIZED_NAME_SCHEME_ID = "schemeId";
  @SerializedName(SERIALIZED_NAME_SCHEME_ID)
  @javax.annotation.Nullable
  private Long schemeId;

  public static final String SERIALIZED_NAME_START_AT = "startAt";
  @SerializedName(SERIALIZED_NAME_START_AT)
  @javax.annotation.Nullable
  private Long startAt;

  public SuggestedMappingsRequestBean() {
  }

  public SuggestedMappingsRequestBean maxResults(@javax.annotation.Nullable Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of results that could be on the page.
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(@javax.annotation.Nullable Integer maxResults) {
    this.maxResults = maxResults;
  }


  public SuggestedMappingsRequestBean priorities(@javax.annotation.Nullable SuggestedMappingsForPrioritiesRequestBean priorities) {
    this.priorities = priorities;
    return this;
  }

  /**
   * The priority changes in the scheme.
   * @return priorities
   */
  @javax.annotation.Nullable
  public SuggestedMappingsForPrioritiesRequestBean getPriorities() {
    return priorities;
  }

  public void setPriorities(@javax.annotation.Nullable SuggestedMappingsForPrioritiesRequestBean priorities) {
    this.priorities = priorities;
  }


  public SuggestedMappingsRequestBean projects(@javax.annotation.Nullable SuggestedMappingsForProjectsRequestBean projects) {
    this.projects = projects;
    return this;
  }

  /**
   * The project changes in the scheme.
   * @return projects
   */
  @javax.annotation.Nullable
  public SuggestedMappingsForProjectsRequestBean getProjects() {
    return projects;
  }

  public void setProjects(@javax.annotation.Nullable SuggestedMappingsForProjectsRequestBean projects) {
    this.projects = projects;
  }


  public SuggestedMappingsRequestBean schemeId(@javax.annotation.Nullable Long schemeId) {
    this.schemeId = schemeId;
    return this;
  }

  /**
   * The id of the priority scheme.
   * @return schemeId
   */
  @javax.annotation.Nullable
  public Long getSchemeId() {
    return schemeId;
  }

  public void setSchemeId(@javax.annotation.Nullable Long schemeId) {
    this.schemeId = schemeId;
  }


  public SuggestedMappingsRequestBean startAt(@javax.annotation.Nullable Long startAt) {
    this.startAt = startAt;
    return this;
  }

  /**
   * The index of the first item returned on the page.
   * @return startAt
   */
  @javax.annotation.Nullable
  public Long getStartAt() {
    return startAt;
  }

  public void setStartAt(@javax.annotation.Nullable Long startAt) {
    this.startAt = startAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuggestedMappingsRequestBean suggestedMappingsRequestBean = (SuggestedMappingsRequestBean) o;
    return Objects.equals(this.maxResults, suggestedMappingsRequestBean.maxResults) &&
        Objects.equals(this.priorities, suggestedMappingsRequestBean.priorities) &&
        Objects.equals(this.projects, suggestedMappingsRequestBean.projects) &&
        Objects.equals(this.schemeId, suggestedMappingsRequestBean.schemeId) &&
        Objects.equals(this.startAt, suggestedMappingsRequestBean.startAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxResults, priorities, projects, schemeId, startAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuggestedMappingsRequestBean {\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    priorities: ").append(toIndentedString(priorities)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    schemeId: ").append(toIndentedString(schemeId)).append("\n");
    sb.append("    startAt: ").append(toIndentedString(startAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxResults");
    openapiFields.add("priorities");
    openapiFields.add("projects");
    openapiFields.add("schemeId");
    openapiFields.add("startAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuggestedMappingsRequestBean
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuggestedMappingsRequestBean.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuggestedMappingsRequestBean is not found in the empty JSON string", SuggestedMappingsRequestBean.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuggestedMappingsRequestBean.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuggestedMappingsRequestBean` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `priorities`
      if (jsonObj.get("priorities") != null && !jsonObj.get("priorities").isJsonNull()) {
        SuggestedMappingsForPrioritiesRequestBean.validateJsonElement(jsonObj.get("priorities"));
      }
      // validate the optional field `projects`
      if (jsonObj.get("projects") != null && !jsonObj.get("projects").isJsonNull()) {
        SuggestedMappingsForProjectsRequestBean.validateJsonElement(jsonObj.get("projects"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuggestedMappingsRequestBean.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuggestedMappingsRequestBean' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuggestedMappingsRequestBean> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuggestedMappingsRequestBean.class));

       return (TypeAdapter<T>) new TypeAdapter<SuggestedMappingsRequestBean>() {
           @Override
           public void write(JsonWriter out, SuggestedMappingsRequestBean value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuggestedMappingsRequestBean read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuggestedMappingsRequestBean given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuggestedMappingsRequestBean
   * @throws IOException if the JSON string is invalid with respect to SuggestedMappingsRequestBean
   */
  public static SuggestedMappingsRequestBean fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuggestedMappingsRequestBean.class);
  }

  /**
   * Convert an instance of SuggestedMappingsRequestBean to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

