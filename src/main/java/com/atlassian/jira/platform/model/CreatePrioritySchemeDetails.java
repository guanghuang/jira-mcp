/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.PriorityMapping;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * Details of a new priority scheme
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class CreatePrioritySchemeDetails {
  public static final String SERIALIZED_NAME_DEFAULT_PRIORITY_ID = "defaultPriorityId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PRIORITY_ID)
  @javax.annotation.Nonnull
  private Long defaultPriorityId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_MAPPINGS = "mappings";
  @SerializedName(SERIALIZED_NAME_MAPPINGS)
  @javax.annotation.Nullable
  private PriorityMapping mappings;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PRIORITY_IDS = "priorityIds";
  @SerializedName(SERIALIZED_NAME_PRIORITY_IDS)
  @javax.annotation.Nonnull
  private List<Long> priorityIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROJECT_IDS = "projectIds";
  @SerializedName(SERIALIZED_NAME_PROJECT_IDS)
  @javax.annotation.Nullable
  private Set<Long> projectIds = new LinkedHashSet<>();

  public CreatePrioritySchemeDetails() {
  }

  public CreatePrioritySchemeDetails defaultPriorityId(@javax.annotation.Nonnull Long defaultPriorityId) {
    this.defaultPriorityId = defaultPriorityId;
    return this;
  }

  /**
   * The ID of the default priority for the priority scheme.
   * @return defaultPriorityId
   */
  @javax.annotation.Nonnull
  public Long getDefaultPriorityId() {
    return defaultPriorityId;
  }

  public void setDefaultPriorityId(@javax.annotation.Nonnull Long defaultPriorityId) {
    this.defaultPriorityId = defaultPriorityId;
  }


  public CreatePrioritySchemeDetails description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the priority scheme.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public CreatePrioritySchemeDetails mappings(@javax.annotation.Nullable PriorityMapping mappings) {
    this.mappings = mappings;
    return this;
  }

  /**
   * Instructions to migrate the priorities of issues.  &#x60;in&#x60; mappings are used to migrate the priorities of issues to priorities used within the priority scheme.  &#x60;out&#x60; mappings are used to migrate the priorities of issues to priorities not used within the priority scheme.   *  When **priorities** are **added** to the new priority scheme, no mapping needs to be provided as the new priorities are not used by any issues.  *  When **priorities** are **removed** from the new priority scheme, no mapping needs to be provided as the removed priorities are not used by any issues.  *  When **projects** are **added** to the priority scheme, the priorities of issues in those projects might need to be migrated to new priorities used by the priority scheme. This can occur when the current scheme does not use all the priorities in the project(s)&#39; priority scheme(s).           *  An &#x60;in&#x60; mapping must be provided for each of these priorities.  *  When **projects** are **removed** from the priority scheme, no mapping needs to be provided as the removed projects are not using the priorities of the new priority scheme.  For more information on &#x60;in&#x60; and &#x60;out&#x60; mappings, see the child properties documentation for the &#x60;PriorityMapping&#x60; object below.
   * @return mappings
   */
  @javax.annotation.Nullable
  public PriorityMapping getMappings() {
    return mappings;
  }

  public void setMappings(@javax.annotation.Nullable PriorityMapping mappings) {
    this.mappings = mappings;
  }


  public CreatePrioritySchemeDetails name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the priority scheme. Must be unique.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public CreatePrioritySchemeDetails priorityIds(@javax.annotation.Nonnull List<Long> priorityIds) {
    this.priorityIds = priorityIds;
    return this;
  }

  public CreatePrioritySchemeDetails addPriorityIdsItem(Long priorityIdsItem) {
    if (this.priorityIds == null) {
      this.priorityIds = new ArrayList<>();
    }
    this.priorityIds.add(priorityIdsItem);
    return this;
  }

  /**
   * The IDs of priorities in the scheme.
   * @return priorityIds
   */
  @javax.annotation.Nonnull
  public List<Long> getPriorityIds() {
    return priorityIds;
  }

  public void setPriorityIds(@javax.annotation.Nonnull List<Long> priorityIds) {
    this.priorityIds = priorityIds;
  }


  public CreatePrioritySchemeDetails projectIds(@javax.annotation.Nullable Set<Long> projectIds) {
    this.projectIds = projectIds;
    return this;
  }

  public CreatePrioritySchemeDetails addProjectIdsItem(Long projectIdsItem) {
    if (this.projectIds == null) {
      this.projectIds = new LinkedHashSet<>();
    }
    this.projectIds.add(projectIdsItem);
    return this;
  }

  /**
   * The IDs of projects that will use the priority scheme.
   * @return projectIds
   */
  @javax.annotation.Nullable
  public Set<Long> getProjectIds() {
    return projectIds;
  }

  public void setProjectIds(@javax.annotation.Nullable Set<Long> projectIds) {
    this.projectIds = projectIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePrioritySchemeDetails createPrioritySchemeDetails = (CreatePrioritySchemeDetails) o;
    return Objects.equals(this.defaultPriorityId, createPrioritySchemeDetails.defaultPriorityId) &&
        Objects.equals(this.description, createPrioritySchemeDetails.description) &&
        Objects.equals(this.mappings, createPrioritySchemeDetails.mappings) &&
        Objects.equals(this.name, createPrioritySchemeDetails.name) &&
        Objects.equals(this.priorityIds, createPrioritySchemeDetails.priorityIds) &&
        Objects.equals(this.projectIds, createPrioritySchemeDetails.projectIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultPriorityId, description, mappings, name, priorityIds, projectIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePrioritySchemeDetails {\n");
    sb.append("    defaultPriorityId: ").append(toIndentedString(defaultPriorityId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    mappings: ").append(toIndentedString(mappings)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    priorityIds: ").append(toIndentedString(priorityIds)).append("\n");
    sb.append("    projectIds: ").append(toIndentedString(projectIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultPriorityId");
    openapiFields.add("description");
    openapiFields.add("mappings");
    openapiFields.add("name");
    openapiFields.add("priorityIds");
    openapiFields.add("projectIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("defaultPriorityId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("priorityIds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreatePrioritySchemeDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreatePrioritySchemeDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreatePrioritySchemeDetails is not found in the empty JSON string", CreatePrioritySchemeDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreatePrioritySchemeDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreatePrioritySchemeDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreatePrioritySchemeDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `mappings`
      if (jsonObj.get("mappings") != null && !jsonObj.get("mappings").isJsonNull()) {
        PriorityMapping.validateJsonElement(jsonObj.get("mappings"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("priorityIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("priorityIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `priorityIds` to be an array in the JSON string but got `%s`", jsonObj.get("priorityIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("projectIds") != null && !jsonObj.get("projectIds").isJsonNull() && !jsonObj.get("projectIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectIds` to be an array in the JSON string but got `%s`", jsonObj.get("projectIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreatePrioritySchemeDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreatePrioritySchemeDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreatePrioritySchemeDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreatePrioritySchemeDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<CreatePrioritySchemeDetails>() {
           @Override
           public void write(JsonWriter out, CreatePrioritySchemeDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreatePrioritySchemeDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreatePrioritySchemeDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreatePrioritySchemeDetails
   * @throws IOException if the JSON string is invalid with respect to CreatePrioritySchemeDetails
   */
  public static CreatePrioritySchemeDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatePrioritySchemeDetails.class);
  }

  /**
   * Convert an instance of CreatePrioritySchemeDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

