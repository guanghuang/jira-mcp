/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * SearchAndReconcileRequestBean
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class SearchAndReconcileRequestBean {
  public static final String SERIALIZED_NAME_EXPAND = "expand";
  @SerializedName(SERIALIZED_NAME_EXPAND)
  @javax.annotation.Nullable
  private String expand;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  @javax.annotation.Nullable
  private List<String> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIELDS_BY_KEYS = "fieldsByKeys";
  @SerializedName(SERIALIZED_NAME_FIELDS_BY_KEYS)
  @javax.annotation.Nullable
  private Boolean fieldsByKeys;

  public static final String SERIALIZED_NAME_JQL = "jql";
  @SerializedName(SERIALIZED_NAME_JQL)
  @javax.annotation.Nullable
  private String jql;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  @javax.annotation.Nullable
  private Integer maxResults = 50;

  public static final String SERIALIZED_NAME_NEXT_PAGE_TOKEN = "nextPageToken";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_TOKEN)
  @javax.annotation.Nullable
  private String nextPageToken;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  @javax.annotation.Nullable
  private List<String> properties = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECONCILE_ISSUES = "reconcileIssues";
  @SerializedName(SERIALIZED_NAME_RECONCILE_ISSUES)
  @javax.annotation.Nullable
  private List<Long> reconcileIssues = new ArrayList<>();

  public SearchAndReconcileRequestBean() {
  }

  public SearchAndReconcileRequestBean expand(@javax.annotation.Nullable String expand) {
    this.expand = expand;
    return this;
  }

  /**
   * Use [expand](#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where &#x60;expand&#x60; is specified, &#x60;expand&#x60; is defined as a comma-delimited string of values. The expand options are:   *  &#x60;renderedFields&#x60; Returns field values rendered in HTML format.  *  &#x60;names&#x60; Returns the display name of each field.  *  &#x60;schema&#x60; Returns the schema describing a field type.  *  &#x60;transitions&#x60; Returns all possible transitions for the issue.  *  &#x60;operations&#x60; Returns all possible operations for the issue.  *  &#x60;editmeta&#x60; Returns information about how each field can be edited.  *  &#x60;changelog&#x60; Returns a list of recent updates to an issue, sorted by date, starting from the most recent.  *  &#x60;versionedRepresentations&#x60; Instead of &#x60;fields&#x60;, returns &#x60;versionedRepresentations&#x60; a JSON array containing each version of a field&#39;s value, with the highest numbered item representing the most recent version.  Examples: &#x60;\&quot;names,changelog\&quot;&#x60; Returns the display name of each field as well as a list of recent updates to an issue.
   * @return expand
   */
  @javax.annotation.Nullable
  public String getExpand() {
    return expand;
  }

  public void setExpand(@javax.annotation.Nullable String expand) {
    this.expand = expand;
  }


  public SearchAndReconcileRequestBean fields(@javax.annotation.Nullable List<String> fields) {
    this.fields = fields;
    return this;
  }

  public SearchAndReconcileRequestBean addFieldsItem(String fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * A list of fields to return for each issue. Use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;*all&#x60; Returns all fields.  *  &#x60;*navigable&#x60; Returns navigable fields.  *  &#x60;id&#x60; Returns only issue IDs.  *  Any issue field, prefixed with a dash to exclude.  The default is &#x60;id&#x60;.  Examples:   *  &#x60;summary,comment&#x60; Returns the summary and comments fields only.  *  &#x60;*all,-comment&#x60; Returns all fields except comments.  Multiple &#x60;fields&#x60; parameters can be included in a request.  Note: By default, this resource returns IDs only. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.
   * @return fields
   */
  @javax.annotation.Nullable
  public List<String> getFields() {
    return fields;
  }

  public void setFields(@javax.annotation.Nullable List<String> fields) {
    this.fields = fields;
  }


  public SearchAndReconcileRequestBean fieldsByKeys(@javax.annotation.Nullable Boolean fieldsByKeys) {
    this.fieldsByKeys = fieldsByKeys;
    return this;
  }

  /**
   * Reference fields by their key (rather than ID). The default is &#x60;false&#x60;.
   * @return fieldsByKeys
   */
  @javax.annotation.Nullable
  public Boolean getFieldsByKeys() {
    return fieldsByKeys;
  }

  public void setFieldsByKeys(@javax.annotation.Nullable Boolean fieldsByKeys) {
    this.fieldsByKeys = fieldsByKeys;
  }


  public SearchAndReconcileRequestBean jql(@javax.annotation.Nullable String jql) {
    this.jql = jql;
    return this;
  }

  /**
   * A [JQL](https://confluence.atlassian.com/x/egORLQ) expression. For performance reasons, this parameter requires a bounded query. A bounded query is a query with a search restriction.   *  Example of an unbounded query: &#x60;order by key desc&#x60;.  *  Example of a bounded query: &#x60;assignee &#x3D; currentUser() order by key&#x60;.  Additionally, &#x60;orderBy&#x60; clause can contain a maximum of 7 fields.
   * @return jql
   */
  @javax.annotation.Nullable
  public String getJql() {
    return jql;
  }

  public void setJql(@javax.annotation.Nullable String jql) {
    this.jql = jql;
  }


  public SearchAndReconcileRequestBean maxResults(@javax.annotation.Nullable Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of items to return per page. To manage page size, API may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting &#x60;id&#x60; or &#x60;key&#x60; only. It returns max 5000 issues.
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(@javax.annotation.Nullable Integer maxResults) {
    this.maxResults = maxResults;
  }


  public SearchAndReconcileRequestBean nextPageToken(@javax.annotation.Nullable String nextPageToken) {
    this.nextPageToken = nextPageToken;
    return this;
  }

  /**
   * The token for a page to fetch that is not the first page. The first page has a &#x60;nextPageToken&#x60; of &#x60;null&#x60;. Use the &#x60;nextPageToken&#x60; to fetch the next page of issues.
   * @return nextPageToken
   */
  @javax.annotation.Nullable
  public String getNextPageToken() {
    return nextPageToken;
  }

  public void setNextPageToken(@javax.annotation.Nullable String nextPageToken) {
    this.nextPageToken = nextPageToken;
  }


  public SearchAndReconcileRequestBean properties(@javax.annotation.Nullable List<String> properties) {
    this.properties = properties;
    return this;
  }

  public SearchAndReconcileRequestBean addPropertiesItem(String propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

  /**
   * A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list.
   * @return properties
   */
  @javax.annotation.Nullable
  public List<String> getProperties() {
    return properties;
  }

  public void setProperties(@javax.annotation.Nullable List<String> properties) {
    this.properties = properties;
  }


  public SearchAndReconcileRequestBean reconcileIssues(@javax.annotation.Nullable List<Long> reconcileIssues) {
    this.reconcileIssues = reconcileIssues;
    return this;
  }

  public SearchAndReconcileRequestBean addReconcileIssuesItem(Long reconcileIssuesItem) {
    if (this.reconcileIssues == null) {
      this.reconcileIssues = new ArrayList<>();
    }
    this.reconcileIssues.add(reconcileIssuesItem);
    return this;
  }

  /**
   * Strong consistency issue ids to be reconciled with search results. Accepts max 50 ids
   * @return reconcileIssues
   */
  @javax.annotation.Nullable
  public List<Long> getReconcileIssues() {
    return reconcileIssues;
  }

  public void setReconcileIssues(@javax.annotation.Nullable List<Long> reconcileIssues) {
    this.reconcileIssues = reconcileIssues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchAndReconcileRequestBean searchAndReconcileRequestBean = (SearchAndReconcileRequestBean) o;
    return Objects.equals(this.expand, searchAndReconcileRequestBean.expand) &&
        Objects.equals(this.fields, searchAndReconcileRequestBean.fields) &&
        Objects.equals(this.fieldsByKeys, searchAndReconcileRequestBean.fieldsByKeys) &&
        Objects.equals(this.jql, searchAndReconcileRequestBean.jql) &&
        Objects.equals(this.maxResults, searchAndReconcileRequestBean.maxResults) &&
        Objects.equals(this.nextPageToken, searchAndReconcileRequestBean.nextPageToken) &&
        Objects.equals(this.properties, searchAndReconcileRequestBean.properties) &&
        Objects.equals(this.reconcileIssues, searchAndReconcileRequestBean.reconcileIssues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expand, fields, fieldsByKeys, jql, maxResults, nextPageToken, properties, reconcileIssues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchAndReconcileRequestBean {\n");
    sb.append("    expand: ").append(toIndentedString(expand)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    fieldsByKeys: ").append(toIndentedString(fieldsByKeys)).append("\n");
    sb.append("    jql: ").append(toIndentedString(jql)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    reconcileIssues: ").append(toIndentedString(reconcileIssues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expand");
    openapiFields.add("fields");
    openapiFields.add("fieldsByKeys");
    openapiFields.add("jql");
    openapiFields.add("maxResults");
    openapiFields.add("nextPageToken");
    openapiFields.add("properties");
    openapiFields.add("reconcileIssues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchAndReconcileRequestBean
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchAndReconcileRequestBean.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchAndReconcileRequestBean is not found in the empty JSON string", SearchAndReconcileRequestBean.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchAndReconcileRequestBean.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchAndReconcileRequestBean` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expand") != null && !jsonObj.get("expand").isJsonNull()) && !jsonObj.get("expand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expand").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull() && !jsonObj.get("fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }
      if ((jsonObj.get("jql") != null && !jsonObj.get("jql").isJsonNull()) && !jsonObj.get("jql").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jql` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jql").toString()));
      }
      if ((jsonObj.get("nextPageToken") != null && !jsonObj.get("nextPageToken").isJsonNull()) && !jsonObj.get("nextPageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPageToken").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull() && !jsonObj.get("properties").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reconcileIssues") != null && !jsonObj.get("reconcileIssues").isJsonNull() && !jsonObj.get("reconcileIssues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reconcileIssues` to be an array in the JSON string but got `%s`", jsonObj.get("reconcileIssues").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchAndReconcileRequestBean.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchAndReconcileRequestBean' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchAndReconcileRequestBean> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchAndReconcileRequestBean.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchAndReconcileRequestBean>() {
           @Override
           public void write(JsonWriter out, SearchAndReconcileRequestBean value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchAndReconcileRequestBean read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchAndReconcileRequestBean given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchAndReconcileRequestBean
   * @throws IOException if the JSON string is invalid with respect to SearchAndReconcileRequestBean
   */
  public static SearchAndReconcileRequestBean fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchAndReconcileRequestBean.class);
  }

  /**
   * Convert an instance of SearchAndReconcileRequestBean to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

