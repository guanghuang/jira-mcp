/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * GetExclusionRulesResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class GetExclusionRulesResponse {
  public static final String SERIALIZED_NAME_ISSUE_IDS = "issueIds";
  @SerializedName(SERIALIZED_NAME_ISSUE_IDS)
  @javax.annotation.Nullable
  private Set<Long> issueIds = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_ISSUE_TYPE_IDS = "issueTypeIds";
  @SerializedName(SERIALIZED_NAME_ISSUE_TYPE_IDS)
  @javax.annotation.Nullable
  private Set<Long> issueTypeIds = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_NUMBER_OF_DAYS_TO_SHOW_COMPLETED_ISSUES = "numberOfDaysToShowCompletedIssues";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_DAYS_TO_SHOW_COMPLETED_ISSUES)
  @javax.annotation.Nonnull
  private Integer numberOfDaysToShowCompletedIssues;

  public static final String SERIALIZED_NAME_RELEASE_IDS = "releaseIds";
  @SerializedName(SERIALIZED_NAME_RELEASE_IDS)
  @javax.annotation.Nullable
  private Set<Long> releaseIds = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_WORK_STATUS_CATEGORY_IDS = "workStatusCategoryIds";
  @SerializedName(SERIALIZED_NAME_WORK_STATUS_CATEGORY_IDS)
  @javax.annotation.Nullable
  private Set<Long> workStatusCategoryIds = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_WORK_STATUS_IDS = "workStatusIds";
  @SerializedName(SERIALIZED_NAME_WORK_STATUS_IDS)
  @javax.annotation.Nullable
  private Set<Long> workStatusIds = new LinkedHashSet<>();

  public GetExclusionRulesResponse() {
  }

  public GetExclusionRulesResponse issueIds(@javax.annotation.Nullable Set<Long> issueIds) {
    this.issueIds = issueIds;
    return this;
  }

  public GetExclusionRulesResponse addIssueIdsItem(Long issueIdsItem) {
    if (this.issueIds == null) {
      this.issueIds = new LinkedHashSet<>();
    }
    this.issueIds.add(issueIdsItem);
    return this;
  }

  /**
   * The IDs of the issues excluded from the plan.
   * @return issueIds
   */
  @javax.annotation.Nullable
  public Set<Long> getIssueIds() {
    return issueIds;
  }

  public void setIssueIds(@javax.annotation.Nullable Set<Long> issueIds) {
    this.issueIds = issueIds;
  }


  public GetExclusionRulesResponse issueTypeIds(@javax.annotation.Nullable Set<Long> issueTypeIds) {
    this.issueTypeIds = issueTypeIds;
    return this;
  }

  public GetExclusionRulesResponse addIssueTypeIdsItem(Long issueTypeIdsItem) {
    if (this.issueTypeIds == null) {
      this.issueTypeIds = new LinkedHashSet<>();
    }
    this.issueTypeIds.add(issueTypeIdsItem);
    return this;
  }

  /**
   * The IDs of the issue types excluded from the plan.
   * @return issueTypeIds
   */
  @javax.annotation.Nullable
  public Set<Long> getIssueTypeIds() {
    return issueTypeIds;
  }

  public void setIssueTypeIds(@javax.annotation.Nullable Set<Long> issueTypeIds) {
    this.issueTypeIds = issueTypeIds;
  }


  public GetExclusionRulesResponse numberOfDaysToShowCompletedIssues(@javax.annotation.Nonnull Integer numberOfDaysToShowCompletedIssues) {
    this.numberOfDaysToShowCompletedIssues = numberOfDaysToShowCompletedIssues;
    return this;
  }

  /**
   * Issues completed this number of days ago are excluded from the plan.
   * @return numberOfDaysToShowCompletedIssues
   */
  @javax.annotation.Nonnull
  public Integer getNumberOfDaysToShowCompletedIssues() {
    return numberOfDaysToShowCompletedIssues;
  }

  public void setNumberOfDaysToShowCompletedIssues(@javax.annotation.Nonnull Integer numberOfDaysToShowCompletedIssues) {
    this.numberOfDaysToShowCompletedIssues = numberOfDaysToShowCompletedIssues;
  }


  public GetExclusionRulesResponse releaseIds(@javax.annotation.Nullable Set<Long> releaseIds) {
    this.releaseIds = releaseIds;
    return this;
  }

  public GetExclusionRulesResponse addReleaseIdsItem(Long releaseIdsItem) {
    if (this.releaseIds == null) {
      this.releaseIds = new LinkedHashSet<>();
    }
    this.releaseIds.add(releaseIdsItem);
    return this;
  }

  /**
   * The IDs of the releases excluded from the plan.
   * @return releaseIds
   */
  @javax.annotation.Nullable
  public Set<Long> getReleaseIds() {
    return releaseIds;
  }

  public void setReleaseIds(@javax.annotation.Nullable Set<Long> releaseIds) {
    this.releaseIds = releaseIds;
  }


  public GetExclusionRulesResponse workStatusCategoryIds(@javax.annotation.Nullable Set<Long> workStatusCategoryIds) {
    this.workStatusCategoryIds = workStatusCategoryIds;
    return this;
  }

  public GetExclusionRulesResponse addWorkStatusCategoryIdsItem(Long workStatusCategoryIdsItem) {
    if (this.workStatusCategoryIds == null) {
      this.workStatusCategoryIds = new LinkedHashSet<>();
    }
    this.workStatusCategoryIds.add(workStatusCategoryIdsItem);
    return this;
  }

  /**
   * The IDs of the work status categories excluded from the plan.
   * @return workStatusCategoryIds
   */
  @javax.annotation.Nullable
  public Set<Long> getWorkStatusCategoryIds() {
    return workStatusCategoryIds;
  }

  public void setWorkStatusCategoryIds(@javax.annotation.Nullable Set<Long> workStatusCategoryIds) {
    this.workStatusCategoryIds = workStatusCategoryIds;
  }


  public GetExclusionRulesResponse workStatusIds(@javax.annotation.Nullable Set<Long> workStatusIds) {
    this.workStatusIds = workStatusIds;
    return this;
  }

  public GetExclusionRulesResponse addWorkStatusIdsItem(Long workStatusIdsItem) {
    if (this.workStatusIds == null) {
      this.workStatusIds = new LinkedHashSet<>();
    }
    this.workStatusIds.add(workStatusIdsItem);
    return this;
  }

  /**
   * The IDs of the work statuses excluded from the plan.
   * @return workStatusIds
   */
  @javax.annotation.Nullable
  public Set<Long> getWorkStatusIds() {
    return workStatusIds;
  }

  public void setWorkStatusIds(@javax.annotation.Nullable Set<Long> workStatusIds) {
    this.workStatusIds = workStatusIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetExclusionRulesResponse getExclusionRulesResponse = (GetExclusionRulesResponse) o;
    return Objects.equals(this.issueIds, getExclusionRulesResponse.issueIds) &&
        Objects.equals(this.issueTypeIds, getExclusionRulesResponse.issueTypeIds) &&
        Objects.equals(this.numberOfDaysToShowCompletedIssues, getExclusionRulesResponse.numberOfDaysToShowCompletedIssues) &&
        Objects.equals(this.releaseIds, getExclusionRulesResponse.releaseIds) &&
        Objects.equals(this.workStatusCategoryIds, getExclusionRulesResponse.workStatusCategoryIds) &&
        Objects.equals(this.workStatusIds, getExclusionRulesResponse.workStatusIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issueIds, issueTypeIds, numberOfDaysToShowCompletedIssues, releaseIds, workStatusCategoryIds, workStatusIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetExclusionRulesResponse {\n");
    sb.append("    issueIds: ").append(toIndentedString(issueIds)).append("\n");
    sb.append("    issueTypeIds: ").append(toIndentedString(issueTypeIds)).append("\n");
    sb.append("    numberOfDaysToShowCompletedIssues: ").append(toIndentedString(numberOfDaysToShowCompletedIssues)).append("\n");
    sb.append("    releaseIds: ").append(toIndentedString(releaseIds)).append("\n");
    sb.append("    workStatusCategoryIds: ").append(toIndentedString(workStatusCategoryIds)).append("\n");
    sb.append("    workStatusIds: ").append(toIndentedString(workStatusIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("issueIds");
    openapiFields.add("issueTypeIds");
    openapiFields.add("numberOfDaysToShowCompletedIssues");
    openapiFields.add("releaseIds");
    openapiFields.add("workStatusCategoryIds");
    openapiFields.add("workStatusIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("numberOfDaysToShowCompletedIssues");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetExclusionRulesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetExclusionRulesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetExclusionRulesResponse is not found in the empty JSON string", GetExclusionRulesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetExclusionRulesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetExclusionRulesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetExclusionRulesResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("issueIds") != null && !jsonObj.get("issueIds").isJsonNull() && !jsonObj.get("issueIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueIds` to be an array in the JSON string but got `%s`", jsonObj.get("issueIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("issueTypeIds") != null && !jsonObj.get("issueTypeIds").isJsonNull() && !jsonObj.get("issueTypeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueTypeIds` to be an array in the JSON string but got `%s`", jsonObj.get("issueTypeIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("releaseIds") != null && !jsonObj.get("releaseIds").isJsonNull() && !jsonObj.get("releaseIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `releaseIds` to be an array in the JSON string but got `%s`", jsonObj.get("releaseIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("workStatusCategoryIds") != null && !jsonObj.get("workStatusCategoryIds").isJsonNull() && !jsonObj.get("workStatusCategoryIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `workStatusCategoryIds` to be an array in the JSON string but got `%s`", jsonObj.get("workStatusCategoryIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("workStatusIds") != null && !jsonObj.get("workStatusIds").isJsonNull() && !jsonObj.get("workStatusIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `workStatusIds` to be an array in the JSON string but got `%s`", jsonObj.get("workStatusIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetExclusionRulesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetExclusionRulesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetExclusionRulesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetExclusionRulesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetExclusionRulesResponse>() {
           @Override
           public void write(JsonWriter out, GetExclusionRulesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetExclusionRulesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetExclusionRulesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetExclusionRulesResponse
   * @throws IOException if the JSON string is invalid with respect to GetExclusionRulesResponse
   */
  public static GetExclusionRulesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetExclusionRulesResponse.class);
  }

  /**
   * Convert an instance of GetExclusionRulesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

