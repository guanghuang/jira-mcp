/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.JiraExpressionsComplexityValueBean;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * JiraExpressionsComplexityBean
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class JiraExpressionsComplexityBean {
  public static final String SERIALIZED_NAME_BEANS = "beans";
  @SerializedName(SERIALIZED_NAME_BEANS)
  @javax.annotation.Nonnull
  private JiraExpressionsComplexityValueBean beans;

  public static final String SERIALIZED_NAME_EXPENSIVE_OPERATIONS = "expensiveOperations";
  @SerializedName(SERIALIZED_NAME_EXPENSIVE_OPERATIONS)
  @javax.annotation.Nonnull
  private JiraExpressionsComplexityValueBean expensiveOperations;

  public static final String SERIALIZED_NAME_PRIMITIVE_VALUES = "primitiveValues";
  @SerializedName(SERIALIZED_NAME_PRIMITIVE_VALUES)
  @javax.annotation.Nonnull
  private JiraExpressionsComplexityValueBean primitiveValues;

  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  @javax.annotation.Nonnull
  private JiraExpressionsComplexityValueBean steps;

  public JiraExpressionsComplexityBean() {
  }

  public JiraExpressionsComplexityBean beans(@javax.annotation.Nonnull JiraExpressionsComplexityValueBean beans) {
    this.beans = beans;
    return this;
  }

  /**
   * The number of Jira REST API beans returned in the response.
   * @return beans
   */
  @javax.annotation.Nonnull
  public JiraExpressionsComplexityValueBean getBeans() {
    return beans;
  }

  public void setBeans(@javax.annotation.Nonnull JiraExpressionsComplexityValueBean beans) {
    this.beans = beans;
  }


  public JiraExpressionsComplexityBean expensiveOperations(@javax.annotation.Nonnull JiraExpressionsComplexityValueBean expensiveOperations) {
    this.expensiveOperations = expensiveOperations;
    return this;
  }

  /**
   * The number of expensive operations executed while evaluating the expression. Expensive operations are those that load additional data, such as entity properties, comments, or custom fields.
   * @return expensiveOperations
   */
  @javax.annotation.Nonnull
  public JiraExpressionsComplexityValueBean getExpensiveOperations() {
    return expensiveOperations;
  }

  public void setExpensiveOperations(@javax.annotation.Nonnull JiraExpressionsComplexityValueBean expensiveOperations) {
    this.expensiveOperations = expensiveOperations;
  }


  public JiraExpressionsComplexityBean primitiveValues(@javax.annotation.Nonnull JiraExpressionsComplexityValueBean primitiveValues) {
    this.primitiveValues = primitiveValues;
    return this;
  }

  /**
   * The number of primitive values returned in the response.
   * @return primitiveValues
   */
  @javax.annotation.Nonnull
  public JiraExpressionsComplexityValueBean getPrimitiveValues() {
    return primitiveValues;
  }

  public void setPrimitiveValues(@javax.annotation.Nonnull JiraExpressionsComplexityValueBean primitiveValues) {
    this.primitiveValues = primitiveValues;
  }


  public JiraExpressionsComplexityBean steps(@javax.annotation.Nonnull JiraExpressionsComplexityValueBean steps) {
    this.steps = steps;
    return this;
  }

  /**
   * The number of steps it took to evaluate the expression, where a step is a high-level operation performed by the expression. A step is an operation such as arithmetic, accessing a property, accessing a context variable, or calling a function.
   * @return steps
   */
  @javax.annotation.Nonnull
  public JiraExpressionsComplexityValueBean getSteps() {
    return steps;
  }

  public void setSteps(@javax.annotation.Nonnull JiraExpressionsComplexityValueBean steps) {
    this.steps = steps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JiraExpressionsComplexityBean jiraExpressionsComplexityBean = (JiraExpressionsComplexityBean) o;
    return Objects.equals(this.beans, jiraExpressionsComplexityBean.beans) &&
        Objects.equals(this.expensiveOperations, jiraExpressionsComplexityBean.expensiveOperations) &&
        Objects.equals(this.primitiveValues, jiraExpressionsComplexityBean.primitiveValues) &&
        Objects.equals(this.steps, jiraExpressionsComplexityBean.steps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beans, expensiveOperations, primitiveValues, steps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JiraExpressionsComplexityBean {\n");
    sb.append("    beans: ").append(toIndentedString(beans)).append("\n");
    sb.append("    expensiveOperations: ").append(toIndentedString(expensiveOperations)).append("\n");
    sb.append("    primitiveValues: ").append(toIndentedString(primitiveValues)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("beans");
    openapiFields.add("expensiveOperations");
    openapiFields.add("primitiveValues");
    openapiFields.add("steps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("beans");
    openapiRequiredFields.add("expensiveOperations");
    openapiRequiredFields.add("primitiveValues");
    openapiRequiredFields.add("steps");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JiraExpressionsComplexityBean
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JiraExpressionsComplexityBean.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JiraExpressionsComplexityBean is not found in the empty JSON string", JiraExpressionsComplexityBean.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JiraExpressionsComplexityBean.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JiraExpressionsComplexityBean` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JiraExpressionsComplexityBean.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `beans`
      JiraExpressionsComplexityValueBean.validateJsonElement(jsonObj.get("beans"));
      // validate the required field `expensiveOperations`
      JiraExpressionsComplexityValueBean.validateJsonElement(jsonObj.get("expensiveOperations"));
      // validate the required field `primitiveValues`
      JiraExpressionsComplexityValueBean.validateJsonElement(jsonObj.get("primitiveValues"));
      // validate the required field `steps`
      JiraExpressionsComplexityValueBean.validateJsonElement(jsonObj.get("steps"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JiraExpressionsComplexityBean.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JiraExpressionsComplexityBean' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JiraExpressionsComplexityBean> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JiraExpressionsComplexityBean.class));

       return (TypeAdapter<T>) new TypeAdapter<JiraExpressionsComplexityBean>() {
           @Override
           public void write(JsonWriter out, JiraExpressionsComplexityBean value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JiraExpressionsComplexityBean read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JiraExpressionsComplexityBean given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JiraExpressionsComplexityBean
   * @throws IOException if the JSON string is invalid with respect to JiraExpressionsComplexityBean
   */
  public static JiraExpressionsComplexityBean fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JiraExpressionsComplexityBean.class);
  }

  /**
   * Convert an instance of JiraExpressionsComplexityBean to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

