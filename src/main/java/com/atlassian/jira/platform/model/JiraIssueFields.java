/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.JiraCascadingSelectField;
import com.atlassian.jira.platform.model.JiraColorField;
import com.atlassian.jira.platform.model.JiraDateField;
import com.atlassian.jira.platform.model.JiraDateTimeField;
import com.atlassian.jira.platform.model.JiraDurationField;
import com.atlassian.jira.platform.model.JiraIssueTypeField;
import com.atlassian.jira.platform.model.JiraLabelsField;
import com.atlassian.jira.platform.model.JiraMultiSelectComponentField;
import com.atlassian.jira.platform.model.JiraMultipleGroupPickerField;
import com.atlassian.jira.platform.model.JiraMultipleSelectField;
import com.atlassian.jira.platform.model.JiraMultipleSelectUserPickerField;
import com.atlassian.jira.platform.model.JiraMultipleVersionPickerField;
import com.atlassian.jira.platform.model.JiraNumberField;
import com.atlassian.jira.platform.model.JiraPriorityField;
import com.atlassian.jira.platform.model.JiraRichTextField;
import com.atlassian.jira.platform.model.JiraSingleGroupPickerField;
import com.atlassian.jira.platform.model.JiraSingleLineTextField;
import com.atlassian.jira.platform.model.JiraSingleSelectField;
import com.atlassian.jira.platform.model.JiraSingleSelectUserPickerField;
import com.atlassian.jira.platform.model.JiraSingleVersionPickerField;
import com.atlassian.jira.platform.model.JiraTimeTrackingField;
import com.atlassian.jira.platform.model.JiraUrlField;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * JiraIssueFields
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class JiraIssueFields {
  public static final String SERIALIZED_NAME_CASCADING_SELECT_FIELDS = "cascadingSelectFields";
  @SerializedName(SERIALIZED_NAME_CASCADING_SELECT_FIELDS)
  @javax.annotation.Nullable
  private List<JiraCascadingSelectField> cascadingSelectFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLEARABLE_NUMBER_FIELDS = "clearableNumberFields";
  @SerializedName(SERIALIZED_NAME_CLEARABLE_NUMBER_FIELDS)
  @javax.annotation.Nullable
  private List<JiraNumberField> clearableNumberFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLOR_FIELDS = "colorFields";
  @SerializedName(SERIALIZED_NAME_COLOR_FIELDS)
  @javax.annotation.Nullable
  private List<JiraColorField> colorFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_PICKER_FIELDS = "datePickerFields";
  @SerializedName(SERIALIZED_NAME_DATE_PICKER_FIELDS)
  @javax.annotation.Nullable
  private List<JiraDateField> datePickerFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_TIME_PICKER_FIELDS = "dateTimePickerFields";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_PICKER_FIELDS)
  @javax.annotation.Nullable
  private List<JiraDateTimeField> dateTimePickerFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_ISSUE_TYPE = "issueType";
  @SerializedName(SERIALIZED_NAME_ISSUE_TYPE)
  @javax.annotation.Nullable
  private JiraIssueTypeField issueType;

  public static final String SERIALIZED_NAME_LABELS_FIELDS = "labelsFields";
  @SerializedName(SERIALIZED_NAME_LABELS_FIELDS)
  @javax.annotation.Nullable
  private List<JiraLabelsField> labelsFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_MULTIPLE_GROUP_PICKER_FIELDS = "multipleGroupPickerFields";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_GROUP_PICKER_FIELDS)
  @javax.annotation.Nullable
  private List<JiraMultipleGroupPickerField> multipleGroupPickerFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_MULTIPLE_SELECT_CLEARABLE_USER_PICKER_FIELDS = "multipleSelectClearableUserPickerFields";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_SELECT_CLEARABLE_USER_PICKER_FIELDS)
  @javax.annotation.Nullable
  private List<JiraMultipleSelectUserPickerField> multipleSelectClearableUserPickerFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_MULTIPLE_SELECT_FIELDS = "multipleSelectFields";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_SELECT_FIELDS)
  @javax.annotation.Nullable
  private List<JiraMultipleSelectField> multipleSelectFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_MULTIPLE_VERSION_PICKER_FIELDS = "multipleVersionPickerFields";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_VERSION_PICKER_FIELDS)
  @javax.annotation.Nullable
  private List<JiraMultipleVersionPickerField> multipleVersionPickerFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_MULTISELECT_COMPONENTS = "multiselectComponents";
  @SerializedName(SERIALIZED_NAME_MULTISELECT_COMPONENTS)
  @javax.annotation.Nullable
  private JiraMultiSelectComponentField multiselectComponents;

  public static final String SERIALIZED_NAME_ORIGINAL_ESTIMATE_FIELD = "originalEstimateField";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_ESTIMATE_FIELD)
  @javax.annotation.Nullable
  private JiraDurationField originalEstimateField;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  @javax.annotation.Nullable
  private JiraPriorityField priority;

  public static final String SERIALIZED_NAME_RICH_TEXT_FIELDS = "richTextFields";
  @SerializedName(SERIALIZED_NAME_RICH_TEXT_FIELDS)
  @javax.annotation.Nullable
  private List<JiraRichTextField> richTextFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_SINGLE_GROUP_PICKER_FIELDS = "singleGroupPickerFields";
  @SerializedName(SERIALIZED_NAME_SINGLE_GROUP_PICKER_FIELDS)
  @javax.annotation.Nullable
  private List<JiraSingleGroupPickerField> singleGroupPickerFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_SINGLE_LINE_TEXT_FIELDS = "singleLineTextFields";
  @SerializedName(SERIALIZED_NAME_SINGLE_LINE_TEXT_FIELDS)
  @javax.annotation.Nullable
  private List<JiraSingleLineTextField> singleLineTextFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_SINGLE_SELECT_CLEARABLE_USER_PICKER_FIELDS = "singleSelectClearableUserPickerFields";
  @SerializedName(SERIALIZED_NAME_SINGLE_SELECT_CLEARABLE_USER_PICKER_FIELDS)
  @javax.annotation.Nullable
  private List<JiraSingleSelectUserPickerField> singleSelectClearableUserPickerFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_SINGLE_SELECT_FIELDS = "singleSelectFields";
  @SerializedName(SERIALIZED_NAME_SINGLE_SELECT_FIELDS)
  @javax.annotation.Nullable
  private List<JiraSingleSelectField> singleSelectFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_SINGLE_VERSION_PICKER_FIELDS = "singleVersionPickerFields";
  @SerializedName(SERIALIZED_NAME_SINGLE_VERSION_PICKER_FIELDS)
  @javax.annotation.Nullable
  private List<JiraSingleVersionPickerField> singleVersionPickerFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_TRACKING_FIELD = "timeTrackingField";
  @SerializedName(SERIALIZED_NAME_TIME_TRACKING_FIELD)
  @javax.annotation.Nullable
  private JiraTimeTrackingField timeTrackingField;

  public static final String SERIALIZED_NAME_URL_FIELDS = "urlFields";
  @SerializedName(SERIALIZED_NAME_URL_FIELDS)
  @javax.annotation.Nullable
  private List<JiraUrlField> urlFields = new ArrayList<>();

  public JiraIssueFields() {
  }

  public JiraIssueFields cascadingSelectFields(@javax.annotation.Nullable List<JiraCascadingSelectField> cascadingSelectFields) {
    this.cascadingSelectFields = cascadingSelectFields;
    return this;
  }

  public JiraIssueFields addCascadingSelectFieldsItem(JiraCascadingSelectField cascadingSelectFieldsItem) {
    if (this.cascadingSelectFields == null) {
      this.cascadingSelectFields = new ArrayList<>();
    }
    this.cascadingSelectFields.add(cascadingSelectFieldsItem);
    return this;
  }

  /**
   * Add or clear a cascading select field:   *  To add, specify &#x60;optionId&#x60; for both parent and child.  *  To clear the child, set its &#x60;optionId&#x60; to null.  *  To clear both, set the parent&#39;s &#x60;optionId&#x60; to null.
   * @return cascadingSelectFields
   */
  @javax.annotation.Nullable
  public List<JiraCascadingSelectField> getCascadingSelectFields() {
    return cascadingSelectFields;
  }

  public void setCascadingSelectFields(@javax.annotation.Nullable List<JiraCascadingSelectField> cascadingSelectFields) {
    this.cascadingSelectFields = cascadingSelectFields;
  }


  public JiraIssueFields clearableNumberFields(@javax.annotation.Nullable List<JiraNumberField> clearableNumberFields) {
    this.clearableNumberFields = clearableNumberFields;
    return this;
  }

  public JiraIssueFields addClearableNumberFieldsItem(JiraNumberField clearableNumberFieldsItem) {
    if (this.clearableNumberFields == null) {
      this.clearableNumberFields = new ArrayList<>();
    }
    this.clearableNumberFields.add(clearableNumberFieldsItem);
    return this;
  }

  /**
   * Add or clear a number field:   *  To add, specify a numeric &#x60;value&#x60;.  *  To clear, set &#x60;value&#x60; to &#x60;null&#x60;.
   * @return clearableNumberFields
   */
  @javax.annotation.Nullable
  public List<JiraNumberField> getClearableNumberFields() {
    return clearableNumberFields;
  }

  public void setClearableNumberFields(@javax.annotation.Nullable List<JiraNumberField> clearableNumberFields) {
    this.clearableNumberFields = clearableNumberFields;
  }


  public JiraIssueFields colorFields(@javax.annotation.Nullable List<JiraColorField> colorFields) {
    this.colorFields = colorFields;
    return this;
  }

  public JiraIssueFields addColorFieldsItem(JiraColorField colorFieldsItem) {
    if (this.colorFields == null) {
      this.colorFields = new ArrayList<>();
    }
    this.colorFields.add(colorFieldsItem);
    return this;
  }

  /**
   * Add or clear a color field:   *  To add, specify the color &#x60;name&#x60;. Available colors are: &#x60;purple&#x60;, &#x60;blue&#x60;, &#x60;green&#x60;, &#x60;teal&#x60;, &#x60;yellow&#x60;, &#x60;orange&#x60;, &#x60;grey&#x60;, &#x60;dark purple&#x60;, &#x60;dark blue&#x60;, &#x60;dark green&#x60;, &#x60;dark teal&#x60;, &#x60;dark yellow&#x60;, &#x60;dark orange&#x60;, &#x60;dark grey&#x60;.  *  To clear, set the color &#x60;name&#x60; to an empty string.
   * @return colorFields
   */
  @javax.annotation.Nullable
  public List<JiraColorField> getColorFields() {
    return colorFields;
  }

  public void setColorFields(@javax.annotation.Nullable List<JiraColorField> colorFields) {
    this.colorFields = colorFields;
  }


  public JiraIssueFields datePickerFields(@javax.annotation.Nullable List<JiraDateField> datePickerFields) {
    this.datePickerFields = datePickerFields;
    return this;
  }

  public JiraIssueFields addDatePickerFieldsItem(JiraDateField datePickerFieldsItem) {
    if (this.datePickerFields == null) {
      this.datePickerFields = new ArrayList<>();
    }
    this.datePickerFields.add(datePickerFieldsItem);
    return this;
  }

  /**
   * Add or clear a date picker field:   *  To add, specify the date in &#x60;d/mmm/yy&#x60; format or ISO format &#x60;dd-mm-yyyy&#x60;.  *  To clear, set &#x60;formattedDate&#x60; to an empty string.
   * @return datePickerFields
   */
  @javax.annotation.Nullable
  public List<JiraDateField> getDatePickerFields() {
    return datePickerFields;
  }

  public void setDatePickerFields(@javax.annotation.Nullable List<JiraDateField> datePickerFields) {
    this.datePickerFields = datePickerFields;
  }


  public JiraIssueFields dateTimePickerFields(@javax.annotation.Nullable List<JiraDateTimeField> dateTimePickerFields) {
    this.dateTimePickerFields = dateTimePickerFields;
    return this;
  }

  public JiraIssueFields addDateTimePickerFieldsItem(JiraDateTimeField dateTimePickerFieldsItem) {
    if (this.dateTimePickerFields == null) {
      this.dateTimePickerFields = new ArrayList<>();
    }
    this.dateTimePickerFields.add(dateTimePickerFieldsItem);
    return this;
  }

  /**
   * Add or clear the planned start date and time:   *  To add, specify the date and time in ISO format for &#x60;formattedDateTime&#x60;.  *  To clear, provide an empty string for &#x60;formattedDateTime&#x60;.
   * @return dateTimePickerFields
   */
  @javax.annotation.Nullable
  public List<JiraDateTimeField> getDateTimePickerFields() {
    return dateTimePickerFields;
  }

  public void setDateTimePickerFields(@javax.annotation.Nullable List<JiraDateTimeField> dateTimePickerFields) {
    this.dateTimePickerFields = dateTimePickerFields;
  }


  public JiraIssueFields issueType(@javax.annotation.Nullable JiraIssueTypeField issueType) {
    this.issueType = issueType;
    return this;
  }

  /**
   * Set the issue type field by providing an &#x60;issueTypeId&#x60;.
   * @return issueType
   */
  @javax.annotation.Nullable
  public JiraIssueTypeField getIssueType() {
    return issueType;
  }

  public void setIssueType(@javax.annotation.Nullable JiraIssueTypeField issueType) {
    this.issueType = issueType;
  }


  public JiraIssueFields labelsFields(@javax.annotation.Nullable List<JiraLabelsField> labelsFields) {
    this.labelsFields = labelsFields;
    return this;
  }

  public JiraIssueFields addLabelsFieldsItem(JiraLabelsField labelsFieldsItem) {
    if (this.labelsFields == null) {
      this.labelsFields = new ArrayList<>();
    }
    this.labelsFields.add(labelsFieldsItem);
    return this;
  }

  /**
   * Edit a labels field:   *  Options include &#x60;ADD&#x60;, &#x60;REPLACE&#x60;, &#x60;REMOVE&#x60;, or &#x60;REMOVE_ALL&#x60; for bulk edits.  *  To clear labels, use the &#x60;REMOVE_ALL&#x60; option with an empty &#x60;labels&#x60; array.
   * @return labelsFields
   */
  @javax.annotation.Nullable
  public List<JiraLabelsField> getLabelsFields() {
    return labelsFields;
  }

  public void setLabelsFields(@javax.annotation.Nullable List<JiraLabelsField> labelsFields) {
    this.labelsFields = labelsFields;
  }


  public JiraIssueFields multipleGroupPickerFields(@javax.annotation.Nullable List<JiraMultipleGroupPickerField> multipleGroupPickerFields) {
    this.multipleGroupPickerFields = multipleGroupPickerFields;
    return this;
  }

  public JiraIssueFields addMultipleGroupPickerFieldsItem(JiraMultipleGroupPickerField multipleGroupPickerFieldsItem) {
    if (this.multipleGroupPickerFields == null) {
      this.multipleGroupPickerFields = new ArrayList<>();
    }
    this.multipleGroupPickerFields.add(multipleGroupPickerFieldsItem);
    return this;
  }

  /**
   * Add or clear a multi-group picker field:   *  To add groups, provide an array of groups with &#x60;groupName&#x60;s.  *  To clear all groups, use an empty &#x60;groups&#x60; array.
   * @return multipleGroupPickerFields
   */
  @javax.annotation.Nullable
  public List<JiraMultipleGroupPickerField> getMultipleGroupPickerFields() {
    return multipleGroupPickerFields;
  }

  public void setMultipleGroupPickerFields(@javax.annotation.Nullable List<JiraMultipleGroupPickerField> multipleGroupPickerFields) {
    this.multipleGroupPickerFields = multipleGroupPickerFields;
  }


  public JiraIssueFields multipleSelectClearableUserPickerFields(@javax.annotation.Nullable List<JiraMultipleSelectUserPickerField> multipleSelectClearableUserPickerFields) {
    this.multipleSelectClearableUserPickerFields = multipleSelectClearableUserPickerFields;
    return this;
  }

  public JiraIssueFields addMultipleSelectClearableUserPickerFieldsItem(JiraMultipleSelectUserPickerField multipleSelectClearableUserPickerFieldsItem) {
    if (this.multipleSelectClearableUserPickerFields == null) {
      this.multipleSelectClearableUserPickerFields = new ArrayList<>();
    }
    this.multipleSelectClearableUserPickerFields.add(multipleSelectClearableUserPickerFieldsItem);
    return this;
  }

  /**
   * Assign or unassign multiple users to/from a field:   *  To assign, provide an array of user &#x60;accountId&#x60;s.  *  To clear, set &#x60;users&#x60; to &#x60;null&#x60;.
   * @return multipleSelectClearableUserPickerFields
   */
  @javax.annotation.Nullable
  public List<JiraMultipleSelectUserPickerField> getMultipleSelectClearableUserPickerFields() {
    return multipleSelectClearableUserPickerFields;
  }

  public void setMultipleSelectClearableUserPickerFields(@javax.annotation.Nullable List<JiraMultipleSelectUserPickerField> multipleSelectClearableUserPickerFields) {
    this.multipleSelectClearableUserPickerFields = multipleSelectClearableUserPickerFields;
  }


  public JiraIssueFields multipleSelectFields(@javax.annotation.Nullable List<JiraMultipleSelectField> multipleSelectFields) {
    this.multipleSelectFields = multipleSelectFields;
    return this;
  }

  public JiraIssueFields addMultipleSelectFieldsItem(JiraMultipleSelectField multipleSelectFieldsItem) {
    if (this.multipleSelectFields == null) {
      this.multipleSelectFields = new ArrayList<>();
    }
    this.multipleSelectFields.add(multipleSelectFieldsItem);
    return this;
  }

  /**
   * Add or clear a multi-select field:   *  To add, provide an array of options with &#x60;optionId&#x60;s.  *  To clear, use an empty &#x60;options&#x60; array.
   * @return multipleSelectFields
   */
  @javax.annotation.Nullable
  public List<JiraMultipleSelectField> getMultipleSelectFields() {
    return multipleSelectFields;
  }

  public void setMultipleSelectFields(@javax.annotation.Nullable List<JiraMultipleSelectField> multipleSelectFields) {
    this.multipleSelectFields = multipleSelectFields;
  }


  public JiraIssueFields multipleVersionPickerFields(@javax.annotation.Nullable List<JiraMultipleVersionPickerField> multipleVersionPickerFields) {
    this.multipleVersionPickerFields = multipleVersionPickerFields;
    return this;
  }

  public JiraIssueFields addMultipleVersionPickerFieldsItem(JiraMultipleVersionPickerField multipleVersionPickerFieldsItem) {
    if (this.multipleVersionPickerFields == null) {
      this.multipleVersionPickerFields = new ArrayList<>();
    }
    this.multipleVersionPickerFields.add(multipleVersionPickerFieldsItem);
    return this;
  }

  /**
   * Edit a multi-version picker field like Fix Versions/Affects Versions:   *  Options include &#x60;ADD&#x60;, &#x60;REPLACE&#x60;, &#x60;REMOVE&#x60;, or &#x60;REMOVE_ALL&#x60; for bulk edits.  *  To clear the field, use the &#x60;REMOVE_ALL&#x60; option with an empty &#x60;versions&#x60; array.
   * @return multipleVersionPickerFields
   */
  @javax.annotation.Nullable
  public List<JiraMultipleVersionPickerField> getMultipleVersionPickerFields() {
    return multipleVersionPickerFields;
  }

  public void setMultipleVersionPickerFields(@javax.annotation.Nullable List<JiraMultipleVersionPickerField> multipleVersionPickerFields) {
    this.multipleVersionPickerFields = multipleVersionPickerFields;
  }


  public JiraIssueFields multiselectComponents(@javax.annotation.Nullable JiraMultiSelectComponentField multiselectComponents) {
    this.multiselectComponents = multiselectComponents;
    return this;
  }

  /**
   * Edit a multi select components field:   *  Options include &#x60;ADD&#x60;, &#x60;REPLACE&#x60;, &#x60;REMOVE&#x60;, or &#x60;REMOVE_ALL&#x60; for bulk edits.  *  To clear, use the &#x60;REMOVE_ALL&#x60; option with an empty &#x60;components&#x60; array.
   * @return multiselectComponents
   */
  @javax.annotation.Nullable
  public JiraMultiSelectComponentField getMultiselectComponents() {
    return multiselectComponents;
  }

  public void setMultiselectComponents(@javax.annotation.Nullable JiraMultiSelectComponentField multiselectComponents) {
    this.multiselectComponents = multiselectComponents;
  }


  public JiraIssueFields originalEstimateField(@javax.annotation.Nullable JiraDurationField originalEstimateField) {
    this.originalEstimateField = originalEstimateField;
    return this;
  }

  /**
   * Edit the original estimate field.
   * @return originalEstimateField
   */
  @javax.annotation.Nullable
  public JiraDurationField getOriginalEstimateField() {
    return originalEstimateField;
  }

  public void setOriginalEstimateField(@javax.annotation.Nullable JiraDurationField originalEstimateField) {
    this.originalEstimateField = originalEstimateField;
  }


  public JiraIssueFields priority(@javax.annotation.Nullable JiraPriorityField priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Set the priority of an issue by specifying a &#x60;priorityId&#x60;.
   * @return priority
   */
  @javax.annotation.Nullable
  public JiraPriorityField getPriority() {
    return priority;
  }

  public void setPriority(@javax.annotation.Nullable JiraPriorityField priority) {
    this.priority = priority;
  }


  public JiraIssueFields richTextFields(@javax.annotation.Nullable List<JiraRichTextField> richTextFields) {
    this.richTextFields = richTextFields;
    return this;
  }

  public JiraIssueFields addRichTextFieldsItem(JiraRichTextField richTextFieldsItem) {
    if (this.richTextFields == null) {
      this.richTextFields = new ArrayList<>();
    }
    this.richTextFields.add(richTextFieldsItem);
    return this;
  }

  /**
   * Add or clear a rich text field:   *  To add, provide &#x60;adfValue&#x60;. Note that rich text fields only support ADF values.  *  To clear, use an empty &#x60;richText&#x60; object.  For ADF format details, refer to: [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure).
   * @return richTextFields
   */
  @javax.annotation.Nullable
  public List<JiraRichTextField> getRichTextFields() {
    return richTextFields;
  }

  public void setRichTextFields(@javax.annotation.Nullable List<JiraRichTextField> richTextFields) {
    this.richTextFields = richTextFields;
  }


  public JiraIssueFields singleGroupPickerFields(@javax.annotation.Nullable List<JiraSingleGroupPickerField> singleGroupPickerFields) {
    this.singleGroupPickerFields = singleGroupPickerFields;
    return this;
  }

  public JiraIssueFields addSingleGroupPickerFieldsItem(JiraSingleGroupPickerField singleGroupPickerFieldsItem) {
    if (this.singleGroupPickerFields == null) {
      this.singleGroupPickerFields = new ArrayList<>();
    }
    this.singleGroupPickerFields.add(singleGroupPickerFieldsItem);
    return this;
  }

  /**
   * Add or clear a single group picker field:   *  To add, specify the group with &#x60;groupName&#x60;.  *  To clear, set &#x60;groupName&#x60; to an empty string.
   * @return singleGroupPickerFields
   */
  @javax.annotation.Nullable
  public List<JiraSingleGroupPickerField> getSingleGroupPickerFields() {
    return singleGroupPickerFields;
  }

  public void setSingleGroupPickerFields(@javax.annotation.Nullable List<JiraSingleGroupPickerField> singleGroupPickerFields) {
    this.singleGroupPickerFields = singleGroupPickerFields;
  }


  public JiraIssueFields singleLineTextFields(@javax.annotation.Nullable List<JiraSingleLineTextField> singleLineTextFields) {
    this.singleLineTextFields = singleLineTextFields;
    return this;
  }

  public JiraIssueFields addSingleLineTextFieldsItem(JiraSingleLineTextField singleLineTextFieldsItem) {
    if (this.singleLineTextFields == null) {
      this.singleLineTextFields = new ArrayList<>();
    }
    this.singleLineTextFields.add(singleLineTextFieldsItem);
    return this;
  }

  /**
   * Add or clear a single line text field:   *  To add, provide the &#x60;text&#x60; value.  *  To clear, set &#x60;text&#x60; to an empty string.
   * @return singleLineTextFields
   */
  @javax.annotation.Nullable
  public List<JiraSingleLineTextField> getSingleLineTextFields() {
    return singleLineTextFields;
  }

  public void setSingleLineTextFields(@javax.annotation.Nullable List<JiraSingleLineTextField> singleLineTextFields) {
    this.singleLineTextFields = singleLineTextFields;
  }


  public JiraIssueFields singleSelectClearableUserPickerFields(@javax.annotation.Nullable List<JiraSingleSelectUserPickerField> singleSelectClearableUserPickerFields) {
    this.singleSelectClearableUserPickerFields = singleSelectClearableUserPickerFields;
    return this;
  }

  public JiraIssueFields addSingleSelectClearableUserPickerFieldsItem(JiraSingleSelectUserPickerField singleSelectClearableUserPickerFieldsItem) {
    if (this.singleSelectClearableUserPickerFields == null) {
      this.singleSelectClearableUserPickerFields = new ArrayList<>();
    }
    this.singleSelectClearableUserPickerFields.add(singleSelectClearableUserPickerFieldsItem);
    return this;
  }

  /**
   * Edit assignment for single select user picker fields like Assignee/Reporter:   *  To assign an issue, specify the user&#39;s &#x60;accountId&#x60;.  *  To unassign an issue, set &#x60;user&#x60; to &#x60;null&#x60;.  *  For automatic assignment, set &#x60;accountId&#x60; to &#x60;-1&#x60;.
   * @return singleSelectClearableUserPickerFields
   */
  @javax.annotation.Nullable
  public List<JiraSingleSelectUserPickerField> getSingleSelectClearableUserPickerFields() {
    return singleSelectClearableUserPickerFields;
  }

  public void setSingleSelectClearableUserPickerFields(@javax.annotation.Nullable List<JiraSingleSelectUserPickerField> singleSelectClearableUserPickerFields) {
    this.singleSelectClearableUserPickerFields = singleSelectClearableUserPickerFields;
  }


  public JiraIssueFields singleSelectFields(@javax.annotation.Nullable List<JiraSingleSelectField> singleSelectFields) {
    this.singleSelectFields = singleSelectFields;
    return this;
  }

  public JiraIssueFields addSingleSelectFieldsItem(JiraSingleSelectField singleSelectFieldsItem) {
    if (this.singleSelectFields == null) {
      this.singleSelectFields = new ArrayList<>();
    }
    this.singleSelectFields.add(singleSelectFieldsItem);
    return this;
  }

  /**
   * Add or clear a single select field:   *  To add, specify the option with an &#x60;optionId&#x60;.  *  To clear, pass an option with &#x60;optionId&#x60; as &#x60;-1&#x60;.
   * @return singleSelectFields
   */
  @javax.annotation.Nullable
  public List<JiraSingleSelectField> getSingleSelectFields() {
    return singleSelectFields;
  }

  public void setSingleSelectFields(@javax.annotation.Nullable List<JiraSingleSelectField> singleSelectFields) {
    this.singleSelectFields = singleSelectFields;
  }


  public JiraIssueFields singleVersionPickerFields(@javax.annotation.Nullable List<JiraSingleVersionPickerField> singleVersionPickerFields) {
    this.singleVersionPickerFields = singleVersionPickerFields;
    return this;
  }

  public JiraIssueFields addSingleVersionPickerFieldsItem(JiraSingleVersionPickerField singleVersionPickerFieldsItem) {
    if (this.singleVersionPickerFields == null) {
      this.singleVersionPickerFields = new ArrayList<>();
    }
    this.singleVersionPickerFields.add(singleVersionPickerFieldsItem);
    return this;
  }

  /**
   * Add or clear a single version picker field:   *  To add, specify the version with a &#x60;versionId&#x60;.  *  To clear, set &#x60;versionId&#x60; to &#x60;-1&#x60;.
   * @return singleVersionPickerFields
   */
  @javax.annotation.Nullable
  public List<JiraSingleVersionPickerField> getSingleVersionPickerFields() {
    return singleVersionPickerFields;
  }

  public void setSingleVersionPickerFields(@javax.annotation.Nullable List<JiraSingleVersionPickerField> singleVersionPickerFields) {
    this.singleVersionPickerFields = singleVersionPickerFields;
  }


  public JiraIssueFields timeTrackingField(@javax.annotation.Nullable JiraTimeTrackingField timeTrackingField) {
    this.timeTrackingField = timeTrackingField;
    return this;
  }

  /**
   * Edit the time tracking field.
   * @return timeTrackingField
   */
  @javax.annotation.Nullable
  public JiraTimeTrackingField getTimeTrackingField() {
    return timeTrackingField;
  }

  public void setTimeTrackingField(@javax.annotation.Nullable JiraTimeTrackingField timeTrackingField) {
    this.timeTrackingField = timeTrackingField;
  }


  public JiraIssueFields urlFields(@javax.annotation.Nullable List<JiraUrlField> urlFields) {
    this.urlFields = urlFields;
    return this;
  }

  public JiraIssueFields addUrlFieldsItem(JiraUrlField urlFieldsItem) {
    if (this.urlFields == null) {
      this.urlFields = new ArrayList<>();
    }
    this.urlFields.add(urlFieldsItem);
    return this;
  }

  /**
   * Add or clear a URL field:   *  To add, provide the &#x60;url&#x60; with the desired URL value.  *  To clear, set &#x60;url&#x60; to an empty string.
   * @return urlFields
   */
  @javax.annotation.Nullable
  public List<JiraUrlField> getUrlFields() {
    return urlFields;
  }

  public void setUrlFields(@javax.annotation.Nullable List<JiraUrlField> urlFields) {
    this.urlFields = urlFields;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JiraIssueFields jiraIssueFields = (JiraIssueFields) o;
    return Objects.equals(this.cascadingSelectFields, jiraIssueFields.cascadingSelectFields) &&
        Objects.equals(this.clearableNumberFields, jiraIssueFields.clearableNumberFields) &&
        Objects.equals(this.colorFields, jiraIssueFields.colorFields) &&
        Objects.equals(this.datePickerFields, jiraIssueFields.datePickerFields) &&
        Objects.equals(this.dateTimePickerFields, jiraIssueFields.dateTimePickerFields) &&
        Objects.equals(this.issueType, jiraIssueFields.issueType) &&
        Objects.equals(this.labelsFields, jiraIssueFields.labelsFields) &&
        Objects.equals(this.multipleGroupPickerFields, jiraIssueFields.multipleGroupPickerFields) &&
        Objects.equals(this.multipleSelectClearableUserPickerFields, jiraIssueFields.multipleSelectClearableUserPickerFields) &&
        Objects.equals(this.multipleSelectFields, jiraIssueFields.multipleSelectFields) &&
        Objects.equals(this.multipleVersionPickerFields, jiraIssueFields.multipleVersionPickerFields) &&
        Objects.equals(this.multiselectComponents, jiraIssueFields.multiselectComponents) &&
        Objects.equals(this.originalEstimateField, jiraIssueFields.originalEstimateField) &&
        Objects.equals(this.priority, jiraIssueFields.priority) &&
        Objects.equals(this.richTextFields, jiraIssueFields.richTextFields) &&
        Objects.equals(this.singleGroupPickerFields, jiraIssueFields.singleGroupPickerFields) &&
        Objects.equals(this.singleLineTextFields, jiraIssueFields.singleLineTextFields) &&
        Objects.equals(this.singleSelectClearableUserPickerFields, jiraIssueFields.singleSelectClearableUserPickerFields) &&
        Objects.equals(this.singleSelectFields, jiraIssueFields.singleSelectFields) &&
        Objects.equals(this.singleVersionPickerFields, jiraIssueFields.singleVersionPickerFields) &&
        Objects.equals(this.timeTrackingField, jiraIssueFields.timeTrackingField) &&
        Objects.equals(this.urlFields, jiraIssueFields.urlFields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cascadingSelectFields, clearableNumberFields, colorFields, datePickerFields, dateTimePickerFields, issueType, labelsFields, multipleGroupPickerFields, multipleSelectClearableUserPickerFields, multipleSelectFields, multipleVersionPickerFields, multiselectComponents, originalEstimateField, priority, richTextFields, singleGroupPickerFields, singleLineTextFields, singleSelectClearableUserPickerFields, singleSelectFields, singleVersionPickerFields, timeTrackingField, urlFields);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JiraIssueFields {\n");
    sb.append("    cascadingSelectFields: ").append(toIndentedString(cascadingSelectFields)).append("\n");
    sb.append("    clearableNumberFields: ").append(toIndentedString(clearableNumberFields)).append("\n");
    sb.append("    colorFields: ").append(toIndentedString(colorFields)).append("\n");
    sb.append("    datePickerFields: ").append(toIndentedString(datePickerFields)).append("\n");
    sb.append("    dateTimePickerFields: ").append(toIndentedString(dateTimePickerFields)).append("\n");
    sb.append("    issueType: ").append(toIndentedString(issueType)).append("\n");
    sb.append("    labelsFields: ").append(toIndentedString(labelsFields)).append("\n");
    sb.append("    multipleGroupPickerFields: ").append(toIndentedString(multipleGroupPickerFields)).append("\n");
    sb.append("    multipleSelectClearableUserPickerFields: ").append(toIndentedString(multipleSelectClearableUserPickerFields)).append("\n");
    sb.append("    multipleSelectFields: ").append(toIndentedString(multipleSelectFields)).append("\n");
    sb.append("    multipleVersionPickerFields: ").append(toIndentedString(multipleVersionPickerFields)).append("\n");
    sb.append("    multiselectComponents: ").append(toIndentedString(multiselectComponents)).append("\n");
    sb.append("    originalEstimateField: ").append(toIndentedString(originalEstimateField)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    richTextFields: ").append(toIndentedString(richTextFields)).append("\n");
    sb.append("    singleGroupPickerFields: ").append(toIndentedString(singleGroupPickerFields)).append("\n");
    sb.append("    singleLineTextFields: ").append(toIndentedString(singleLineTextFields)).append("\n");
    sb.append("    singleSelectClearableUserPickerFields: ").append(toIndentedString(singleSelectClearableUserPickerFields)).append("\n");
    sb.append("    singleSelectFields: ").append(toIndentedString(singleSelectFields)).append("\n");
    sb.append("    singleVersionPickerFields: ").append(toIndentedString(singleVersionPickerFields)).append("\n");
    sb.append("    timeTrackingField: ").append(toIndentedString(timeTrackingField)).append("\n");
    sb.append("    urlFields: ").append(toIndentedString(urlFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cascadingSelectFields");
    openapiFields.add("clearableNumberFields");
    openapiFields.add("colorFields");
    openapiFields.add("datePickerFields");
    openapiFields.add("dateTimePickerFields");
    openapiFields.add("issueType");
    openapiFields.add("labelsFields");
    openapiFields.add("multipleGroupPickerFields");
    openapiFields.add("multipleSelectClearableUserPickerFields");
    openapiFields.add("multipleSelectFields");
    openapiFields.add("multipleVersionPickerFields");
    openapiFields.add("multiselectComponents");
    openapiFields.add("originalEstimateField");
    openapiFields.add("priority");
    openapiFields.add("richTextFields");
    openapiFields.add("singleGroupPickerFields");
    openapiFields.add("singleLineTextFields");
    openapiFields.add("singleSelectClearableUserPickerFields");
    openapiFields.add("singleSelectFields");
    openapiFields.add("singleVersionPickerFields");
    openapiFields.add("timeTrackingField");
    openapiFields.add("urlFields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JiraIssueFields
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JiraIssueFields.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JiraIssueFields is not found in the empty JSON string", JiraIssueFields.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JiraIssueFields.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JiraIssueFields` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cascadingSelectFields") != null && !jsonObj.get("cascadingSelectFields").isJsonNull()) {
        JsonArray jsonArraycascadingSelectFields = jsonObj.getAsJsonArray("cascadingSelectFields");
        if (jsonArraycascadingSelectFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cascadingSelectFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cascadingSelectFields` to be an array in the JSON string but got `%s`", jsonObj.get("cascadingSelectFields").toString()));
          }

          // validate the optional field `cascadingSelectFields` (array)
          for (int i = 0; i < jsonArraycascadingSelectFields.size(); i++) {
            JiraCascadingSelectField.validateJsonElement(jsonArraycascadingSelectFields.get(i));
          };
        }
      }
      if (jsonObj.get("clearableNumberFields") != null && !jsonObj.get("clearableNumberFields").isJsonNull()) {
        JsonArray jsonArrayclearableNumberFields = jsonObj.getAsJsonArray("clearableNumberFields");
        if (jsonArrayclearableNumberFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clearableNumberFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clearableNumberFields` to be an array in the JSON string but got `%s`", jsonObj.get("clearableNumberFields").toString()));
          }

          // validate the optional field `clearableNumberFields` (array)
          for (int i = 0; i < jsonArrayclearableNumberFields.size(); i++) {
            JiraNumberField.validateJsonElement(jsonArrayclearableNumberFields.get(i));
          };
        }
      }
      if (jsonObj.get("colorFields") != null && !jsonObj.get("colorFields").isJsonNull()) {
        JsonArray jsonArraycolorFields = jsonObj.getAsJsonArray("colorFields");
        if (jsonArraycolorFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("colorFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `colorFields` to be an array in the JSON string but got `%s`", jsonObj.get("colorFields").toString()));
          }

          // validate the optional field `colorFields` (array)
          for (int i = 0; i < jsonArraycolorFields.size(); i++) {
            JiraColorField.validateJsonElement(jsonArraycolorFields.get(i));
          };
        }
      }
      if (jsonObj.get("datePickerFields") != null && !jsonObj.get("datePickerFields").isJsonNull()) {
        JsonArray jsonArraydatePickerFields = jsonObj.getAsJsonArray("datePickerFields");
        if (jsonArraydatePickerFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("datePickerFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `datePickerFields` to be an array in the JSON string but got `%s`", jsonObj.get("datePickerFields").toString()));
          }

          // validate the optional field `datePickerFields` (array)
          for (int i = 0; i < jsonArraydatePickerFields.size(); i++) {
            JiraDateField.validateJsonElement(jsonArraydatePickerFields.get(i));
          };
        }
      }
      if (jsonObj.get("dateTimePickerFields") != null && !jsonObj.get("dateTimePickerFields").isJsonNull()) {
        JsonArray jsonArraydateTimePickerFields = jsonObj.getAsJsonArray("dateTimePickerFields");
        if (jsonArraydateTimePickerFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dateTimePickerFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dateTimePickerFields` to be an array in the JSON string but got `%s`", jsonObj.get("dateTimePickerFields").toString()));
          }

          // validate the optional field `dateTimePickerFields` (array)
          for (int i = 0; i < jsonArraydateTimePickerFields.size(); i++) {
            JiraDateTimeField.validateJsonElement(jsonArraydateTimePickerFields.get(i));
          };
        }
      }
      // validate the optional field `issueType`
      if (jsonObj.get("issueType") != null && !jsonObj.get("issueType").isJsonNull()) {
        JiraIssueTypeField.validateJsonElement(jsonObj.get("issueType"));
      }
      if (jsonObj.get("labelsFields") != null && !jsonObj.get("labelsFields").isJsonNull()) {
        JsonArray jsonArraylabelsFields = jsonObj.getAsJsonArray("labelsFields");
        if (jsonArraylabelsFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labelsFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labelsFields` to be an array in the JSON string but got `%s`", jsonObj.get("labelsFields").toString()));
          }

          // validate the optional field `labelsFields` (array)
          for (int i = 0; i < jsonArraylabelsFields.size(); i++) {
            JiraLabelsField.validateJsonElement(jsonArraylabelsFields.get(i));
          };
        }
      }
      if (jsonObj.get("multipleGroupPickerFields") != null && !jsonObj.get("multipleGroupPickerFields").isJsonNull()) {
        JsonArray jsonArraymultipleGroupPickerFields = jsonObj.getAsJsonArray("multipleGroupPickerFields");
        if (jsonArraymultipleGroupPickerFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("multipleGroupPickerFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `multipleGroupPickerFields` to be an array in the JSON string but got `%s`", jsonObj.get("multipleGroupPickerFields").toString()));
          }

          // validate the optional field `multipleGroupPickerFields` (array)
          for (int i = 0; i < jsonArraymultipleGroupPickerFields.size(); i++) {
            JiraMultipleGroupPickerField.validateJsonElement(jsonArraymultipleGroupPickerFields.get(i));
          };
        }
      }
      if (jsonObj.get("multipleSelectClearableUserPickerFields") != null && !jsonObj.get("multipleSelectClearableUserPickerFields").isJsonNull()) {
        JsonArray jsonArraymultipleSelectClearableUserPickerFields = jsonObj.getAsJsonArray("multipleSelectClearableUserPickerFields");
        if (jsonArraymultipleSelectClearableUserPickerFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("multipleSelectClearableUserPickerFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `multipleSelectClearableUserPickerFields` to be an array in the JSON string but got `%s`", jsonObj.get("multipleSelectClearableUserPickerFields").toString()));
          }

          // validate the optional field `multipleSelectClearableUserPickerFields` (array)
          for (int i = 0; i < jsonArraymultipleSelectClearableUserPickerFields.size(); i++) {
            JiraMultipleSelectUserPickerField.validateJsonElement(jsonArraymultipleSelectClearableUserPickerFields.get(i));
          };
        }
      }
      if (jsonObj.get("multipleSelectFields") != null && !jsonObj.get("multipleSelectFields").isJsonNull()) {
        JsonArray jsonArraymultipleSelectFields = jsonObj.getAsJsonArray("multipleSelectFields");
        if (jsonArraymultipleSelectFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("multipleSelectFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `multipleSelectFields` to be an array in the JSON string but got `%s`", jsonObj.get("multipleSelectFields").toString()));
          }

          // validate the optional field `multipleSelectFields` (array)
          for (int i = 0; i < jsonArraymultipleSelectFields.size(); i++) {
            JiraMultipleSelectField.validateJsonElement(jsonArraymultipleSelectFields.get(i));
          };
        }
      }
      if (jsonObj.get("multipleVersionPickerFields") != null && !jsonObj.get("multipleVersionPickerFields").isJsonNull()) {
        JsonArray jsonArraymultipleVersionPickerFields = jsonObj.getAsJsonArray("multipleVersionPickerFields");
        if (jsonArraymultipleVersionPickerFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("multipleVersionPickerFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `multipleVersionPickerFields` to be an array in the JSON string but got `%s`", jsonObj.get("multipleVersionPickerFields").toString()));
          }

          // validate the optional field `multipleVersionPickerFields` (array)
          for (int i = 0; i < jsonArraymultipleVersionPickerFields.size(); i++) {
            JiraMultipleVersionPickerField.validateJsonElement(jsonArraymultipleVersionPickerFields.get(i));
          };
        }
      }
      // validate the optional field `multiselectComponents`
      if (jsonObj.get("multiselectComponents") != null && !jsonObj.get("multiselectComponents").isJsonNull()) {
        JiraMultiSelectComponentField.validateJsonElement(jsonObj.get("multiselectComponents"));
      }
      // validate the optional field `originalEstimateField`
      if (jsonObj.get("originalEstimateField") != null && !jsonObj.get("originalEstimateField").isJsonNull()) {
        JiraDurationField.validateJsonElement(jsonObj.get("originalEstimateField"));
      }
      // validate the optional field `priority`
      if (jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) {
        JiraPriorityField.validateJsonElement(jsonObj.get("priority"));
      }
      if (jsonObj.get("richTextFields") != null && !jsonObj.get("richTextFields").isJsonNull()) {
        JsonArray jsonArrayrichTextFields = jsonObj.getAsJsonArray("richTextFields");
        if (jsonArrayrichTextFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("richTextFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `richTextFields` to be an array in the JSON string but got `%s`", jsonObj.get("richTextFields").toString()));
          }

          // validate the optional field `richTextFields` (array)
          for (int i = 0; i < jsonArrayrichTextFields.size(); i++) {
            JiraRichTextField.validateJsonElement(jsonArrayrichTextFields.get(i));
          };
        }
      }
      if (jsonObj.get("singleGroupPickerFields") != null && !jsonObj.get("singleGroupPickerFields").isJsonNull()) {
        JsonArray jsonArraysingleGroupPickerFields = jsonObj.getAsJsonArray("singleGroupPickerFields");
        if (jsonArraysingleGroupPickerFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("singleGroupPickerFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `singleGroupPickerFields` to be an array in the JSON string but got `%s`", jsonObj.get("singleGroupPickerFields").toString()));
          }

          // validate the optional field `singleGroupPickerFields` (array)
          for (int i = 0; i < jsonArraysingleGroupPickerFields.size(); i++) {
            JiraSingleGroupPickerField.validateJsonElement(jsonArraysingleGroupPickerFields.get(i));
          };
        }
      }
      if (jsonObj.get("singleLineTextFields") != null && !jsonObj.get("singleLineTextFields").isJsonNull()) {
        JsonArray jsonArraysingleLineTextFields = jsonObj.getAsJsonArray("singleLineTextFields");
        if (jsonArraysingleLineTextFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("singleLineTextFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `singleLineTextFields` to be an array in the JSON string but got `%s`", jsonObj.get("singleLineTextFields").toString()));
          }

          // validate the optional field `singleLineTextFields` (array)
          for (int i = 0; i < jsonArraysingleLineTextFields.size(); i++) {
            JiraSingleLineTextField.validateJsonElement(jsonArraysingleLineTextFields.get(i));
          };
        }
      }
      if (jsonObj.get("singleSelectClearableUserPickerFields") != null && !jsonObj.get("singleSelectClearableUserPickerFields").isJsonNull()) {
        JsonArray jsonArraysingleSelectClearableUserPickerFields = jsonObj.getAsJsonArray("singleSelectClearableUserPickerFields");
        if (jsonArraysingleSelectClearableUserPickerFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("singleSelectClearableUserPickerFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `singleSelectClearableUserPickerFields` to be an array in the JSON string but got `%s`", jsonObj.get("singleSelectClearableUserPickerFields").toString()));
          }

          // validate the optional field `singleSelectClearableUserPickerFields` (array)
          for (int i = 0; i < jsonArraysingleSelectClearableUserPickerFields.size(); i++) {
            JiraSingleSelectUserPickerField.validateJsonElement(jsonArraysingleSelectClearableUserPickerFields.get(i));
          };
        }
      }
      if (jsonObj.get("singleSelectFields") != null && !jsonObj.get("singleSelectFields").isJsonNull()) {
        JsonArray jsonArraysingleSelectFields = jsonObj.getAsJsonArray("singleSelectFields");
        if (jsonArraysingleSelectFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("singleSelectFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `singleSelectFields` to be an array in the JSON string but got `%s`", jsonObj.get("singleSelectFields").toString()));
          }

          // validate the optional field `singleSelectFields` (array)
          for (int i = 0; i < jsonArraysingleSelectFields.size(); i++) {
            JiraSingleSelectField.validateJsonElement(jsonArraysingleSelectFields.get(i));
          };
        }
      }
      if (jsonObj.get("singleVersionPickerFields") != null && !jsonObj.get("singleVersionPickerFields").isJsonNull()) {
        JsonArray jsonArraysingleVersionPickerFields = jsonObj.getAsJsonArray("singleVersionPickerFields");
        if (jsonArraysingleVersionPickerFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("singleVersionPickerFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `singleVersionPickerFields` to be an array in the JSON string but got `%s`", jsonObj.get("singleVersionPickerFields").toString()));
          }

          // validate the optional field `singleVersionPickerFields` (array)
          for (int i = 0; i < jsonArraysingleVersionPickerFields.size(); i++) {
            JiraSingleVersionPickerField.validateJsonElement(jsonArraysingleVersionPickerFields.get(i));
          };
        }
      }
      // validate the optional field `timeTrackingField`
      if (jsonObj.get("timeTrackingField") != null && !jsonObj.get("timeTrackingField").isJsonNull()) {
        JiraTimeTrackingField.validateJsonElement(jsonObj.get("timeTrackingField"));
      }
      if (jsonObj.get("urlFields") != null && !jsonObj.get("urlFields").isJsonNull()) {
        JsonArray jsonArrayurlFields = jsonObj.getAsJsonArray("urlFields");
        if (jsonArrayurlFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("urlFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `urlFields` to be an array in the JSON string but got `%s`", jsonObj.get("urlFields").toString()));
          }

          // validate the optional field `urlFields` (array)
          for (int i = 0; i < jsonArrayurlFields.size(); i++) {
            JiraUrlField.validateJsonElement(jsonArrayurlFields.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JiraIssueFields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JiraIssueFields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JiraIssueFields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JiraIssueFields.class));

       return (TypeAdapter<T>) new TypeAdapter<JiraIssueFields>() {
           @Override
           public void write(JsonWriter out, JiraIssueFields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JiraIssueFields read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JiraIssueFields given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JiraIssueFields
   * @throws IOException if the JSON string is invalid with respect to JiraIssueFields
   */
  public static JiraIssueFields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JiraIssueFields.class);
  }

  /**
   * Convert an instance of JiraIssueFields to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

