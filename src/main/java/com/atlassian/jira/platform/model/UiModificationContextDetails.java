/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * The details of a UI modification&#39;s context, which define where to activate the UI modification.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class UiModificationContextDetails {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_IS_AVAILABLE = "isAvailable";
  @SerializedName(SERIALIZED_NAME_IS_AVAILABLE)
  @javax.annotation.Nullable
  private Boolean isAvailable;

  public static final String SERIALIZED_NAME_ISSUE_TYPE_ID = "issueTypeId";
  @SerializedName(SERIALIZED_NAME_ISSUE_TYPE_ID)
  @javax.annotation.Nullable
  private String issueTypeId;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  @javax.annotation.Nullable
  private String projectId;

  /**
   * The view type of the context. Only &#x60;GIC&#x60;(Global Issue Create), &#x60;IssueView&#x60; and &#x60;IssueTransition&#x60; are supported. Null is treated as a wildcard, meaning the UI modification will be applied to all view types. Each UI modification context can have a maximum of one wildcard.
   */
  @JsonAdapter(ViewTypeEnum.Adapter.class)
  public enum ViewTypeEnum {
    GIC("GIC"),
    
    ISSUE_VIEW("IssueView"),
    
    ISSUE_TRANSITION("IssueTransition");

    private String value;

    ViewTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViewTypeEnum fromValue(String value) {
      for (ViewTypeEnum b : ViewTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViewTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViewTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViewTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViewTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIEW_TYPE = "viewType";
  @SerializedName(SERIALIZED_NAME_VIEW_TYPE)
  @javax.annotation.Nullable
  private ViewTypeEnum viewType;

  public UiModificationContextDetails() {
  }

  public UiModificationContextDetails(
     String id, 
     Boolean isAvailable
  ) {
    this();
    this.id = id;
    this.isAvailable = isAvailable;
  }

  /**
   * The ID of the UI modification context.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * Whether a context is available. For example, when a project is deleted the context becomes unavailable.
   * @return isAvailable
   */
  @javax.annotation.Nullable
  public Boolean getIsAvailable() {
    return isAvailable;
  }



  public UiModificationContextDetails issueTypeId(@javax.annotation.Nullable String issueTypeId) {
    this.issueTypeId = issueTypeId;
    return this;
  }

  /**
   * The issue type ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all issue types. Each UI modification context can have a maximum of one wildcard.
   * @return issueTypeId
   */
  @javax.annotation.Nullable
  public String getIssueTypeId() {
    return issueTypeId;
  }

  public void setIssueTypeId(@javax.annotation.Nullable String issueTypeId) {
    this.issueTypeId = issueTypeId;
  }


  public UiModificationContextDetails projectId(@javax.annotation.Nullable String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * The project ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all projects. Each UI modification context can have a maximum of one wildcard.
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(@javax.annotation.Nullable String projectId) {
    this.projectId = projectId;
  }


  public UiModificationContextDetails viewType(@javax.annotation.Nullable ViewTypeEnum viewType) {
    this.viewType = viewType;
    return this;
  }

  /**
   * The view type of the context. Only &#x60;GIC&#x60;(Global Issue Create), &#x60;IssueView&#x60; and &#x60;IssueTransition&#x60; are supported. Null is treated as a wildcard, meaning the UI modification will be applied to all view types. Each UI modification context can have a maximum of one wildcard.
   * @return viewType
   */
  @javax.annotation.Nullable
  public ViewTypeEnum getViewType() {
    return viewType;
  }

  public void setViewType(@javax.annotation.Nullable ViewTypeEnum viewType) {
    this.viewType = viewType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UiModificationContextDetails uiModificationContextDetails = (UiModificationContextDetails) o;
    return Objects.equals(this.id, uiModificationContextDetails.id) &&
        Objects.equals(this.isAvailable, uiModificationContextDetails.isAvailable) &&
        Objects.equals(this.issueTypeId, uiModificationContextDetails.issueTypeId) &&
        Objects.equals(this.projectId, uiModificationContextDetails.projectId) &&
        Objects.equals(this.viewType, uiModificationContextDetails.viewType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, isAvailable, issueTypeId, projectId, viewType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UiModificationContextDetails {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isAvailable: ").append(toIndentedString(isAvailable)).append("\n");
    sb.append("    issueTypeId: ").append(toIndentedString(issueTypeId)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    viewType: ").append(toIndentedString(viewType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("isAvailable");
    openapiFields.add("issueTypeId");
    openapiFields.add("projectId");
    openapiFields.add("viewType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UiModificationContextDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UiModificationContextDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UiModificationContextDetails is not found in the empty JSON string", UiModificationContextDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UiModificationContextDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UiModificationContextDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("issueTypeId") != null && !jsonObj.get("issueTypeId").isJsonNull()) && !jsonObj.get("issueTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issueTypeId").toString()));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("viewType") != null && !jsonObj.get("viewType").isJsonNull()) && !jsonObj.get("viewType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewType").toString()));
      }
      // validate the optional field `viewType`
      if (jsonObj.get("viewType") != null && !jsonObj.get("viewType").isJsonNull()) {
        ViewTypeEnum.validateJsonElement(jsonObj.get("viewType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UiModificationContextDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UiModificationContextDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UiModificationContextDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UiModificationContextDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<UiModificationContextDetails>() {
           @Override
           public void write(JsonWriter out, UiModificationContextDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UiModificationContextDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UiModificationContextDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UiModificationContextDetails
   * @throws IOException if the JSON string is invalid with respect to UiModificationContextDetails
   */
  public static UiModificationContextDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UiModificationContextDetails.class);
  }

  /**
   * Convert an instance of UiModificationContextDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

