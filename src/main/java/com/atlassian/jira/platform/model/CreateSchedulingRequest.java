/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.CreateDateFieldRequest;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * CreateSchedulingRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class CreateSchedulingRequest {
  /**
   * The dependencies for the plan. This must be \&quot;Sequential\&quot; or \&quot;Concurrent\&quot;.
   */
  @JsonAdapter(DependenciesEnum.Adapter.class)
  public enum DependenciesEnum {
    SEQUENTIAL("Sequential"),
    
    CONCURRENT("Concurrent");

    private String value;

    DependenciesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DependenciesEnum fromValue(String value) {
      for (DependenciesEnum b : DependenciesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DependenciesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DependenciesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DependenciesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DependenciesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DependenciesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEPENDENCIES = "dependencies";
  @SerializedName(SERIALIZED_NAME_DEPENDENCIES)
  @javax.annotation.Nullable
  private DependenciesEnum dependencies;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  @javax.annotation.Nullable
  private CreateDateFieldRequest endDate;

  /**
   * The estimation unit for the plan. This must be \&quot;StoryPoints\&quot;, \&quot;Days\&quot; or \&quot;Hours\&quot;.
   */
  @JsonAdapter(EstimationEnum.Adapter.class)
  public enum EstimationEnum {
    STORY_POINTS("StoryPoints"),
    
    DAYS("Days"),
    
    HOURS("Hours");

    private String value;

    EstimationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EstimationEnum fromValue(String value) {
      for (EstimationEnum b : EstimationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EstimationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EstimationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EstimationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EstimationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EstimationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ESTIMATION = "estimation";
  @SerializedName(SERIALIZED_NAME_ESTIMATION)
  @javax.annotation.Nonnull
  private EstimationEnum estimation;

  /**
   * The inferred dates for the plan. This must be \&quot;None\&quot;, \&quot;SprintDates\&quot; or \&quot;ReleaseDates\&quot;.
   */
  @JsonAdapter(InferredDatesEnum.Adapter.class)
  public enum InferredDatesEnum {
    NONE("None"),
    
    SPRINT_DATES("SprintDates"),
    
    RELEASE_DATES("ReleaseDates");

    private String value;

    InferredDatesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InferredDatesEnum fromValue(String value) {
      for (InferredDatesEnum b : InferredDatesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InferredDatesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InferredDatesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InferredDatesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InferredDatesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InferredDatesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INFERRED_DATES = "inferredDates";
  @SerializedName(SERIALIZED_NAME_INFERRED_DATES)
  @javax.annotation.Nullable
  private InferredDatesEnum inferredDates;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  @javax.annotation.Nullable
  private CreateDateFieldRequest startDate;

  public CreateSchedulingRequest() {
  }

  public CreateSchedulingRequest dependencies(@javax.annotation.Nullable DependenciesEnum dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  /**
   * The dependencies for the plan. This must be \&quot;Sequential\&quot; or \&quot;Concurrent\&quot;.
   * @return dependencies
   */
  @javax.annotation.Nullable
  public DependenciesEnum getDependencies() {
    return dependencies;
  }

  public void setDependencies(@javax.annotation.Nullable DependenciesEnum dependencies) {
    this.dependencies = dependencies;
  }


  public CreateSchedulingRequest endDate(@javax.annotation.Nullable CreateDateFieldRequest endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The end date field for the plan.
   * @return endDate
   */
  @javax.annotation.Nullable
  public CreateDateFieldRequest getEndDate() {
    return endDate;
  }

  public void setEndDate(@javax.annotation.Nullable CreateDateFieldRequest endDate) {
    this.endDate = endDate;
  }


  public CreateSchedulingRequest estimation(@javax.annotation.Nonnull EstimationEnum estimation) {
    this.estimation = estimation;
    return this;
  }

  /**
   * The estimation unit for the plan. This must be \&quot;StoryPoints\&quot;, \&quot;Days\&quot; or \&quot;Hours\&quot;.
   * @return estimation
   */
  @javax.annotation.Nonnull
  public EstimationEnum getEstimation() {
    return estimation;
  }

  public void setEstimation(@javax.annotation.Nonnull EstimationEnum estimation) {
    this.estimation = estimation;
  }


  public CreateSchedulingRequest inferredDates(@javax.annotation.Nullable InferredDatesEnum inferredDates) {
    this.inferredDates = inferredDates;
    return this;
  }

  /**
   * The inferred dates for the plan. This must be \&quot;None\&quot;, \&quot;SprintDates\&quot; or \&quot;ReleaseDates\&quot;.
   * @return inferredDates
   */
  @javax.annotation.Nullable
  public InferredDatesEnum getInferredDates() {
    return inferredDates;
  }

  public void setInferredDates(@javax.annotation.Nullable InferredDatesEnum inferredDates) {
    this.inferredDates = inferredDates;
  }


  public CreateSchedulingRequest startDate(@javax.annotation.Nullable CreateDateFieldRequest startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The start date field for the plan.
   * @return startDate
   */
  @javax.annotation.Nullable
  public CreateDateFieldRequest getStartDate() {
    return startDate;
  }

  public void setStartDate(@javax.annotation.Nullable CreateDateFieldRequest startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSchedulingRequest createSchedulingRequest = (CreateSchedulingRequest) o;
    return Objects.equals(this.dependencies, createSchedulingRequest.dependencies) &&
        Objects.equals(this.endDate, createSchedulingRequest.endDate) &&
        Objects.equals(this.estimation, createSchedulingRequest.estimation) &&
        Objects.equals(this.inferredDates, createSchedulingRequest.inferredDates) &&
        Objects.equals(this.startDate, createSchedulingRequest.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dependencies, endDate, estimation, inferredDates, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSchedulingRequest {\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    estimation: ").append(toIndentedString(estimation)).append("\n");
    sb.append("    inferredDates: ").append(toIndentedString(inferredDates)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dependencies");
    openapiFields.add("endDate");
    openapiFields.add("estimation");
    openapiFields.add("inferredDates");
    openapiFields.add("startDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("estimation");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSchedulingRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSchedulingRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSchedulingRequest is not found in the empty JSON string", CreateSchedulingRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSchedulingRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSchedulingRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSchedulingRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dependencies") != null && !jsonObj.get("dependencies").isJsonNull()) && !jsonObj.get("dependencies").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependencies` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dependencies").toString()));
      }
      // validate the optional field `dependencies`
      if (jsonObj.get("dependencies") != null && !jsonObj.get("dependencies").isJsonNull()) {
        DependenciesEnum.validateJsonElement(jsonObj.get("dependencies"));
      }
      // validate the optional field `endDate`
      if (jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) {
        CreateDateFieldRequest.validateJsonElement(jsonObj.get("endDate"));
      }
      if (!jsonObj.get("estimation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `estimation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("estimation").toString()));
      }
      // validate the required field `estimation`
      EstimationEnum.validateJsonElement(jsonObj.get("estimation"));
      if ((jsonObj.get("inferredDates") != null && !jsonObj.get("inferredDates").isJsonNull()) && !jsonObj.get("inferredDates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inferredDates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inferredDates").toString()));
      }
      // validate the optional field `inferredDates`
      if (jsonObj.get("inferredDates") != null && !jsonObj.get("inferredDates").isJsonNull()) {
        InferredDatesEnum.validateJsonElement(jsonObj.get("inferredDates"));
      }
      // validate the optional field `startDate`
      if (jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) {
        CreateDateFieldRequest.validateJsonElement(jsonObj.get("startDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSchedulingRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSchedulingRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSchedulingRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSchedulingRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSchedulingRequest>() {
           @Override
           public void write(JsonWriter out, CreateSchedulingRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSchedulingRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSchedulingRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSchedulingRequest
   * @throws IOException if the JSON string is invalid with respect to CreateSchedulingRequest
   */
  public static CreateSchedulingRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSchedulingRequest.class);
  }

  /**
   * Convert an instance of CreateSchedulingRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

