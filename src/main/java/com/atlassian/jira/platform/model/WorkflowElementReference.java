/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.ProjectAndIssueTypePair;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * A reference to the location of the error. This will be null if the error does not refer to a specific element.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class WorkflowElementReference {
  public static final String SERIALIZED_NAME_PROPERTY_KEY = "propertyKey";
  @SerializedName(SERIALIZED_NAME_PROPERTY_KEY)
  @javax.annotation.Nullable
  private String propertyKey;

  public static final String SERIALIZED_NAME_RULE_ID = "ruleId";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  @javax.annotation.Nullable
  private String ruleId;

  public static final String SERIALIZED_NAME_STATUS_MAPPING_REFERENCE = "statusMappingReference";
  @SerializedName(SERIALIZED_NAME_STATUS_MAPPING_REFERENCE)
  @javax.annotation.Nullable
  private ProjectAndIssueTypePair statusMappingReference;

  public static final String SERIALIZED_NAME_STATUS_REFERENCE = "statusReference";
  @SerializedName(SERIALIZED_NAME_STATUS_REFERENCE)
  @javax.annotation.Nullable
  private String statusReference;

  public static final String SERIALIZED_NAME_TRANSITION_ID = "transitionId";
  @SerializedName(SERIALIZED_NAME_TRANSITION_ID)
  @javax.annotation.Nullable
  private String transitionId;

  public WorkflowElementReference() {
  }

  public WorkflowElementReference propertyKey(@javax.annotation.Nullable String propertyKey) {
    this.propertyKey = propertyKey;
    return this;
  }

  /**
   * A property key.
   * @return propertyKey
   */
  @javax.annotation.Nullable
  public String getPropertyKey() {
    return propertyKey;
  }

  public void setPropertyKey(@javax.annotation.Nullable String propertyKey) {
    this.propertyKey = propertyKey;
  }


  public WorkflowElementReference ruleId(@javax.annotation.Nullable String ruleId) {
    this.ruleId = ruleId;
    return this;
  }

  /**
   * A rule ID.
   * @return ruleId
   */
  @javax.annotation.Nullable
  public String getRuleId() {
    return ruleId;
  }

  public void setRuleId(@javax.annotation.Nullable String ruleId) {
    this.ruleId = ruleId;
  }


  public WorkflowElementReference statusMappingReference(@javax.annotation.Nullable ProjectAndIssueTypePair statusMappingReference) {
    this.statusMappingReference = statusMappingReference;
    return this;
  }

  /**
   * Get statusMappingReference
   * @return statusMappingReference
   */
  @javax.annotation.Nullable
  public ProjectAndIssueTypePair getStatusMappingReference() {
    return statusMappingReference;
  }

  public void setStatusMappingReference(@javax.annotation.Nullable ProjectAndIssueTypePair statusMappingReference) {
    this.statusMappingReference = statusMappingReference;
  }


  public WorkflowElementReference statusReference(@javax.annotation.Nullable String statusReference) {
    this.statusReference = statusReference;
    return this;
  }

  /**
   * A status reference.
   * @return statusReference
   */
  @javax.annotation.Nullable
  public String getStatusReference() {
    return statusReference;
  }

  public void setStatusReference(@javax.annotation.Nullable String statusReference) {
    this.statusReference = statusReference;
  }


  public WorkflowElementReference transitionId(@javax.annotation.Nullable String transitionId) {
    this.transitionId = transitionId;
    return this;
  }

  /**
   * A transition ID.
   * @return transitionId
   */
  @javax.annotation.Nullable
  public String getTransitionId() {
    return transitionId;
  }

  public void setTransitionId(@javax.annotation.Nullable String transitionId) {
    this.transitionId = transitionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowElementReference workflowElementReference = (WorkflowElementReference) o;
    return Objects.equals(this.propertyKey, workflowElementReference.propertyKey) &&
        Objects.equals(this.ruleId, workflowElementReference.ruleId) &&
        Objects.equals(this.statusMappingReference, workflowElementReference.statusMappingReference) &&
        Objects.equals(this.statusReference, workflowElementReference.statusReference) &&
        Objects.equals(this.transitionId, workflowElementReference.transitionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyKey, ruleId, statusMappingReference, statusReference, transitionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowElementReference {\n");
    sb.append("    propertyKey: ").append(toIndentedString(propertyKey)).append("\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    statusMappingReference: ").append(toIndentedString(statusMappingReference)).append("\n");
    sb.append("    statusReference: ").append(toIndentedString(statusReference)).append("\n");
    sb.append("    transitionId: ").append(toIndentedString(transitionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("propertyKey");
    openapiFields.add("ruleId");
    openapiFields.add("statusMappingReference");
    openapiFields.add("statusReference");
    openapiFields.add("transitionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowElementReference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowElementReference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowElementReference is not found in the empty JSON string", WorkflowElementReference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowElementReference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowElementReference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("propertyKey") != null && !jsonObj.get("propertyKey").isJsonNull()) && !jsonObj.get("propertyKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyKey").toString()));
      }
      if ((jsonObj.get("ruleId") != null && !jsonObj.get("ruleId").isJsonNull()) && !jsonObj.get("ruleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleId").toString()));
      }
      // validate the optional field `statusMappingReference`
      if (jsonObj.get("statusMappingReference") != null && !jsonObj.get("statusMappingReference").isJsonNull()) {
        ProjectAndIssueTypePair.validateJsonElement(jsonObj.get("statusMappingReference"));
      }
      if ((jsonObj.get("statusReference") != null && !jsonObj.get("statusReference").isJsonNull()) && !jsonObj.get("statusReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusReference").toString()));
      }
      if ((jsonObj.get("transitionId") != null && !jsonObj.get("transitionId").isJsonNull()) && !jsonObj.get("transitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transitionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowElementReference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowElementReference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowElementReference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowElementReference.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowElementReference>() {
           @Override
           public void write(JsonWriter out, WorkflowElementReference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowElementReference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowElementReference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowElementReference
   * @throws IOException if the JSON string is invalid with respect to WorkflowElementReference
   */
  public static WorkflowElementReference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowElementReference.class);
  }

  /**
   * Convert an instance of WorkflowElementReference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

