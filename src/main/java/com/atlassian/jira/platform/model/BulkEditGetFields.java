/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.IssueBulkEditField;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * Bulk Edit Get Fields Response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class BulkEditGetFields {
  public static final String SERIALIZED_NAME_ENDING_BEFORE = "endingBefore";
  @SerializedName(SERIALIZED_NAME_ENDING_BEFORE)
  @javax.annotation.Nullable
  private String endingBefore;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  @javax.annotation.Nullable
  private List<IssueBulkEditField> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_STARTING_AFTER = "startingAfter";
  @SerializedName(SERIALIZED_NAME_STARTING_AFTER)
  @javax.annotation.Nullable
  private String startingAfter;

  public BulkEditGetFields() {
  }

  public BulkEditGetFields(
     String endingBefore, 
     List<IssueBulkEditField> fields, 
     String startingAfter
  ) {
    this();
    this.endingBefore = endingBefore;
    this.fields = fields;
    this.startingAfter = startingAfter;
  }

  /**
   * The end cursor for use in pagination.
   * @return endingBefore
   */
  @javax.annotation.Nullable
  public String getEndingBefore() {
    return endingBefore;
  }



  /**
   * List of all the fields
   * @return fields
   */
  @javax.annotation.Nullable
  public List<IssueBulkEditField> getFields() {
    return fields;
  }



  /**
   * The start cursor for use in pagination.
   * @return startingAfter
   */
  @javax.annotation.Nullable
  public String getStartingAfter() {
    return startingAfter;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkEditGetFields bulkEditGetFields = (BulkEditGetFields) o;
    return Objects.equals(this.endingBefore, bulkEditGetFields.endingBefore) &&
        Objects.equals(this.fields, bulkEditGetFields.fields) &&
        Objects.equals(this.startingAfter, bulkEditGetFields.startingAfter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endingBefore, fields, startingAfter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkEditGetFields {\n");
    sb.append("    endingBefore: ").append(toIndentedString(endingBefore)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    startingAfter: ").append(toIndentedString(startingAfter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endingBefore");
    openapiFields.add("fields");
    openapiFields.add("startingAfter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BulkEditGetFields
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BulkEditGetFields.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkEditGetFields is not found in the empty JSON string", BulkEditGetFields.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BulkEditGetFields.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkEditGetFields` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endingBefore") != null && !jsonObj.get("endingBefore").isJsonNull()) && !jsonObj.get("endingBefore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endingBefore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endingBefore").toString()));
      }
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) {
        JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
        if (jsonArrayfields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
          }

          // validate the optional field `fields` (array)
          for (int i = 0; i < jsonArrayfields.size(); i++) {
            IssueBulkEditField.validateJsonElement(jsonArrayfields.get(i));
          };
        }
      }
      if ((jsonObj.get("startingAfter") != null && !jsonObj.get("startingAfter").isJsonNull()) && !jsonObj.get("startingAfter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startingAfter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startingAfter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkEditGetFields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkEditGetFields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkEditGetFields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkEditGetFields.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkEditGetFields>() {
           @Override
           public void write(JsonWriter out, BulkEditGetFields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkEditGetFields read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BulkEditGetFields given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BulkEditGetFields
   * @throws IOException if the JSON string is invalid with respect to BulkEditGetFields
   */
  public static BulkEditGetFields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkEditGetFields.class);
  }

  /**
   * Convert an instance of BulkEditGetFields to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

