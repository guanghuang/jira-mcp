/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * The approval configuration of a status within a workflow. Applies only to Jira Service Management approvals.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class ApprovalConfiguration {
  /**
   * Whether the approval configuration is active.
   */
  @JsonAdapter(ActiveEnum.Adapter.class)
  public enum ActiveEnum {
    TRUE("true"),
    
    FALSE("false");

    private String value;

    ActiveEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActiveEnum fromValue(String value) {
      for (ActiveEnum b : ActiveEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActiveEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActiveEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActiveEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActiveEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActiveEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  @javax.annotation.Nonnull
  private ActiveEnum active;

  /**
   * How the required approval count is calculated. It may be configured to require a specific number of approvals, or approval by a percentage of approvers. If the approvers source field is Approver groups, you can configure how many approvals per group are required for the request to be approved. The number will be the same across all groups.
   */
  @JsonAdapter(ConditionTypeEnum.Adapter.class)
  public enum ConditionTypeEnum {
    NUMBER("number"),
    
    PERCENT("percent"),
    
    NUMBER_PER_PRINCIPAL("numberPerPrincipal");

    private String value;

    ConditionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConditionTypeEnum fromValue(String value) {
      for (ConditionTypeEnum b : ConditionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConditionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConditionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConditionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConditionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConditionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONDITION_TYPE = "conditionType";
  @SerializedName(SERIALIZED_NAME_CONDITION_TYPE)
  @javax.annotation.Nonnull
  private ConditionTypeEnum conditionType;

  public static final String SERIALIZED_NAME_CONDITION_VALUE = "conditionValue";
  @SerializedName(SERIALIZED_NAME_CONDITION_VALUE)
  @javax.annotation.Nonnull
  private String conditionValue;

  /**
   * A list of roles that should be excluded as possible approvers.
   */
  @JsonAdapter(ExcludeEnum.Adapter.class)
  public enum ExcludeEnum {
    ASSIGNEE("assignee"),
    
    REPORTER("reporter");

    private String value;

    ExcludeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExcludeEnum fromValue(String value) {
      for (ExcludeEnum b : ExcludeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ExcludeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExcludeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExcludeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExcludeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExcludeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCLUDE = "exclude";
  @SerializedName(SERIALIZED_NAME_EXCLUDE)
  @javax.annotation.Nullable
  private ExcludeEnum exclude;

  public static final String SERIALIZED_NAME_FIELD_ID = "fieldId";
  @SerializedName(SERIALIZED_NAME_FIELD_ID)
  @javax.annotation.Nonnull
  private String fieldId;

  public static final String SERIALIZED_NAME_PRE_POPULATED_FIELD_ID = "prePopulatedFieldId";
  @SerializedName(SERIALIZED_NAME_PRE_POPULATED_FIELD_ID)
  @javax.annotation.Nullable
  private String prePopulatedFieldId;

  public static final String SERIALIZED_NAME_TRANSITION_APPROVED = "transitionApproved";
  @SerializedName(SERIALIZED_NAME_TRANSITION_APPROVED)
  @javax.annotation.Nonnull
  private String transitionApproved;

  public static final String SERIALIZED_NAME_TRANSITION_REJECTED = "transitionRejected";
  @SerializedName(SERIALIZED_NAME_TRANSITION_REJECTED)
  @javax.annotation.Nonnull
  private String transitionRejected;

  public ApprovalConfiguration() {
  }

  public ApprovalConfiguration active(@javax.annotation.Nonnull ActiveEnum active) {
    this.active = active;
    return this;
  }

  /**
   * Whether the approval configuration is active.
   * @return active
   */
  @javax.annotation.Nonnull
  public ActiveEnum getActive() {
    return active;
  }

  public void setActive(@javax.annotation.Nonnull ActiveEnum active) {
    this.active = active;
  }


  public ApprovalConfiguration conditionType(@javax.annotation.Nonnull ConditionTypeEnum conditionType) {
    this.conditionType = conditionType;
    return this;
  }

  /**
   * How the required approval count is calculated. It may be configured to require a specific number of approvals, or approval by a percentage of approvers. If the approvers source field is Approver groups, you can configure how many approvals per group are required for the request to be approved. The number will be the same across all groups.
   * @return conditionType
   */
  @javax.annotation.Nonnull
  public ConditionTypeEnum getConditionType() {
    return conditionType;
  }

  public void setConditionType(@javax.annotation.Nonnull ConditionTypeEnum conditionType) {
    this.conditionType = conditionType;
  }


  public ApprovalConfiguration conditionValue(@javax.annotation.Nonnull String conditionValue) {
    this.conditionValue = conditionValue;
    return this;
  }

  /**
   * The number or percentage of approvals required for a request to be approved. If &#x60;conditionType&#x60; is &#x60;number&#x60;, the value must be 20 or less. If &#x60;conditionType&#x60; is &#x60;percent&#x60;, the value must be 100 or less.
   * @return conditionValue
   */
  @javax.annotation.Nonnull
  public String getConditionValue() {
    return conditionValue;
  }

  public void setConditionValue(@javax.annotation.Nonnull String conditionValue) {
    this.conditionValue = conditionValue;
  }


  public ApprovalConfiguration exclude(@javax.annotation.Nullable ExcludeEnum exclude) {
    this.exclude = exclude;
    return this;
  }

//  public ApprovalConfiguration addExcludeItem(ExcludeEnum excludeItem) {
//    if (this.exclude == null) {
//      this.exclude = new ArrayList<>();
//    }
//    this.exclude.add(excludeItem);
//    return this;
//  }

  /**
   * A list of roles that should be excluded as possible approvers.
   * @return exclude
   */
  @javax.annotation.Nullable
  public ExcludeEnum getExclude() {
    return exclude;
  }

  public void setExclude(@javax.annotation.Nullable ExcludeEnum exclude) {
    this.exclude = exclude;
  }


  public ApprovalConfiguration fieldId(@javax.annotation.Nonnull String fieldId) {
    this.fieldId = fieldId;
    return this;
  }

  /**
   * The custom field ID of the \&quot;Approvers\&quot; or \&quot;Approver Groups\&quot; field.
   * @return fieldId
   */
  @javax.annotation.Nonnull
  public String getFieldId() {
    return fieldId;
  }

  public void setFieldId(@javax.annotation.Nonnull String fieldId) {
    this.fieldId = fieldId;
  }


  public ApprovalConfiguration prePopulatedFieldId(@javax.annotation.Nullable String prePopulatedFieldId) {
    this.prePopulatedFieldId = prePopulatedFieldId;
    return this;
  }

  /**
   * The custom field ID of the field used to pre-populate the Approver field. Only supports the \&quot;Affected Services\&quot; field.
   * @return prePopulatedFieldId
   */
  @javax.annotation.Nullable
  public String getPrePopulatedFieldId() {
    return prePopulatedFieldId;
  }

  public void setPrePopulatedFieldId(@javax.annotation.Nullable String prePopulatedFieldId) {
    this.prePopulatedFieldId = prePopulatedFieldId;
  }


  public ApprovalConfiguration transitionApproved(@javax.annotation.Nonnull String transitionApproved) {
    this.transitionApproved = transitionApproved;
    return this;
  }

  /**
   * The numeric ID of the transition to be executed if the request is approved.
   * @return transitionApproved
   */
  @javax.annotation.Nonnull
  public String getTransitionApproved() {
    return transitionApproved;
  }

  public void setTransitionApproved(@javax.annotation.Nonnull String transitionApproved) {
    this.transitionApproved = transitionApproved;
  }


  public ApprovalConfiguration transitionRejected(@javax.annotation.Nonnull String transitionRejected) {
    this.transitionRejected = transitionRejected;
    return this;
  }

  /**
   * The numeric ID of the transition to be executed if the request is declined.
   * @return transitionRejected
   */
  @javax.annotation.Nonnull
  public String getTransitionRejected() {
    return transitionRejected;
  }

  public void setTransitionRejected(@javax.annotation.Nonnull String transitionRejected) {
    this.transitionRejected = transitionRejected;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApprovalConfiguration approvalConfiguration = (ApprovalConfiguration) o;
    return Objects.equals(this.active, approvalConfiguration.active) &&
        Objects.equals(this.conditionType, approvalConfiguration.conditionType) &&
        Objects.equals(this.conditionValue, approvalConfiguration.conditionValue) &&
        Objects.equals(this.exclude, approvalConfiguration.exclude) &&
        Objects.equals(this.fieldId, approvalConfiguration.fieldId) &&
        Objects.equals(this.prePopulatedFieldId, approvalConfiguration.prePopulatedFieldId) &&
        Objects.equals(this.transitionApproved, approvalConfiguration.transitionApproved) &&
        Objects.equals(this.transitionRejected, approvalConfiguration.transitionRejected);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, conditionType, conditionValue, exclude, fieldId, prePopulatedFieldId, transitionApproved, transitionRejected);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApprovalConfiguration {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    conditionType: ").append(toIndentedString(conditionType)).append("\n");
    sb.append("    conditionValue: ").append(toIndentedString(conditionValue)).append("\n");
    sb.append("    exclude: ").append(toIndentedString(exclude)).append("\n");
    sb.append("    fieldId: ").append(toIndentedString(fieldId)).append("\n");
    sb.append("    prePopulatedFieldId: ").append(toIndentedString(prePopulatedFieldId)).append("\n");
    sb.append("    transitionApproved: ").append(toIndentedString(transitionApproved)).append("\n");
    sb.append("    transitionRejected: ").append(toIndentedString(transitionRejected)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("conditionType");
    openapiFields.add("conditionValue");
    openapiFields.add("exclude");
    openapiFields.add("fieldId");
    openapiFields.add("prePopulatedFieldId");
    openapiFields.add("transitionApproved");
    openapiFields.add("transitionRejected");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("active");
    openapiRequiredFields.add("conditionType");
    openapiRequiredFields.add("conditionValue");
    openapiRequiredFields.add("fieldId");
    openapiRequiredFields.add("transitionApproved");
    openapiRequiredFields.add("transitionRejected");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApprovalConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApprovalConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApprovalConfiguration is not found in the empty JSON string", ApprovalConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApprovalConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApprovalConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApprovalConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("active").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active").toString()));
      }
      // validate the required field `active`
      ActiveEnum.validateJsonElement(jsonObj.get("active"));
      if (!jsonObj.get("conditionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conditionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conditionType").toString()));
      }
      // validate the required field `conditionType`
      ConditionTypeEnum.validateJsonElement(jsonObj.get("conditionType"));
      if (!jsonObj.get("conditionValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conditionValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conditionValue").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exclude") != null && !jsonObj.get("exclude").isJsonNull() && !jsonObj.get("exclude").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclude` to be an array in the JSON string but got `%s`", jsonObj.get("exclude").toString()));
      }
      if (!jsonObj.get("fieldId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldId").toString()));
      }
      if ((jsonObj.get("prePopulatedFieldId") != null && !jsonObj.get("prePopulatedFieldId").isJsonNull()) && !jsonObj.get("prePopulatedFieldId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prePopulatedFieldId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prePopulatedFieldId").toString()));
      }
      if (!jsonObj.get("transitionApproved").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transitionApproved` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transitionApproved").toString()));
      }
      if (!jsonObj.get("transitionRejected").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transitionRejected` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transitionRejected").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApprovalConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApprovalConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApprovalConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApprovalConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ApprovalConfiguration>() {
           @Override
           public void write(JsonWriter out, ApprovalConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApprovalConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApprovalConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApprovalConfiguration
   * @throws IOException if the JSON string is invalid with respect to ApprovalConfiguration
   */
  public static ApprovalConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApprovalConfiguration.class);
  }

  /**
   * Convert an instance of ApprovalConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

