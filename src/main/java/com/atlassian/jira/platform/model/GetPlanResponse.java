/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.GetCrossProjectReleaseResponse;
import com.atlassian.jira.platform.model.GetCustomFieldResponse;
import com.atlassian.jira.platform.model.GetExclusionRulesResponse;
import com.atlassian.jira.platform.model.GetIssueSourceResponse;
import com.atlassian.jira.platform.model.GetPermissionResponse;
import com.atlassian.jira.platform.model.GetSchedulingResponse;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * GetPlanResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class GetPlanResponse {
  public static final String SERIALIZED_NAME_CROSS_PROJECT_RELEASES = "crossProjectReleases";
  @SerializedName(SERIALIZED_NAME_CROSS_PROJECT_RELEASES)
  @javax.annotation.Nullable
  private List<GetCrossProjectReleaseResponse> crossProjectReleases = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  @javax.annotation.Nullable
  private List<GetCustomFieldResponse> customFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUSION_RULES = "exclusionRules";
  @SerializedName(SERIALIZED_NAME_EXCLUSION_RULES)
  @javax.annotation.Nullable
  private GetExclusionRulesResponse exclusionRules;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private Long id;

  public static final String SERIALIZED_NAME_ISSUE_SOURCES = "issueSources";
  @SerializedName(SERIALIZED_NAME_ISSUE_SOURCES)
  @javax.annotation.Nullable
  private List<GetIssueSourceResponse> issueSources = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_SAVED = "lastSaved";
  @SerializedName(SERIALIZED_NAME_LAST_SAVED)
  @javax.annotation.Nullable
  private String lastSaved;

  public static final String SERIALIZED_NAME_LEAD_ACCOUNT_ID = "leadAccountId";
  @SerializedName(SERIALIZED_NAME_LEAD_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String leadAccountId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  @javax.annotation.Nullable
  private List<GetPermissionResponse> permissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEDULING = "scheduling";
  @SerializedName(SERIALIZED_NAME_SCHEDULING)
  @javax.annotation.Nonnull
  private GetSchedulingResponse scheduling;

  /**
   * The plan status. This is \&quot;Active\&quot;, \&quot;Trashed\&quot; or \&quot;Archived\&quot;.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("Active"),
    
    TRASHED("Trashed"),
    
    ARCHIVED("Archived");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private StatusEnum status;

  public GetPlanResponse() {
  }

  public GetPlanResponse crossProjectReleases(@javax.annotation.Nullable List<GetCrossProjectReleaseResponse> crossProjectReleases) {
    this.crossProjectReleases = crossProjectReleases;
    return this;
  }

  public GetPlanResponse addCrossProjectReleasesItem(GetCrossProjectReleaseResponse crossProjectReleasesItem) {
    if (this.crossProjectReleases == null) {
      this.crossProjectReleases = new ArrayList<>();
    }
    this.crossProjectReleases.add(crossProjectReleasesItem);
    return this;
  }

  /**
   * The cross-project releases included in the plan.
   * @return crossProjectReleases
   */
  @javax.annotation.Nullable
  public List<GetCrossProjectReleaseResponse> getCrossProjectReleases() {
    return crossProjectReleases;
  }

  public void setCrossProjectReleases(@javax.annotation.Nullable List<GetCrossProjectReleaseResponse> crossProjectReleases) {
    this.crossProjectReleases = crossProjectReleases;
  }


  public GetPlanResponse customFields(@javax.annotation.Nullable List<GetCustomFieldResponse> customFields) {
    this.customFields = customFields;
    return this;
  }

  public GetPlanResponse addCustomFieldsItem(GetCustomFieldResponse customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

  /**
   * The custom fields for the plan.
   * @return customFields
   */
  @javax.annotation.Nullable
  public List<GetCustomFieldResponse> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(@javax.annotation.Nullable List<GetCustomFieldResponse> customFields) {
    this.customFields = customFields;
  }


  public GetPlanResponse exclusionRules(@javax.annotation.Nullable GetExclusionRulesResponse exclusionRules) {
    this.exclusionRules = exclusionRules;
    return this;
  }

  /**
   * The exclusion rules for the plan.
   * @return exclusionRules
   */
  @javax.annotation.Nullable
  public GetExclusionRulesResponse getExclusionRules() {
    return exclusionRules;
  }

  public void setExclusionRules(@javax.annotation.Nullable GetExclusionRulesResponse exclusionRules) {
    this.exclusionRules = exclusionRules;
  }


  public GetPlanResponse id(@javax.annotation.Nonnull Long id) {
    this.id = id;
    return this;
  }

  /**
   * The plan ID.
   * @return id
   */
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull Long id) {
    this.id = id;
  }


  public GetPlanResponse issueSources(@javax.annotation.Nullable List<GetIssueSourceResponse> issueSources) {
    this.issueSources = issueSources;
    return this;
  }

  public GetPlanResponse addIssueSourcesItem(GetIssueSourceResponse issueSourcesItem) {
    if (this.issueSources == null) {
      this.issueSources = new ArrayList<>();
    }
    this.issueSources.add(issueSourcesItem);
    return this;
  }

  /**
   * The issue sources included in the plan.
   * @return issueSources
   */
  @javax.annotation.Nullable
  public List<GetIssueSourceResponse> getIssueSources() {
    return issueSources;
  }

  public void setIssueSources(@javax.annotation.Nullable List<GetIssueSourceResponse> issueSources) {
    this.issueSources = issueSources;
  }


  public GetPlanResponse lastSaved(@javax.annotation.Nullable String lastSaved) {
    this.lastSaved = lastSaved;
    return this;
  }

  /**
   * The date when the plan was last saved in UTC.
   * @return lastSaved
   */
  @javax.annotation.Nullable
  public String getLastSaved() {
    return lastSaved;
  }

  public void setLastSaved(@javax.annotation.Nullable String lastSaved) {
    this.lastSaved = lastSaved;
  }


  public GetPlanResponse leadAccountId(@javax.annotation.Nullable String leadAccountId) {
    this.leadAccountId = leadAccountId;
    return this;
  }

  /**
   * The account ID of the plan lead.
   * @return leadAccountId
   */
  @javax.annotation.Nullable
  public String getLeadAccountId() {
    return leadAccountId;
  }

  public void setLeadAccountId(@javax.annotation.Nullable String leadAccountId) {
    this.leadAccountId = leadAccountId;
  }


  public GetPlanResponse name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * The plan name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public GetPlanResponse permissions(@javax.annotation.Nullable List<GetPermissionResponse> permissions) {
    this.permissions = permissions;
    return this;
  }

  public GetPlanResponse addPermissionsItem(GetPermissionResponse permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

  /**
   * The permissions for the plan.
   * @return permissions
   */
  @javax.annotation.Nullable
  public List<GetPermissionResponse> getPermissions() {
    return permissions;
  }

  public void setPermissions(@javax.annotation.Nullable List<GetPermissionResponse> permissions) {
    this.permissions = permissions;
  }


  public GetPlanResponse scheduling(@javax.annotation.Nonnull GetSchedulingResponse scheduling) {
    this.scheduling = scheduling;
    return this;
  }

  /**
   * The scheduling settings for the plan.
   * @return scheduling
   */
  @javax.annotation.Nonnull
  public GetSchedulingResponse getScheduling() {
    return scheduling;
  }

  public void setScheduling(@javax.annotation.Nonnull GetSchedulingResponse scheduling) {
    this.scheduling = scheduling;
  }


  public GetPlanResponse status(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The plan status. This is \&quot;Active\&quot;, \&quot;Trashed\&quot; or \&quot;Archived\&quot;.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPlanResponse getPlanResponse = (GetPlanResponse) o;
    return Objects.equals(this.crossProjectReleases, getPlanResponse.crossProjectReleases) &&
        Objects.equals(this.customFields, getPlanResponse.customFields) &&
        Objects.equals(this.exclusionRules, getPlanResponse.exclusionRules) &&
        Objects.equals(this.id, getPlanResponse.id) &&
        Objects.equals(this.issueSources, getPlanResponse.issueSources) &&
        Objects.equals(this.lastSaved, getPlanResponse.lastSaved) &&
        Objects.equals(this.leadAccountId, getPlanResponse.leadAccountId) &&
        Objects.equals(this.name, getPlanResponse.name) &&
        Objects.equals(this.permissions, getPlanResponse.permissions) &&
        Objects.equals(this.scheduling, getPlanResponse.scheduling) &&
        Objects.equals(this.status, getPlanResponse.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(crossProjectReleases, customFields, exclusionRules, id, issueSources, lastSaved, leadAccountId, name, permissions, scheduling, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPlanResponse {\n");
    sb.append("    crossProjectReleases: ").append(toIndentedString(crossProjectReleases)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    exclusionRules: ").append(toIndentedString(exclusionRules)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issueSources: ").append(toIndentedString(issueSources)).append("\n");
    sb.append("    lastSaved: ").append(toIndentedString(lastSaved)).append("\n");
    sb.append("    leadAccountId: ").append(toIndentedString(leadAccountId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    scheduling: ").append(toIndentedString(scheduling)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("crossProjectReleases");
    openapiFields.add("customFields");
    openapiFields.add("exclusionRules");
    openapiFields.add("id");
    openapiFields.add("issueSources");
    openapiFields.add("lastSaved");
    openapiFields.add("leadAccountId");
    openapiFields.add("name");
    openapiFields.add("permissions");
    openapiFields.add("scheduling");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("scheduling");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetPlanResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetPlanResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPlanResponse is not found in the empty JSON string", GetPlanResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetPlanResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetPlanResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetPlanResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("crossProjectReleases") != null && !jsonObj.get("crossProjectReleases").isJsonNull()) {
        JsonArray jsonArraycrossProjectReleases = jsonObj.getAsJsonArray("crossProjectReleases");
        if (jsonArraycrossProjectReleases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("crossProjectReleases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `crossProjectReleases` to be an array in the JSON string but got `%s`", jsonObj.get("crossProjectReleases").toString()));
          }

          // validate the optional field `crossProjectReleases` (array)
          for (int i = 0; i < jsonArraycrossProjectReleases.size(); i++) {
            GetCrossProjectReleaseResponse.validateJsonElement(jsonArraycrossProjectReleases.get(i));
          };
        }
      }
      if (jsonObj.get("customFields") != null && !jsonObj.get("customFields").isJsonNull()) {
        JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("customFields");
        if (jsonArraycustomFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customFields` to be an array in the JSON string but got `%s`", jsonObj.get("customFields").toString()));
          }

          // validate the optional field `customFields` (array)
          for (int i = 0; i < jsonArraycustomFields.size(); i++) {
            GetCustomFieldResponse.validateJsonElement(jsonArraycustomFields.get(i));
          };
        }
      }
      // validate the optional field `exclusionRules`
      if (jsonObj.get("exclusionRules") != null && !jsonObj.get("exclusionRules").isJsonNull()) {
        GetExclusionRulesResponse.validateJsonElement(jsonObj.get("exclusionRules"));
      }
      if (jsonObj.get("issueSources") != null && !jsonObj.get("issueSources").isJsonNull()) {
        JsonArray jsonArrayissueSources = jsonObj.getAsJsonArray("issueSources");
        if (jsonArrayissueSources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("issueSources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `issueSources` to be an array in the JSON string but got `%s`", jsonObj.get("issueSources").toString()));
          }

          // validate the optional field `issueSources` (array)
          for (int i = 0; i < jsonArrayissueSources.size(); i++) {
            GetIssueSourceResponse.validateJsonElement(jsonArrayissueSources.get(i));
          };
        }
      }
      if ((jsonObj.get("lastSaved") != null && !jsonObj.get("lastSaved").isJsonNull()) && !jsonObj.get("lastSaved").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastSaved` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastSaved").toString()));
      }
      if ((jsonObj.get("leadAccountId") != null && !jsonObj.get("leadAccountId").isJsonNull()) && !jsonObj.get("leadAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leadAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leadAccountId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        JsonArray jsonArraypermissions = jsonObj.getAsJsonArray("permissions");
        if (jsonArraypermissions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("permissions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
          }

          // validate the optional field `permissions` (array)
          for (int i = 0; i < jsonArraypermissions.size(); i++) {
            GetPermissionResponse.validateJsonElement(jsonArraypermissions.get(i));
          };
        }
      }
      // validate the required field `scheduling`
      GetSchedulingResponse.validateJsonElement(jsonObj.get("scheduling"));
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPlanResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPlanResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPlanResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPlanResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPlanResponse>() {
           @Override
           public void write(JsonWriter out, GetPlanResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPlanResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetPlanResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetPlanResponse
   * @throws IOException if the JSON string is invalid with respect to GetPlanResponse
   */
  public static GetPlanResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPlanResponse.class);
  }

  /**
   * Convert an instance of GetPlanResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

