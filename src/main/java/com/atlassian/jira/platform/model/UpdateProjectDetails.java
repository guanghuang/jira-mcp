/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * Details about the project.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class UpdateProjectDetails {
  /**
   * The default assignee when creating issues for this project.
   */
  @JsonAdapter(AssigneeTypeEnum.Adapter.class)
  public enum AssigneeTypeEnum {
    PROJECT_LEAD("PROJECT_LEAD"),
    
    UNASSIGNED("UNASSIGNED");

    private String value;

    AssigneeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssigneeTypeEnum fromValue(String value) {
      for (AssigneeTypeEnum b : AssigneeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssigneeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssigneeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssigneeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssigneeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssigneeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSIGNEE_TYPE = "assigneeType";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE_TYPE)
  @javax.annotation.Nullable
  private AssigneeTypeEnum assigneeType;

  public static final String SERIALIZED_NAME_AVATAR_ID = "avatarId";
  @SerializedName(SERIALIZED_NAME_AVATAR_ID)
  @javax.annotation.Nullable
  private Long avatarId;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  @javax.annotation.Nullable
  private Long categoryId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_ISSUE_SECURITY_SCHEME = "issueSecurityScheme";
  @SerializedName(SERIALIZED_NAME_ISSUE_SECURITY_SCHEME)
  @javax.annotation.Nullable
  private Long issueSecurityScheme;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nullable
  private String key;

  public static final String SERIALIZED_NAME_LEAD = "lead";
  @SerializedName(SERIALIZED_NAME_LEAD)
  @javax.annotation.Nullable
  private String lead;

  public static final String SERIALIZED_NAME_LEAD_ACCOUNT_ID = "leadAccountId";
  @SerializedName(SERIALIZED_NAME_LEAD_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String leadAccountId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_NOTIFICATION_SCHEME = "notificationScheme";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_SCHEME)
  @javax.annotation.Nullable
  private Long notificationScheme;

  public static final String SERIALIZED_NAME_PERMISSION_SCHEME = "permissionScheme";
  @SerializedName(SERIALIZED_NAME_PERMISSION_SCHEME)
  @javax.annotation.Nullable
  private Long permissionScheme;

  public static final String SERIALIZED_NAME_RELEASED_PROJECT_KEYS = "releasedProjectKeys";
  @SerializedName(SERIALIZED_NAME_RELEASED_PROJECT_KEYS)
  @javax.annotation.Nullable
  private Set<String> releasedProjectKeys = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nullable
  private String url;

  public UpdateProjectDetails() {
  }

  public UpdateProjectDetails assigneeType(@javax.annotation.Nullable AssigneeTypeEnum assigneeType) {
    this.assigneeType = assigneeType;
    return this;
  }

  /**
   * The default assignee when creating issues for this project.
   * @return assigneeType
   */
  @javax.annotation.Nullable
  public AssigneeTypeEnum getAssigneeType() {
    return assigneeType;
  }

  public void setAssigneeType(@javax.annotation.Nullable AssigneeTypeEnum assigneeType) {
    this.assigneeType = assigneeType;
  }


  public UpdateProjectDetails avatarId(@javax.annotation.Nullable Long avatarId) {
    this.avatarId = avatarId;
    return this;
  }

  /**
   * An integer value for the project&#39;s avatar.
   * @return avatarId
   */
  @javax.annotation.Nullable
  public Long getAvatarId() {
    return avatarId;
  }

  public void setAvatarId(@javax.annotation.Nullable Long avatarId) {
    this.avatarId = avatarId;
  }


  public UpdateProjectDetails categoryId(@javax.annotation.Nullable Long categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * The ID of the project&#39;s category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation. To remove the project category from the project, set the value to &#x60;-1.&#x60;
   * @return categoryId
   */
  @javax.annotation.Nullable
  public Long getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(@javax.annotation.Nullable Long categoryId) {
    this.categoryId = categoryId;
  }


  public UpdateProjectDetails description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * A brief description of the project.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public UpdateProjectDetails issueSecurityScheme(@javax.annotation.Nullable Long issueSecurityScheme) {
    this.issueSecurityScheme = issueSecurityScheme;
    return this;
  }

  /**
   * The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.
   * @return issueSecurityScheme
   */
  @javax.annotation.Nullable
  public Long getIssueSecurityScheme() {
    return issueSecurityScheme;
  }

  public void setIssueSecurityScheme(@javax.annotation.Nullable Long issueSecurityScheme) {
    this.issueSecurityScheme = issueSecurityScheme;
  }


  public UpdateProjectDetails key(@javax.annotation.Nullable String key) {
    this.key = key;
    return this;
  }

  /**
   * Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nullable String key) {
    this.key = key;
  }


  public UpdateProjectDetails lead(@javax.annotation.Nullable String lead) {
    this.lead = lead;
    return this;
  }

  /**
   * This parameter is deprecated because of privacy changes. Use &#x60;leadAccountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Cannot be provided with &#x60;leadAccountId&#x60;.
   * @return lead
   */
  @javax.annotation.Nullable
  public String getLead() {
    return lead;
  }

  public void setLead(@javax.annotation.Nullable String lead) {
    this.lead = lead;
  }


  public UpdateProjectDetails leadAccountId(@javax.annotation.Nullable String leadAccountId) {
    this.leadAccountId = leadAccountId;
    return this;
  }

  /**
   * The account ID of the project lead. Cannot be provided with &#x60;lead&#x60;.
   * @return leadAccountId
   */
  @javax.annotation.Nullable
  public String getLeadAccountId() {
    return leadAccountId;
  }

  public void setLeadAccountId(@javax.annotation.Nullable String leadAccountId) {
    this.leadAccountId = leadAccountId;
  }


  public UpdateProjectDetails name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the project.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public UpdateProjectDetails notificationScheme(@javax.annotation.Nullable Long notificationScheme) {
    this.notificationScheme = notificationScheme;
    return this;
  }

  /**
   * The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.
   * @return notificationScheme
   */
  @javax.annotation.Nullable
  public Long getNotificationScheme() {
    return notificationScheme;
  }

  public void setNotificationScheme(@javax.annotation.Nullable Long notificationScheme) {
    this.notificationScheme = notificationScheme;
  }


  public UpdateProjectDetails permissionScheme(@javax.annotation.Nullable Long permissionScheme) {
    this.permissionScheme = permissionScheme;
    return this;
  }

  /**
   * The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.
   * @return permissionScheme
   */
  @javax.annotation.Nullable
  public Long getPermissionScheme() {
    return permissionScheme;
  }

  public void setPermissionScheme(@javax.annotation.Nullable Long permissionScheme) {
    this.permissionScheme = permissionScheme;
  }


  public UpdateProjectDetails releasedProjectKeys(@javax.annotation.Nullable Set<String> releasedProjectKeys) {
    this.releasedProjectKeys = releasedProjectKeys;
    return this;
  }

  public UpdateProjectDetails addReleasedProjectKeysItem(String releasedProjectKeysItem) {
    if (this.releasedProjectKeys == null) {
      this.releasedProjectKeys = new LinkedHashSet<>();
    }
    this.releasedProjectKeys.add(releasedProjectKeysItem);
    return this;
  }

  /**
   * Previous project keys to be released from the current project. Released keys must belong to the current project and not contain the current project key
   * @return releasedProjectKeys
   */
  @javax.annotation.Nullable
  public Set<String> getReleasedProjectKeys() {
    return releasedProjectKeys;
  }

  public void setReleasedProjectKeys(@javax.annotation.Nullable Set<String> releasedProjectKeys) {
    this.releasedProjectKeys = releasedProjectKeys;
  }


  public UpdateProjectDetails url(@javax.annotation.Nullable String url) {
    this.url = url;
    return this;
  }

  /**
   * A link to information about this project, such as project documentation
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nullable String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateProjectDetails updateProjectDetails = (UpdateProjectDetails) o;
    return Objects.equals(this.assigneeType, updateProjectDetails.assigneeType) &&
        Objects.equals(this.avatarId, updateProjectDetails.avatarId) &&
        Objects.equals(this.categoryId, updateProjectDetails.categoryId) &&
        Objects.equals(this.description, updateProjectDetails.description) &&
        Objects.equals(this.issueSecurityScheme, updateProjectDetails.issueSecurityScheme) &&
        Objects.equals(this.key, updateProjectDetails.key) &&
        Objects.equals(this.lead, updateProjectDetails.lead) &&
        Objects.equals(this.leadAccountId, updateProjectDetails.leadAccountId) &&
        Objects.equals(this.name, updateProjectDetails.name) &&
        Objects.equals(this.notificationScheme, updateProjectDetails.notificationScheme) &&
        Objects.equals(this.permissionScheme, updateProjectDetails.permissionScheme) &&
        Objects.equals(this.releasedProjectKeys, updateProjectDetails.releasedProjectKeys) &&
        Objects.equals(this.url, updateProjectDetails.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assigneeType, avatarId, categoryId, description, issueSecurityScheme, key, lead, leadAccountId, name, notificationScheme, permissionScheme, releasedProjectKeys, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateProjectDetails {\n");
    sb.append("    assigneeType: ").append(toIndentedString(assigneeType)).append("\n");
    sb.append("    avatarId: ").append(toIndentedString(avatarId)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    issueSecurityScheme: ").append(toIndentedString(issueSecurityScheme)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    lead: ").append(toIndentedString(lead)).append("\n");
    sb.append("    leadAccountId: ").append(toIndentedString(leadAccountId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notificationScheme: ").append(toIndentedString(notificationScheme)).append("\n");
    sb.append("    permissionScheme: ").append(toIndentedString(permissionScheme)).append("\n");
    sb.append("    releasedProjectKeys: ").append(toIndentedString(releasedProjectKeys)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assigneeType");
    openapiFields.add("avatarId");
    openapiFields.add("categoryId");
    openapiFields.add("description");
    openapiFields.add("issueSecurityScheme");
    openapiFields.add("key");
    openapiFields.add("lead");
    openapiFields.add("leadAccountId");
    openapiFields.add("name");
    openapiFields.add("notificationScheme");
    openapiFields.add("permissionScheme");
    openapiFields.add("releasedProjectKeys");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateProjectDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateProjectDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateProjectDetails is not found in the empty JSON string", UpdateProjectDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateProjectDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateProjectDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("assigneeType") != null && !jsonObj.get("assigneeType").isJsonNull()) && !jsonObj.get("assigneeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assigneeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigneeType").toString()));
      }
      // validate the optional field `assigneeType`
      if (jsonObj.get("assigneeType") != null && !jsonObj.get("assigneeType").isJsonNull()) {
        AssigneeTypeEnum.validateJsonElement(jsonObj.get("assigneeType"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("lead") != null && !jsonObj.get("lead").isJsonNull()) && !jsonObj.get("lead").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lead` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lead").toString()));
      }
      if ((jsonObj.get("leadAccountId") != null && !jsonObj.get("leadAccountId").isJsonNull()) && !jsonObj.get("leadAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leadAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leadAccountId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("releasedProjectKeys") != null && !jsonObj.get("releasedProjectKeys").isJsonNull() && !jsonObj.get("releasedProjectKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `releasedProjectKeys` to be an array in the JSON string but got `%s`", jsonObj.get("releasedProjectKeys").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateProjectDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateProjectDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateProjectDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateProjectDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateProjectDetails>() {
           @Override
           public void write(JsonWriter out, UpdateProjectDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateProjectDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateProjectDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateProjectDetails
   * @throws IOException if the JSON string is invalid with respect to UpdateProjectDetails
   */
  public static UpdateProjectDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateProjectDetails.class);
  }

  /**
   * Convert an instance of UpdateProjectDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

