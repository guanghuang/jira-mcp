/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.Application;
import com.atlassian.jira.platform.model.RemoteObject;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * Details of an issue remote link.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class RemoteIssueLink {
  public static final String SERIALIZED_NAME_APPLICATION = "application";
  @SerializedName(SERIALIZED_NAME_APPLICATION)
  @javax.annotation.Nullable
  private Application application;

  public static final String SERIALIZED_NAME_GLOBAL_ID = "globalId";
  @SerializedName(SERIALIZED_NAME_GLOBAL_ID)
  @javax.annotation.Nullable
  private String globalId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Long id;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  @javax.annotation.Nullable
  private RemoteObject _object;

  public static final String SERIALIZED_NAME_RELATIONSHIP = "relationship";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP)
  @javax.annotation.Nullable
  private String relationship;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  @javax.annotation.Nullable
  private URI self;

  public RemoteIssueLink() {
  }

  public RemoteIssueLink application(@javax.annotation.Nullable Application application) {
    this.application = application;
    return this;
  }

  /**
   * Details of the remote application the linked item is in.
   * @return application
   */
  @javax.annotation.Nullable
  public Application getApplication() {
    return application;
  }

  public void setApplication(@javax.annotation.Nullable Application application) {
    this.application = application;
  }


  public RemoteIssueLink globalId(@javax.annotation.Nullable String globalId) {
    this.globalId = globalId;
    return this;
  }

  /**
   * The global ID of the link, such as the ID of the item on the remote system.
   * @return globalId
   */
  @javax.annotation.Nullable
  public String getGlobalId() {
    return globalId;
  }

  public void setGlobalId(@javax.annotation.Nullable String globalId) {
    this.globalId = globalId;
  }


  public RemoteIssueLink id(@javax.annotation.Nullable Long id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the link.
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Long id) {
    this.id = id;
  }


  public RemoteIssueLink _object(@javax.annotation.Nullable RemoteObject _object) {
    this._object = _object;
    return this;
  }

  /**
   * Details of the item linked to.
   * @return _object
   */
  @javax.annotation.Nullable
  public RemoteObject getObject() {
    return _object;
  }

  public void setObject(@javax.annotation.Nullable RemoteObject _object) {
    this._object = _object;
  }


  public RemoteIssueLink relationship(@javax.annotation.Nullable String relationship) {
    this.relationship = relationship;
    return this;
  }

  /**
   * Description of the relationship between the issue and the linked item.
   * @return relationship
   */
  @javax.annotation.Nullable
  public String getRelationship() {
    return relationship;
  }

  public void setRelationship(@javax.annotation.Nullable String relationship) {
    this.relationship = relationship;
  }


  public RemoteIssueLink self(@javax.annotation.Nullable URI self) {
    this.self = self;
    return this;
  }

  /**
   * The URL of the link.
   * @return self
   */
  @javax.annotation.Nullable
  public URI getSelf() {
    return self;
  }

  public void setSelf(@javax.annotation.Nullable URI self) {
    this.self = self;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoteIssueLink remoteIssueLink = (RemoteIssueLink) o;
    return Objects.equals(this.application, remoteIssueLink.application) &&
        Objects.equals(this.globalId, remoteIssueLink.globalId) &&
        Objects.equals(this.id, remoteIssueLink.id) &&
        Objects.equals(this._object, remoteIssueLink._object) &&
        Objects.equals(this.relationship, remoteIssueLink.relationship) &&
        Objects.equals(this.self, remoteIssueLink.self);
  }

  @Override
  public int hashCode() {
    return Objects.hash(application, globalId, id, _object, relationship, self);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoteIssueLink {\n");
    sb.append("    application: ").append(toIndentedString(application)).append("\n");
    sb.append("    globalId: ").append(toIndentedString(globalId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    relationship: ").append(toIndentedString(relationship)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("application");
    openapiFields.add("globalId");
    openapiFields.add("id");
    openapiFields.add("object");
    openapiFields.add("relationship");
    openapiFields.add("self");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RemoteIssueLink
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RemoteIssueLink.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RemoteIssueLink is not found in the empty JSON string", RemoteIssueLink.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RemoteIssueLink.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RemoteIssueLink` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("globalId") != null && !jsonObj.get("globalId").isJsonNull()) && !jsonObj.get("globalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `globalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("globalId").toString()));
      }
      if ((jsonObj.get("relationship") != null && !jsonObj.get("relationship").isJsonNull()) && !jsonObj.get("relationship").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationship` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationship").toString()));
      }
      if ((jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) && !jsonObj.get("self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("self").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RemoteIssueLink.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RemoteIssueLink' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RemoteIssueLink> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RemoteIssueLink.class));

       return (TypeAdapter<T>) new TypeAdapter<RemoteIssueLink>() {
           @Override
           public void write(JsonWriter out, RemoteIssueLink value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RemoteIssueLink read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RemoteIssueLink given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RemoteIssueLink
   * @throws IOException if the JSON string is invalid with respect to RemoteIssueLink
   */
  public static RemoteIssueLink fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RemoteIssueLink.class);
  }

  /**
   * Convert an instance of RemoteIssueLink to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

