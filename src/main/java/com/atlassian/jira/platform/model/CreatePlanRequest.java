/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.CreateCrossProjectReleaseRequest;
import com.atlassian.jira.platform.model.CreateCustomFieldRequest;
import com.atlassian.jira.platform.model.CreateExclusionRulesRequest;
import com.atlassian.jira.platform.model.CreateIssueSourceRequest;
import com.atlassian.jira.platform.model.CreatePermissionRequest;
import com.atlassian.jira.platform.model.CreateSchedulingRequest;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * CreatePlanRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class CreatePlanRequest {
  public static final String SERIALIZED_NAME_CROSS_PROJECT_RELEASES = "crossProjectReleases";
  @SerializedName(SERIALIZED_NAME_CROSS_PROJECT_RELEASES)
  @javax.annotation.Nullable
  private Set<CreateCrossProjectReleaseRequest> crossProjectReleases = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  @javax.annotation.Nullable
  private Set<CreateCustomFieldRequest> customFields = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_EXCLUSION_RULES = "exclusionRules";
  @SerializedName(SERIALIZED_NAME_EXCLUSION_RULES)
  @javax.annotation.Nullable
  private CreateExclusionRulesRequest exclusionRules;

  public static final String SERIALIZED_NAME_ISSUE_SOURCES = "issueSources";
  @SerializedName(SERIALIZED_NAME_ISSUE_SOURCES)
  @javax.annotation.Nonnull
  private Set<CreateIssueSourceRequest> issueSources = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_LEAD_ACCOUNT_ID = "leadAccountId";
  @SerializedName(SERIALIZED_NAME_LEAD_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String leadAccountId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  @javax.annotation.Nullable
  private Set<CreatePermissionRequest> permissions = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_SCHEDULING = "scheduling";
  @SerializedName(SERIALIZED_NAME_SCHEDULING)
  @javax.annotation.Nonnull
  private CreateSchedulingRequest scheduling;

  public CreatePlanRequest() {
  }

  public CreatePlanRequest crossProjectReleases(@javax.annotation.Nullable Set<CreateCrossProjectReleaseRequest> crossProjectReleases) {
    this.crossProjectReleases = crossProjectReleases;
    return this;
  }

  public CreatePlanRequest addCrossProjectReleasesItem(CreateCrossProjectReleaseRequest crossProjectReleasesItem) {
    if (this.crossProjectReleases == null) {
      this.crossProjectReleases = new LinkedHashSet<>();
    }
    this.crossProjectReleases.add(crossProjectReleasesItem);
    return this;
  }

  /**
   * The cross-project releases to include in the plan.
   * @return crossProjectReleases
   */
  @javax.annotation.Nullable
  public Set<CreateCrossProjectReleaseRequest> getCrossProjectReleases() {
    return crossProjectReleases;
  }

  public void setCrossProjectReleases(@javax.annotation.Nullable Set<CreateCrossProjectReleaseRequest> crossProjectReleases) {
    this.crossProjectReleases = crossProjectReleases;
  }


  public CreatePlanRequest customFields(@javax.annotation.Nullable Set<CreateCustomFieldRequest> customFields) {
    this.customFields = customFields;
    return this;
  }

  public CreatePlanRequest addCustomFieldsItem(CreateCustomFieldRequest customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new LinkedHashSet<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

  /**
   * The custom fields for the plan.
   * @return customFields
   */
  @javax.annotation.Nullable
  public Set<CreateCustomFieldRequest> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(@javax.annotation.Nullable Set<CreateCustomFieldRequest> customFields) {
    this.customFields = customFields;
  }


  public CreatePlanRequest exclusionRules(@javax.annotation.Nullable CreateExclusionRulesRequest exclusionRules) {
    this.exclusionRules = exclusionRules;
    return this;
  }

  /**
   * The exclusion rules for the plan.
   * @return exclusionRules
   */
  @javax.annotation.Nullable
  public CreateExclusionRulesRequest getExclusionRules() {
    return exclusionRules;
  }

  public void setExclusionRules(@javax.annotation.Nullable CreateExclusionRulesRequest exclusionRules) {
    this.exclusionRules = exclusionRules;
  }


  public CreatePlanRequest issueSources(@javax.annotation.Nonnull Set<CreateIssueSourceRequest> issueSources) {
    this.issueSources = issueSources;
    return this;
  }

  public CreatePlanRequest addIssueSourcesItem(CreateIssueSourceRequest issueSourcesItem) {
    if (this.issueSources == null) {
      this.issueSources = new LinkedHashSet<>();
    }
    this.issueSources.add(issueSourcesItem);
    return this;
  }

  /**
   * The issue sources to include in the plan.
   * @return issueSources
   */
  @javax.annotation.Nonnull
  public Set<CreateIssueSourceRequest> getIssueSources() {
    return issueSources;
  }

  public void setIssueSources(@javax.annotation.Nonnull Set<CreateIssueSourceRequest> issueSources) {
    this.issueSources = issueSources;
  }


  public CreatePlanRequest leadAccountId(@javax.annotation.Nullable String leadAccountId) {
    this.leadAccountId = leadAccountId;
    return this;
  }

  /**
   * The account ID of the plan lead.
   * @return leadAccountId
   */
  @javax.annotation.Nullable
  public String getLeadAccountId() {
    return leadAccountId;
  }

  public void setLeadAccountId(@javax.annotation.Nullable String leadAccountId) {
    this.leadAccountId = leadAccountId;
  }


  public CreatePlanRequest name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The plan name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public CreatePlanRequest permissions(@javax.annotation.Nullable Set<CreatePermissionRequest> permissions) {
    this.permissions = permissions;
    return this;
  }

  public CreatePlanRequest addPermissionsItem(CreatePermissionRequest permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new LinkedHashSet<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

  /**
   * The permissions for the plan.
   * @return permissions
   */
  @javax.annotation.Nullable
  public Set<CreatePermissionRequest> getPermissions() {
    return permissions;
  }

  public void setPermissions(@javax.annotation.Nullable Set<CreatePermissionRequest> permissions) {
    this.permissions = permissions;
  }


  public CreatePlanRequest scheduling(@javax.annotation.Nonnull CreateSchedulingRequest scheduling) {
    this.scheduling = scheduling;
    return this;
  }

  /**
   * The scheduling settings for the plan.
   * @return scheduling
   */
  @javax.annotation.Nonnull
  public CreateSchedulingRequest getScheduling() {
    return scheduling;
  }

  public void setScheduling(@javax.annotation.Nonnull CreateSchedulingRequest scheduling) {
    this.scheduling = scheduling;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePlanRequest createPlanRequest = (CreatePlanRequest) o;
    return Objects.equals(this.crossProjectReleases, createPlanRequest.crossProjectReleases) &&
        Objects.equals(this.customFields, createPlanRequest.customFields) &&
        Objects.equals(this.exclusionRules, createPlanRequest.exclusionRules) &&
        Objects.equals(this.issueSources, createPlanRequest.issueSources) &&
        Objects.equals(this.leadAccountId, createPlanRequest.leadAccountId) &&
        Objects.equals(this.name, createPlanRequest.name) &&
        Objects.equals(this.permissions, createPlanRequest.permissions) &&
        Objects.equals(this.scheduling, createPlanRequest.scheduling);
  }

  @Override
  public int hashCode() {
    return Objects.hash(crossProjectReleases, customFields, exclusionRules, issueSources, leadAccountId, name, permissions, scheduling);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePlanRequest {\n");
    sb.append("    crossProjectReleases: ").append(toIndentedString(crossProjectReleases)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    exclusionRules: ").append(toIndentedString(exclusionRules)).append("\n");
    sb.append("    issueSources: ").append(toIndentedString(issueSources)).append("\n");
    sb.append("    leadAccountId: ").append(toIndentedString(leadAccountId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    scheduling: ").append(toIndentedString(scheduling)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("crossProjectReleases");
    openapiFields.add("customFields");
    openapiFields.add("exclusionRules");
    openapiFields.add("issueSources");
    openapiFields.add("leadAccountId");
    openapiFields.add("name");
    openapiFields.add("permissions");
    openapiFields.add("scheduling");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("issueSources");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("scheduling");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreatePlanRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreatePlanRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreatePlanRequest is not found in the empty JSON string", CreatePlanRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreatePlanRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreatePlanRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreatePlanRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("crossProjectReleases") != null && !jsonObj.get("crossProjectReleases").isJsonNull()) {
        JsonArray jsonArraycrossProjectReleases = jsonObj.getAsJsonArray("crossProjectReleases");
        if (jsonArraycrossProjectReleases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("crossProjectReleases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `crossProjectReleases` to be an array in the JSON string but got `%s`", jsonObj.get("crossProjectReleases").toString()));
          }

          // validate the optional field `crossProjectReleases` (array)
          for (int i = 0; i < jsonArraycrossProjectReleases.size(); i++) {
            CreateCrossProjectReleaseRequest.validateJsonElement(jsonArraycrossProjectReleases.get(i));
          };
        }
      }
      if (jsonObj.get("customFields") != null && !jsonObj.get("customFields").isJsonNull()) {
        JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("customFields");
        if (jsonArraycustomFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customFields` to be an array in the JSON string but got `%s`", jsonObj.get("customFields").toString()));
          }

          // validate the optional field `customFields` (array)
          for (int i = 0; i < jsonArraycustomFields.size(); i++) {
            CreateCustomFieldRequest.validateJsonElement(jsonArraycustomFields.get(i));
          };
        }
      }
      // validate the optional field `exclusionRules`
      if (jsonObj.get("exclusionRules") != null && !jsonObj.get("exclusionRules").isJsonNull()) {
        CreateExclusionRulesRequest.validateJsonElement(jsonObj.get("exclusionRules"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("issueSources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueSources` to be an array in the JSON string but got `%s`", jsonObj.get("issueSources").toString()));
      }

      JsonArray jsonArrayissueSources = jsonObj.getAsJsonArray("issueSources");
      // validate the required field `issueSources` (array)
      for (int i = 0; i < jsonArrayissueSources.size(); i++) {
        CreateIssueSourceRequest.validateJsonElement(jsonArrayissueSources.get(i));
      };
      if ((jsonObj.get("leadAccountId") != null && !jsonObj.get("leadAccountId").isJsonNull()) && !jsonObj.get("leadAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leadAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leadAccountId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        JsonArray jsonArraypermissions = jsonObj.getAsJsonArray("permissions");
        if (jsonArraypermissions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("permissions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
          }

          // validate the optional field `permissions` (array)
          for (int i = 0; i < jsonArraypermissions.size(); i++) {
            CreatePermissionRequest.validateJsonElement(jsonArraypermissions.get(i));
          };
        }
      }
      // validate the required field `scheduling`
      CreateSchedulingRequest.validateJsonElement(jsonObj.get("scheduling"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreatePlanRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreatePlanRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreatePlanRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreatePlanRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreatePlanRequest>() {
           @Override
           public void write(JsonWriter out, CreatePlanRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreatePlanRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreatePlanRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreatePlanRequest
   * @throws IOException if the JSON string is invalid with respect to CreatePlanRequest
   */
  public static CreatePlanRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatePlanRequest.class);
  }

  /**
   * Convert an instance of CreatePlanRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

