/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.AvailableWorkflowConnectRule;
import com.atlassian.jira.platform.model.AvailableWorkflowForgeRule;
import com.atlassian.jira.platform.model.AvailableWorkflowSystemRule;
import com.atlassian.jira.platform.model.AvailableWorkflowTriggers;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * WorkflowCapabilities
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class WorkflowCapabilities {
  public static final String SERIALIZED_NAME_CONNECT_RULES = "connectRules";
  @SerializedName(SERIALIZED_NAME_CONNECT_RULES)
  @javax.annotation.Nullable
  private List<AvailableWorkflowConnectRule> connectRules = new ArrayList<>();

  /**
   * The scope of the workflow capabilities. &#x60;GLOBAL&#x60; for company-managed projects and &#x60;PROJECT&#x60; for team-managed projects.
   */
  @JsonAdapter(EditorScopeEnum.Adapter.class)
  public enum EditorScopeEnum {
    PROJECT("PROJECT"),
    
    GLOBAL("GLOBAL");

    private String value;

    EditorScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EditorScopeEnum fromValue(String value) {
      for (EditorScopeEnum b : EditorScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EditorScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EditorScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EditorScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EditorScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EditorScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EDITOR_SCOPE = "editorScope";
  @SerializedName(SERIALIZED_NAME_EDITOR_SCOPE)
  @javax.annotation.Nullable
  private EditorScopeEnum editorScope;

  public static final String SERIALIZED_NAME_FORGE_RULES = "forgeRules";
  @SerializedName(SERIALIZED_NAME_FORGE_RULES)
  @javax.annotation.Nullable
  private List<AvailableWorkflowForgeRule> forgeRules = new ArrayList<>();

  /**
   * Gets or Sets projectTypes
   */
  @JsonAdapter(ProjectTypesEnum.Adapter.class)
  public enum ProjectTypesEnum {
    SOFTWARE("software"),
    
    SERVICE_DESK("service_desk"),
    
    PRODUCT_DISCOVERY("product_discovery"),
    
    BUSINESS("business"),
    
    UNKNOWN("unknown");

    private String value;

    ProjectTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProjectTypesEnum fromValue(String value) {
      for (ProjectTypesEnum b : ProjectTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProjectTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProjectTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProjectTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProjectTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProjectTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROJECT_TYPES = "projectTypes";
  @SerializedName(SERIALIZED_NAME_PROJECT_TYPES)
  @javax.annotation.Nullable
  private List<ProjectTypesEnum> projectTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SYSTEM_RULES = "systemRules";
  @SerializedName(SERIALIZED_NAME_SYSTEM_RULES)
  @javax.annotation.Nullable
  private List<AvailableWorkflowSystemRule> systemRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRIGGER_RULES = "triggerRules";
  @SerializedName(SERIALIZED_NAME_TRIGGER_RULES)
  @javax.annotation.Nullable
  private List<AvailableWorkflowTriggers> triggerRules = new ArrayList<>();

  public WorkflowCapabilities() {
  }

  public WorkflowCapabilities connectRules(@javax.annotation.Nullable List<AvailableWorkflowConnectRule> connectRules) {
    this.connectRules = connectRules;
    return this;
  }

  public WorkflowCapabilities addConnectRulesItem(AvailableWorkflowConnectRule connectRulesItem) {
    if (this.connectRules == null) {
      this.connectRules = new ArrayList<>();
    }
    this.connectRules.add(connectRulesItem);
    return this;
  }

  /**
   * The Connect provided ecosystem rules available.
   * @return connectRules
   */
  @javax.annotation.Nullable
  public List<AvailableWorkflowConnectRule> getConnectRules() {
    return connectRules;
  }

  public void setConnectRules(@javax.annotation.Nullable List<AvailableWorkflowConnectRule> connectRules) {
    this.connectRules = connectRules;
  }


  public WorkflowCapabilities editorScope(@javax.annotation.Nullable EditorScopeEnum editorScope) {
    this.editorScope = editorScope;
    return this;
  }

  /**
   * The scope of the workflow capabilities. &#x60;GLOBAL&#x60; for company-managed projects and &#x60;PROJECT&#x60; for team-managed projects.
   * @return editorScope
   */
  @javax.annotation.Nullable
  public EditorScopeEnum getEditorScope() {
    return editorScope;
  }

  public void setEditorScope(@javax.annotation.Nullable EditorScopeEnum editorScope) {
    this.editorScope = editorScope;
  }


  public WorkflowCapabilities forgeRules(@javax.annotation.Nullable List<AvailableWorkflowForgeRule> forgeRules) {
    this.forgeRules = forgeRules;
    return this;
  }

  public WorkflowCapabilities addForgeRulesItem(AvailableWorkflowForgeRule forgeRulesItem) {
    if (this.forgeRules == null) {
      this.forgeRules = new ArrayList<>();
    }
    this.forgeRules.add(forgeRulesItem);
    return this;
  }

  /**
   * The Forge provided ecosystem rules available.
   * @return forgeRules
   */
  @javax.annotation.Nullable
  public List<AvailableWorkflowForgeRule> getForgeRules() {
    return forgeRules;
  }

  public void setForgeRules(@javax.annotation.Nullable List<AvailableWorkflowForgeRule> forgeRules) {
    this.forgeRules = forgeRules;
  }


  public WorkflowCapabilities projectTypes(@javax.annotation.Nullable List<ProjectTypesEnum> projectTypes) {
    this.projectTypes = projectTypes;
    return this;
  }

  public WorkflowCapabilities addProjectTypesItem(ProjectTypesEnum projectTypesItem) {
    if (this.projectTypes == null) {
      this.projectTypes = new ArrayList<>();
    }
    this.projectTypes.add(projectTypesItem);
    return this;
  }

  /**
   * The types of projects that this capability set is available for.
   * @return projectTypes
   */
  @javax.annotation.Nullable
  public List<ProjectTypesEnum> getProjectTypes() {
    return projectTypes;
  }

  public void setProjectTypes(@javax.annotation.Nullable List<ProjectTypesEnum> projectTypes) {
    this.projectTypes = projectTypes;
  }


  public WorkflowCapabilities systemRules(@javax.annotation.Nullable List<AvailableWorkflowSystemRule> systemRules) {
    this.systemRules = systemRules;
    return this;
  }

  public WorkflowCapabilities addSystemRulesItem(AvailableWorkflowSystemRule systemRulesItem) {
    if (this.systemRules == null) {
      this.systemRules = new ArrayList<>();
    }
    this.systemRules.add(systemRulesItem);
    return this;
  }

  /**
   * The Atlassian provided system rules available.
   * @return systemRules
   */
  @javax.annotation.Nullable
  public List<AvailableWorkflowSystemRule> getSystemRules() {
    return systemRules;
  }

  public void setSystemRules(@javax.annotation.Nullable List<AvailableWorkflowSystemRule> systemRules) {
    this.systemRules = systemRules;
  }


  public WorkflowCapabilities triggerRules(@javax.annotation.Nullable List<AvailableWorkflowTriggers> triggerRules) {
    this.triggerRules = triggerRules;
    return this;
  }

  public WorkflowCapabilities addTriggerRulesItem(AvailableWorkflowTriggers triggerRulesItem) {
    if (this.triggerRules == null) {
      this.triggerRules = new ArrayList<>();
    }
    this.triggerRules.add(triggerRulesItem);
    return this;
  }

  /**
   * The trigger rules available.
   * @return triggerRules
   */
  @javax.annotation.Nullable
  public List<AvailableWorkflowTriggers> getTriggerRules() {
    return triggerRules;
  }

  public void setTriggerRules(@javax.annotation.Nullable List<AvailableWorkflowTriggers> triggerRules) {
    this.triggerRules = triggerRules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowCapabilities workflowCapabilities = (WorkflowCapabilities) o;
    return Objects.equals(this.connectRules, workflowCapabilities.connectRules) &&
        Objects.equals(this.editorScope, workflowCapabilities.editorScope) &&
        Objects.equals(this.forgeRules, workflowCapabilities.forgeRules) &&
        Objects.equals(this.projectTypes, workflowCapabilities.projectTypes) &&
        Objects.equals(this.systemRules, workflowCapabilities.systemRules) &&
        Objects.equals(this.triggerRules, workflowCapabilities.triggerRules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectRules, editorScope, forgeRules, projectTypes, systemRules, triggerRules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowCapabilities {\n");
    sb.append("    connectRules: ").append(toIndentedString(connectRules)).append("\n");
    sb.append("    editorScope: ").append(toIndentedString(editorScope)).append("\n");
    sb.append("    forgeRules: ").append(toIndentedString(forgeRules)).append("\n");
    sb.append("    projectTypes: ").append(toIndentedString(projectTypes)).append("\n");
    sb.append("    systemRules: ").append(toIndentedString(systemRules)).append("\n");
    sb.append("    triggerRules: ").append(toIndentedString(triggerRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectRules");
    openapiFields.add("editorScope");
    openapiFields.add("forgeRules");
    openapiFields.add("projectTypes");
    openapiFields.add("systemRules");
    openapiFields.add("triggerRules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowCapabilities
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowCapabilities.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowCapabilities is not found in the empty JSON string", WorkflowCapabilities.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowCapabilities.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowCapabilities` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("connectRules") != null && !jsonObj.get("connectRules").isJsonNull()) {
        JsonArray jsonArrayconnectRules = jsonObj.getAsJsonArray("connectRules");
        if (jsonArrayconnectRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("connectRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `connectRules` to be an array in the JSON string but got `%s`", jsonObj.get("connectRules").toString()));
          }

          // validate the optional field `connectRules` (array)
          for (int i = 0; i < jsonArrayconnectRules.size(); i++) {
            AvailableWorkflowConnectRule.validateJsonElement(jsonArrayconnectRules.get(i));
          };
        }
      }
      if ((jsonObj.get("editorScope") != null && !jsonObj.get("editorScope").isJsonNull()) && !jsonObj.get("editorScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editorScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editorScope").toString()));
      }
      // validate the optional field `editorScope`
      if (jsonObj.get("editorScope") != null && !jsonObj.get("editorScope").isJsonNull()) {
        EditorScopeEnum.validateJsonElement(jsonObj.get("editorScope"));
      }
      if (jsonObj.get("forgeRules") != null && !jsonObj.get("forgeRules").isJsonNull()) {
        JsonArray jsonArrayforgeRules = jsonObj.getAsJsonArray("forgeRules");
        if (jsonArrayforgeRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("forgeRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `forgeRules` to be an array in the JSON string but got `%s`", jsonObj.get("forgeRules").toString()));
          }

          // validate the optional field `forgeRules` (array)
          for (int i = 0; i < jsonArrayforgeRules.size(); i++) {
            AvailableWorkflowForgeRule.validateJsonElement(jsonArrayforgeRules.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("projectTypes") != null && !jsonObj.get("projectTypes").isJsonNull() && !jsonObj.get("projectTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectTypes` to be an array in the JSON string but got `%s`", jsonObj.get("projectTypes").toString()));
      }
      if (jsonObj.get("systemRules") != null && !jsonObj.get("systemRules").isJsonNull()) {
        JsonArray jsonArraysystemRules = jsonObj.getAsJsonArray("systemRules");
        if (jsonArraysystemRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("systemRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `systemRules` to be an array in the JSON string but got `%s`", jsonObj.get("systemRules").toString()));
          }

          // validate the optional field `systemRules` (array)
          for (int i = 0; i < jsonArraysystemRules.size(); i++) {
            AvailableWorkflowSystemRule.validateJsonElement(jsonArraysystemRules.get(i));
          };
        }
      }
      if (jsonObj.get("triggerRules") != null && !jsonObj.get("triggerRules").isJsonNull()) {
        JsonArray jsonArraytriggerRules = jsonObj.getAsJsonArray("triggerRules");
        if (jsonArraytriggerRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("triggerRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `triggerRules` to be an array in the JSON string but got `%s`", jsonObj.get("triggerRules").toString()));
          }

          // validate the optional field `triggerRules` (array)
          for (int i = 0; i < jsonArraytriggerRules.size(); i++) {
            AvailableWorkflowTriggers.validateJsonElement(jsonArraytriggerRules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowCapabilities.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowCapabilities' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowCapabilities> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowCapabilities.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowCapabilities>() {
           @Override
           public void write(JsonWriter out, WorkflowCapabilities value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowCapabilities read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowCapabilities given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowCapabilities
   * @throws IOException if the JSON string is invalid with respect to WorkflowCapabilities
   */
  public static WorkflowCapabilities fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowCapabilities.class);
  }

  /**
   * Convert an instance of WorkflowCapabilities to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

