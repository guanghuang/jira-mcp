/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.model;

import java.util.Objects;
import com.atlassian.jira.platform.model.PriorityMapping;
import com.atlassian.jira.platform.model.UpdatePrioritiesInSchemeRequestBean;
import com.atlassian.jira.platform.model.UpdateProjectsInSchemeRequestBean;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * Details of a priority scheme.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T17:36:18.838627-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class UpdatePrioritySchemeRequestBean {
  public static final String SERIALIZED_NAME_DEFAULT_PRIORITY_ID = "defaultPriorityId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PRIORITY_ID)
  @javax.annotation.Nullable
  private Long defaultPriorityId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_MAPPINGS = "mappings";
  @SerializedName(SERIALIZED_NAME_MAPPINGS)
  @javax.annotation.Nullable
  private PriorityMapping mappings;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_PRIORITIES = "priorities";
  @SerializedName(SERIALIZED_NAME_PRIORITIES)
  @javax.annotation.Nullable
  private UpdatePrioritiesInSchemeRequestBean priorities;

  public static final String SERIALIZED_NAME_PROJECTS = "projects";
  @SerializedName(SERIALIZED_NAME_PROJECTS)
  @javax.annotation.Nullable
  private UpdateProjectsInSchemeRequestBean projects;

  public UpdatePrioritySchemeRequestBean() {
  }

  public UpdatePrioritySchemeRequestBean defaultPriorityId(@javax.annotation.Nullable Long defaultPriorityId) {
    this.defaultPriorityId = defaultPriorityId;
    return this;
  }

  /**
   * The default priority of the scheme.
   * @return defaultPriorityId
   */
  @javax.annotation.Nullable
  public Long getDefaultPriorityId() {
    return defaultPriorityId;
  }

  public void setDefaultPriorityId(@javax.annotation.Nullable Long defaultPriorityId) {
    this.defaultPriorityId = defaultPriorityId;
  }


  public UpdatePrioritySchemeRequestBean description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the priority scheme.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public UpdatePrioritySchemeRequestBean mappings(@javax.annotation.Nullable PriorityMapping mappings) {
    this.mappings = mappings;
    return this;
  }

  /**
   * Instructions to migrate the priorities of issues.  &#x60;in&#x60; mappings are used to migrate the priorities of issues to priorities used within the priority scheme.  &#x60;out&#x60; mappings are used to migrate the priorities of issues to priorities not used within the priority scheme.   *  When **priorities** are **added** to the priority scheme, no mapping needs to be provided as the new priorities are not used by any issues.  *  When **priorities** are **removed** from the priority scheme, issues that are using those priorities must be migrated to new priorities used by the priority scheme.           *  An &#x60;in&#x60; mapping must be provided for each of these priorities.  *  When **projects** are **added** to the priority scheme, the priorities of issues in those projects might need to be migrated to new priorities used by the priority scheme. This can occur when the current scheme does not use all the priorities in the project(s)&#39; priority scheme(s).           *  An &#x60;in&#x60; mapping must be provided for each of these priorities.  *  When **projects** are **removed** from the priority scheme, the priorities of issues in those projects might need to be migrated to new priorities within the **Default Priority Scheme** that are not used by the priority scheme. This can occur when the **Default Priority Scheme** does not use all the priorities within the current scheme.           *  An &#x60;out&#x60; mapping must be provided for each of these priorities.  For more information on &#x60;in&#x60; and &#x60;out&#x60; mappings, see the child properties documentation for the &#x60;PriorityMapping&#x60; object below.
   * @return mappings
   */
  @javax.annotation.Nullable
  public PriorityMapping getMappings() {
    return mappings;
  }

  public void setMappings(@javax.annotation.Nullable PriorityMapping mappings) {
    this.mappings = mappings;
  }


  public UpdatePrioritySchemeRequestBean name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the priority scheme. Must be unique.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public UpdatePrioritySchemeRequestBean priorities(@javax.annotation.Nullable UpdatePrioritiesInSchemeRequestBean priorities) {
    this.priorities = priorities;
    return this;
  }

  /**
   * The priorities in the scheme.
   * @return priorities
   */
  @javax.annotation.Nullable
  public UpdatePrioritiesInSchemeRequestBean getPriorities() {
    return priorities;
  }

  public void setPriorities(@javax.annotation.Nullable UpdatePrioritiesInSchemeRequestBean priorities) {
    this.priorities = priorities;
  }


  public UpdatePrioritySchemeRequestBean projects(@javax.annotation.Nullable UpdateProjectsInSchemeRequestBean projects) {
    this.projects = projects;
    return this;
  }

  /**
   * The projects in the scheme.
   * @return projects
   */
  @javax.annotation.Nullable
  public UpdateProjectsInSchemeRequestBean getProjects() {
    return projects;
  }

  public void setProjects(@javax.annotation.Nullable UpdateProjectsInSchemeRequestBean projects) {
    this.projects = projects;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePrioritySchemeRequestBean updatePrioritySchemeRequestBean = (UpdatePrioritySchemeRequestBean) o;
    return Objects.equals(this.defaultPriorityId, updatePrioritySchemeRequestBean.defaultPriorityId) &&
        Objects.equals(this.description, updatePrioritySchemeRequestBean.description) &&
        Objects.equals(this.mappings, updatePrioritySchemeRequestBean.mappings) &&
        Objects.equals(this.name, updatePrioritySchemeRequestBean.name) &&
        Objects.equals(this.priorities, updatePrioritySchemeRequestBean.priorities) &&
        Objects.equals(this.projects, updatePrioritySchemeRequestBean.projects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultPriorityId, description, mappings, name, priorities, projects);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePrioritySchemeRequestBean {\n");
    sb.append("    defaultPriorityId: ").append(toIndentedString(defaultPriorityId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    mappings: ").append(toIndentedString(mappings)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    priorities: ").append(toIndentedString(priorities)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultPriorityId");
    openapiFields.add("description");
    openapiFields.add("mappings");
    openapiFields.add("name");
    openapiFields.add("priorities");
    openapiFields.add("projects");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdatePrioritySchemeRequestBean
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePrioritySchemeRequestBean.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePrioritySchemeRequestBean is not found in the empty JSON string", UpdatePrioritySchemeRequestBean.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdatePrioritySchemeRequestBean.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePrioritySchemeRequestBean` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `mappings`
      if (jsonObj.get("mappings") != null && !jsonObj.get("mappings").isJsonNull()) {
        PriorityMapping.validateJsonElement(jsonObj.get("mappings"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePrioritySchemeRequestBean.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePrioritySchemeRequestBean' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePrioritySchemeRequestBean> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePrioritySchemeRequestBean.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePrioritySchemeRequestBean>() {
           @Override
           public void write(JsonWriter out, UpdatePrioritySchemeRequestBean value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePrioritySchemeRequestBean read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdatePrioritySchemeRequestBean given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdatePrioritySchemeRequestBean
   * @throws IOException if the JSON string is invalid with respect to UpdatePrioritySchemeRequestBean
   */
  public static UpdatePrioritySchemeRequestBean fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePrioritySchemeRequestBean.class);
  }

  /**
   * Convert an instance of UpdatePrioritySchemeRequestBean to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

