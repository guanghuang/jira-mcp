/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.api;

import com.atlassian.jira.invoker.ApiCallback;
import com.atlassian.jira.invoker.ApiClient;
import com.atlassian.jira.invoker.ApiException;
import com.atlassian.jira.invoker.ApiResponse;
import com.atlassian.jira.invoker.Configuration;
import com.atlassian.jira.invoker.Pair;
import com.atlassian.jira.invoker.ProgressRequestBody;
import com.atlassian.jira.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.atlassian.jira.platform.model.CreatePlanRequest;
import com.atlassian.jira.platform.model.DuplicatePlanRequest;
import com.atlassian.jira.platform.model.ErrorCollection;
import com.atlassian.jira.platform.model.GetPlanResponse;
import com.atlassian.jira.platform.model.PageWithCursorGetPlanResponseForPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlansApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlansApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlansApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for archivePlan
     * @param planId The ID of the plan. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archivePlanCall(Long planId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/plans/plan/{planId}/archive"
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archivePlanValidateBeforeCall(Long planId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling archivePlan(Async)");
        }

        return archivePlanCall(planId, _callback);

    }

    /**
     * Archive plan
     * Archives a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public Object archivePlan(Long planId) throws ApiException {
        ApiResponse<Object> localVarResp = archivePlanWithHttpInfo(planId);
        return localVarResp.getData();
    }

    /**
     * Archive plan
     * Archives a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> archivePlanWithHttpInfo(Long planId) throws ApiException {
        okhttp3.Call localVarCall = archivePlanValidateBeforeCall(planId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Archive plan (asynchronously)
     * Archives a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archivePlanAsync(Long planId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = archivePlanValidateBeforeCall(planId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPlan
     * @param createPlanRequest  (required)
     * @param useGroupId Whether to accept group IDs instead of group names. Group names are deprecated. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPlanCall(CreatePlanRequest createPlanRequest, Boolean useGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPlanRequest;

        // create path and map variables
        String localVarPath = "/rest/api/3/plans/plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (useGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useGroupId", useGroupId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPlanValidateBeforeCall(CreatePlanRequest createPlanRequest, Boolean useGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createPlanRequest' is set
        if (createPlanRequest == null) {
            throw new ApiException("Missing the required parameter 'createPlanRequest' when calling createPlan(Async)");
        }

        return createPlanCall(createPlanRequest, useGroupId, _callback);

    }

    /**
     * Create plan
     * Creates a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param createPlanRequest  (required)
     * @param useGroupId Whether to accept group IDs instead of group names. Group names are deprecated. (optional, default to false)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
     </table>
     */
    public Long createPlan(CreatePlanRequest createPlanRequest, Boolean useGroupId) throws ApiException {
        ApiResponse<Long> localVarResp = createPlanWithHttpInfo(createPlanRequest, useGroupId);
        return localVarResp.getData();
    }

    /**
     * Create plan
     * Creates a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param createPlanRequest  (required)
     * @param useGroupId Whether to accept group IDs instead of group names. Group names are deprecated. (optional, default to false)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Long> createPlanWithHttpInfo(CreatePlanRequest createPlanRequest, Boolean useGroupId) throws ApiException {
        okhttp3.Call localVarCall = createPlanValidateBeforeCall(createPlanRequest, useGroupId, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create plan (asynchronously)
     * Creates a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param createPlanRequest  (required)
     * @param useGroupId Whether to accept group IDs instead of group names. Group names are deprecated. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPlanAsync(CreatePlanRequest createPlanRequest, Boolean useGroupId, final ApiCallback<Long> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPlanValidateBeforeCall(createPlanRequest, useGroupId, _callback);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for duplicatePlan
     * @param planId The ID of the plan. (required)
     * @param duplicatePlanRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan to duplicate is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan to duplicate is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call duplicatePlanCall(Long planId, DuplicatePlanRequest duplicatePlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = duplicatePlanRequest;

        // create path and map variables
        String localVarPath = "/rest/api/3/plans/plan/{planId}/duplicate"
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call duplicatePlanValidateBeforeCall(Long planId, DuplicatePlanRequest duplicatePlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling duplicatePlan(Async)");
        }

        // verify the required parameter 'duplicatePlanRequest' is set
        if (duplicatePlanRequest == null) {
            throw new ApiException("Missing the required parameter 'duplicatePlanRequest' when calling duplicatePlan(Async)");
        }

        return duplicatePlanCall(planId, duplicatePlanRequest, _callback);

    }

    /**
     * Duplicate plan
     * Duplicates a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param duplicatePlanRequest  (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan to duplicate is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan to duplicate is not active. </td><td>  -  </td></tr>
     </table>
     */
    public Long duplicatePlan(Long planId, DuplicatePlanRequest duplicatePlanRequest) throws ApiException {
        ApiResponse<Long> localVarResp = duplicatePlanWithHttpInfo(planId, duplicatePlanRequest);
        return localVarResp.getData();
    }

    /**
     * Duplicate plan
     * Duplicates a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param duplicatePlanRequest  (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan to duplicate is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan to duplicate is not active. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Long> duplicatePlanWithHttpInfo(Long planId, DuplicatePlanRequest duplicatePlanRequest) throws ApiException {
        okhttp3.Call localVarCall = duplicatePlanValidateBeforeCall(planId, duplicatePlanRequest, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Duplicate plan (asynchronously)
     * Duplicates a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param duplicatePlanRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan to duplicate is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan to duplicate is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call duplicatePlanAsync(Long planId, DuplicatePlanRequest duplicatePlanRequest, final ApiCallback<Long> _callback) throws ApiException {

        okhttp3.Call localVarCall = duplicatePlanValidateBeforeCall(planId, duplicatePlanRequest, _callback);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlan
     * @param planId The ID of the plan. (required)
     * @param useGroupId Whether to return group IDs instead of group names. Group names are deprecated. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlanCall(Long planId, Boolean useGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/plans/plan/{planId}"
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (useGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useGroupId", useGroupId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlanValidateBeforeCall(Long planId, Boolean useGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling getPlan(Async)");
        }

        return getPlanCall(planId, useGroupId, _callback);

    }

    /**
     * Get plan
     * Returns a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param useGroupId Whether to return group IDs instead of group names. Group names are deprecated. (optional, default to false)
     * @return GetPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetPlanResponse getPlan(Long planId, Boolean useGroupId) throws ApiException {
        ApiResponse<GetPlanResponse> localVarResp = getPlanWithHttpInfo(planId, useGroupId);
        return localVarResp.getData();
    }

    /**
     * Get plan
     * Returns a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param useGroupId Whether to return group IDs instead of group names. Group names are deprecated. (optional, default to false)
     * @return ApiResponse&lt;GetPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPlanResponse> getPlanWithHttpInfo(Long planId, Boolean useGroupId) throws ApiException {
        okhttp3.Call localVarCall = getPlanValidateBeforeCall(planId, useGroupId, null);
        Type localVarReturnType = new TypeToken<GetPlanResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get plan (asynchronously)
     * Returns a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param useGroupId Whether to return group IDs instead of group names. Group names are deprecated. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlanAsync(Long planId, Boolean useGroupId, final ApiCallback<GetPlanResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlanValidateBeforeCall(planId, useGroupId, _callback);
        Type localVarReturnType = new TypeToken<GetPlanResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlans
     * @param includeTrashed Whether to include trashed plans in the results. (optional, default to false)
     * @param includeArchived Whether to include archived plans in the results. (optional, default to false)
     * @param cursor The cursor to start from. If not provided, the first page will be returned. (optional, default to )
     * @param maxResults The maximum number of plans to return per page. The maximum value is 50. The default value is 50. (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlansCall(Boolean includeTrashed, Boolean includeArchived, String cursor, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/plans/plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeTrashed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTrashed", includeTrashed));
        }

        if (includeArchived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeArchived", includeArchived));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlansValidateBeforeCall(Boolean includeTrashed, Boolean includeArchived, String cursor, Integer maxResults, final ApiCallback _callback) throws ApiException {
        return getPlansCall(includeTrashed, includeArchived, cursor, maxResults, _callback);

    }

    /**
     * Get plans paginated
     * Returns a [paginated](#pagination) list of plans.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param includeTrashed Whether to include trashed plans in the results. (optional, default to false)
     * @param includeArchived Whether to include archived plans in the results. (optional, default to false)
     * @param cursor The cursor to start from. If not provided, the first page will be returned. (optional, default to )
     * @param maxResults The maximum number of plans to return per page. The maximum value is 50. The default value is 50. (optional, default to 50)
     * @return PageWithCursorGetPlanResponseForPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
     </table>
     */
    public PageWithCursorGetPlanResponseForPage getPlans(Boolean includeTrashed, Boolean includeArchived, String cursor, Integer maxResults) throws ApiException {
        ApiResponse<PageWithCursorGetPlanResponseForPage> localVarResp = getPlansWithHttpInfo(includeTrashed, includeArchived, cursor, maxResults);
        return localVarResp.getData();
    }

    /**
     * Get plans paginated
     * Returns a [paginated](#pagination) list of plans.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param includeTrashed Whether to include trashed plans in the results. (optional, default to false)
     * @param includeArchived Whether to include archived plans in the results. (optional, default to false)
     * @param cursor The cursor to start from. If not provided, the first page will be returned. (optional, default to )
     * @param maxResults The maximum number of plans to return per page. The maximum value is 50. The default value is 50. (optional, default to 50)
     * @return ApiResponse&lt;PageWithCursorGetPlanResponseForPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageWithCursorGetPlanResponseForPage> getPlansWithHttpInfo(Boolean includeTrashed, Boolean includeArchived, String cursor, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getPlansValidateBeforeCall(includeTrashed, includeArchived, cursor, maxResults, null);
        Type localVarReturnType = new TypeToken<PageWithCursorGetPlanResponseForPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get plans paginated (asynchronously)
     * Returns a [paginated](#pagination) list of plans.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param includeTrashed Whether to include trashed plans in the results. (optional, default to false)
     * @param includeArchived Whether to include archived plans in the results. (optional, default to false)
     * @param cursor The cursor to start from. If not provided, the first page will be returned. (optional, default to )
     * @param maxResults The maximum number of plans to return per page. The maximum value is 50. The default value is 50. (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlansAsync(Boolean includeTrashed, Boolean includeArchived, String cursor, Integer maxResults, final ApiCallback<PageWithCursorGetPlanResponseForPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlansValidateBeforeCall(includeTrashed, includeArchived, cursor, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageWithCursorGetPlanResponseForPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trashPlan
     * @param planId The ID of the plan. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trashPlanCall(Long planId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/plans/plan/{planId}/trash"
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trashPlanValidateBeforeCall(Long planId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling trashPlan(Async)");
        }

        return trashPlanCall(planId, _callback);

    }

    /**
     * Trash plan
     * Moves a plan to trash.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public Object trashPlan(Long planId) throws ApiException {
        ApiResponse<Object> localVarResp = trashPlanWithHttpInfo(planId);
        return localVarResp.getData();
    }

    /**
     * Trash plan
     * Moves a plan to trash.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> trashPlanWithHttpInfo(Long planId) throws ApiException {
        okhttp3.Call localVarCall = trashPlanValidateBeforeCall(planId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trash plan (asynchronously)
     * Moves a plan to trash.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trashPlanAsync(Long planId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = trashPlanValidateBeforeCall(planId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePlan
     * @param planId The ID of the plan. (required)
     * @param body  (required)
     * @param useGroupId Whether to accept group IDs instead of group names. Group names are deprecated. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePlanCall(Long planId, Object body, Boolean useGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rest/api/3/plans/plan/{planId}"
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (useGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useGroupId", useGroupId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePlanValidateBeforeCall(Long planId, Object body, Boolean useGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling updatePlan(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePlan(Async)");
        }

        return updatePlanCall(planId, body, useGroupId, _callback);

    }

    /**
     * Update plan
     * Updates any of the following details of a plan using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).   *  name  *  leadAccountId  *  scheduling           *  estimation with StoryPoints, Days or Hours as possible values      *  startDate                   *  type with DueDate, TargetStartDate, TargetEndDate or DateCustomField as possible values          *  dateCustomFieldId      *  endDate                   *  type with DueDate, TargetStartDate, TargetEndDate or DateCustomField as possible values          *  dateCustomFieldId      *  inferredDates with None, SprintDates or ReleaseDates as possible values      *  dependencies with Sequential or Concurrent as possible values  *  issueSources           *  type with Board, Project or Filter as possible values      *  value  *  exclusionRules           *  numberOfDaysToShowCompletedIssues      *  issueIds      *  workStatusIds      *  workStatusCategoryIds      *  issueTypeIds      *  releaseIds  *  crossProjectReleases           *  name      *  releaseIds  *  customFields           *  customFieldId      *  filter  *  permissions           *  type with View or Edit as possible values      *  holder                   *  type with Group or AccountId as possible values          *  value  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *Note that \&quot;add\&quot; operations do not respect array indexes in target locations. Call the \&quot;Get plan\&quot; endpoint to find out the order of array elements.*
     * @param planId The ID of the plan. (required)
     * @param body  (required)
     * @param useGroupId Whether to accept group IDs instead of group names. Group names are deprecated. (optional, default to false)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public Object updatePlan(Long planId, Object body, Boolean useGroupId) throws ApiException {
        ApiResponse<Object> localVarResp = updatePlanWithHttpInfo(planId, body, useGroupId);
        return localVarResp.getData();
    }

    /**
     * Update plan
     * Updates any of the following details of a plan using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).   *  name  *  leadAccountId  *  scheduling           *  estimation with StoryPoints, Days or Hours as possible values      *  startDate                   *  type with DueDate, TargetStartDate, TargetEndDate or DateCustomField as possible values          *  dateCustomFieldId      *  endDate                   *  type with DueDate, TargetStartDate, TargetEndDate or DateCustomField as possible values          *  dateCustomFieldId      *  inferredDates with None, SprintDates or ReleaseDates as possible values      *  dependencies with Sequential or Concurrent as possible values  *  issueSources           *  type with Board, Project or Filter as possible values      *  value  *  exclusionRules           *  numberOfDaysToShowCompletedIssues      *  issueIds      *  workStatusIds      *  workStatusCategoryIds      *  issueTypeIds      *  releaseIds  *  crossProjectReleases           *  name      *  releaseIds  *  customFields           *  customFieldId      *  filter  *  permissions           *  type with View or Edit as possible values      *  holder                   *  type with Group or AccountId as possible values          *  value  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *Note that \&quot;add\&quot; operations do not respect array indexes in target locations. Call the \&quot;Get plan\&quot; endpoint to find out the order of array elements.*
     * @param planId The ID of the plan. (required)
     * @param body  (required)
     * @param useGroupId Whether to accept group IDs instead of group names. Group names are deprecated. (optional, default to false)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updatePlanWithHttpInfo(Long planId, Object body, Boolean useGroupId) throws ApiException {
        okhttp3.Call localVarCall = updatePlanValidateBeforeCall(planId, body, useGroupId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update plan (asynchronously)
     * Updates any of the following details of a plan using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).   *  name  *  leadAccountId  *  scheduling           *  estimation with StoryPoints, Days or Hours as possible values      *  startDate                   *  type with DueDate, TargetStartDate, TargetEndDate or DateCustomField as possible values          *  dateCustomFieldId      *  endDate                   *  type with DueDate, TargetStartDate, TargetEndDate or DateCustomField as possible values          *  dateCustomFieldId      *  inferredDates with None, SprintDates or ReleaseDates as possible values      *  dependencies with Sequential or Concurrent as possible values  *  issueSources           *  type with Board, Project or Filter as possible values      *  value  *  exclusionRules           *  numberOfDaysToShowCompletedIssues      *  issueIds      *  workStatusIds      *  workStatusCategoryIds      *  issueTypeIds      *  releaseIds  *  crossProjectReleases           *  name      *  releaseIds  *  customFields           *  customFieldId      *  filter  *  permissions           *  type with View or Edit as possible values      *  holder                   *  type with Group or AccountId as possible values          *  value  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *Note that \&quot;add\&quot; operations do not respect array indexes in target locations. Call the \&quot;Get plan\&quot; endpoint to find out the order of array elements.*
     * @param planId The ID of the plan. (required)
     * @param body  (required)
     * @param useGroupId Whether to accept group IDs instead of group names. Group names are deprecated. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePlanAsync(Long planId, Object body, Boolean useGroupId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePlanValidateBeforeCall(planId, body, useGroupId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
