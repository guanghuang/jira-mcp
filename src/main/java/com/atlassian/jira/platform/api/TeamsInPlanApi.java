/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-1461af1efd5cc75bf21cb8256a8b42f9bd4278be
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.platform.api;

import com.atlassian.jira.invoker.ApiCallback;
import com.atlassian.jira.invoker.ApiClient;
import com.atlassian.jira.invoker.ApiException;
import com.atlassian.jira.invoker.ApiResponse;
import com.atlassian.jira.invoker.Configuration;
import com.atlassian.jira.invoker.Pair;
import com.atlassian.jira.invoker.ProgressRequestBody;
import com.atlassian.jira.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.atlassian.jira.platform.model.AddAtlassianTeamRequest;
import com.atlassian.jira.platform.model.CreatePlanOnlyTeamRequest;
import com.atlassian.jira.platform.model.ErrorCollection;
import com.atlassian.jira.platform.model.GetAtlassianTeamResponse;
import com.atlassian.jira.platform.model.GetPlanOnlyTeamResponse;
import com.atlassian.jira.platform.model.PageWithCursorGetTeamResponseForPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TeamsInPlanApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamsInPlanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeamsInPlanApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addAtlassianTeam
     * @param planId The ID of the plan. (required)
     * @param addAtlassianTeamRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or Atlassian team is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAtlassianTeamCall(Long planId, AddAtlassianTeamRequest addAtlassianTeamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addAtlassianTeamRequest;

        // create path and map variables
        String localVarPath = "/rest/api/3/plans/plan/{planId}/team/atlassian"
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAtlassianTeamValidateBeforeCall(Long planId, AddAtlassianTeamRequest addAtlassianTeamRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling addAtlassianTeam(Async)");
        }

        // verify the required parameter 'addAtlassianTeamRequest' is set
        if (addAtlassianTeamRequest == null) {
            throw new ApiException("Missing the required parameter 'addAtlassianTeamRequest' when calling addAtlassianTeam(Async)");
        }

        return addAtlassianTeamCall(planId, addAtlassianTeamRequest, _callback);

    }

    /**
     * Add Atlassian team to plan
     * Adds an existing Atlassian team to a plan and configures their plannning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param addAtlassianTeamRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or Atlassian team is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public Object addAtlassianTeam(Long planId, AddAtlassianTeamRequest addAtlassianTeamRequest) throws ApiException {
        ApiResponse<Object> localVarResp = addAtlassianTeamWithHttpInfo(planId, addAtlassianTeamRequest);
        return localVarResp.getData();
    }

    /**
     * Add Atlassian team to plan
     * Adds an existing Atlassian team to a plan and configures their plannning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param addAtlassianTeamRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or Atlassian team is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addAtlassianTeamWithHttpInfo(Long planId, AddAtlassianTeamRequest addAtlassianTeamRequest) throws ApiException {
        okhttp3.Call localVarCall = addAtlassianTeamValidateBeforeCall(planId, addAtlassianTeamRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Atlassian team to plan (asynchronously)
     * Adds an existing Atlassian team to a plan and configures their plannning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param addAtlassianTeamRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or Atlassian team is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAtlassianTeamAsync(Long planId, AddAtlassianTeamRequest addAtlassianTeamRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAtlassianTeamValidateBeforeCall(planId, addAtlassianTeamRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPlanOnlyTeam
     * @param planId The ID of the plan. (required)
     * @param createPlanOnlyTeamRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPlanOnlyTeamCall(Long planId, CreatePlanOnlyTeamRequest createPlanOnlyTeamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPlanOnlyTeamRequest;

        // create path and map variables
        String localVarPath = "/rest/api/3/plans/plan/{planId}/team/planonly"
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPlanOnlyTeamValidateBeforeCall(Long planId, CreatePlanOnlyTeamRequest createPlanOnlyTeamRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling createPlanOnlyTeam(Async)");
        }

        // verify the required parameter 'createPlanOnlyTeamRequest' is set
        if (createPlanOnlyTeamRequest == null) {
            throw new ApiException("Missing the required parameter 'createPlanOnlyTeamRequest' when calling createPlanOnlyTeam(Async)");
        }

        return createPlanOnlyTeamCall(planId, createPlanOnlyTeamRequest, _callback);

    }

    /**
     * Create plan-only team
     * Creates a plan-only team and configures their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param createPlanOnlyTeamRequest  (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public Long createPlanOnlyTeam(Long planId, CreatePlanOnlyTeamRequest createPlanOnlyTeamRequest) throws ApiException {
        ApiResponse<Long> localVarResp = createPlanOnlyTeamWithHttpInfo(planId, createPlanOnlyTeamRequest);
        return localVarResp.getData();
    }

    /**
     * Create plan-only team
     * Creates a plan-only team and configures their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param createPlanOnlyTeamRequest  (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Long> createPlanOnlyTeamWithHttpInfo(Long planId, CreatePlanOnlyTeamRequest createPlanOnlyTeamRequest) throws ApiException {
        okhttp3.Call localVarCall = createPlanOnlyTeamValidateBeforeCall(planId, createPlanOnlyTeamRequest, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create plan-only team (asynchronously)
     * Creates a plan-only team and configures their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param createPlanOnlyTeamRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPlanOnlyTeamAsync(Long planId, CreatePlanOnlyTeamRequest createPlanOnlyTeamRequest, final ApiCallback<Long> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPlanOnlyTeamValidateBeforeCall(planId, createPlanOnlyTeamRequest, _callback);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePlanOnlyTeam
     * @param planId The ID of the plan. (required)
     * @param planOnlyTeamId The ID of the plan-only team. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or plan-only team is not found, or the plan-only team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePlanOnlyTeamCall(Long planId, Long planOnlyTeamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/plans/plan/{planId}/team/planonly/{planOnlyTeamId}"
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()))
            .replace("{" + "planOnlyTeamId" + "}", localVarApiClient.escapeString(planOnlyTeamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePlanOnlyTeamValidateBeforeCall(Long planId, Long planOnlyTeamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling deletePlanOnlyTeam(Async)");
        }

        // verify the required parameter 'planOnlyTeamId' is set
        if (planOnlyTeamId == null) {
            throw new ApiException("Missing the required parameter 'planOnlyTeamId' when calling deletePlanOnlyTeam(Async)");
        }

        return deletePlanOnlyTeamCall(planId, planOnlyTeamId, _callback);

    }

    /**
     * Delete plan-only team
     * Deletes a plan-only team and their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param planOnlyTeamId The ID of the plan-only team. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or plan-only team is not found, or the plan-only team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public Object deletePlanOnlyTeam(Long planId, Long planOnlyTeamId) throws ApiException {
        ApiResponse<Object> localVarResp = deletePlanOnlyTeamWithHttpInfo(planId, planOnlyTeamId);
        return localVarResp.getData();
    }

    /**
     * Delete plan-only team
     * Deletes a plan-only team and their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param planOnlyTeamId The ID of the plan-only team. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or plan-only team is not found, or the plan-only team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deletePlanOnlyTeamWithHttpInfo(Long planId, Long planOnlyTeamId) throws ApiException {
        okhttp3.Call localVarCall = deletePlanOnlyTeamValidateBeforeCall(planId, planOnlyTeamId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete plan-only team (asynchronously)
     * Deletes a plan-only team and their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param planOnlyTeamId The ID of the plan-only team. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or plan-only team is not found, or the plan-only team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePlanOnlyTeamAsync(Long planId, Long planOnlyTeamId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePlanOnlyTeamValidateBeforeCall(planId, planOnlyTeamId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAtlassianTeam
     * @param planId The ID of the plan. (required)
     * @param atlassianTeamId The ID of the Atlassian team. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or Atlassian team is not found, or the Atlassian team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAtlassianTeamCall(Long planId, String atlassianTeamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/plans/plan/{planId}/team/atlassian/{atlassianTeamId}"
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()))
            .replace("{" + "atlassianTeamId" + "}", localVarApiClient.escapeString(atlassianTeamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAtlassianTeamValidateBeforeCall(Long planId, String atlassianTeamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling getAtlassianTeam(Async)");
        }

        // verify the required parameter 'atlassianTeamId' is set
        if (atlassianTeamId == null) {
            throw new ApiException("Missing the required parameter 'atlassianTeamId' when calling getAtlassianTeam(Async)");
        }

        return getAtlassianTeamCall(planId, atlassianTeamId, _callback);

    }

    /**
     * Get Atlassian team in plan
     * Returns planning settings for an Atlassian team in a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param atlassianTeamId The ID of the Atlassian team. (required)
     * @return GetAtlassianTeamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or Atlassian team is not found, or the Atlassian team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public GetAtlassianTeamResponse getAtlassianTeam(Long planId, String atlassianTeamId) throws ApiException {
        ApiResponse<GetAtlassianTeamResponse> localVarResp = getAtlassianTeamWithHttpInfo(planId, atlassianTeamId);
        return localVarResp.getData();
    }

    /**
     * Get Atlassian team in plan
     * Returns planning settings for an Atlassian team in a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param atlassianTeamId The ID of the Atlassian team. (required)
     * @return ApiResponse&lt;GetAtlassianTeamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or Atlassian team is not found, or the Atlassian team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAtlassianTeamResponse> getAtlassianTeamWithHttpInfo(Long planId, String atlassianTeamId) throws ApiException {
        okhttp3.Call localVarCall = getAtlassianTeamValidateBeforeCall(planId, atlassianTeamId, null);
        Type localVarReturnType = new TypeToken<GetAtlassianTeamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Atlassian team in plan (asynchronously)
     * Returns planning settings for an Atlassian team in a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param atlassianTeamId The ID of the Atlassian team. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or Atlassian team is not found, or the Atlassian team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAtlassianTeamAsync(Long planId, String atlassianTeamId, final ApiCallback<GetAtlassianTeamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAtlassianTeamValidateBeforeCall(planId, atlassianTeamId, _callback);
        Type localVarReturnType = new TypeToken<GetAtlassianTeamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlanOnlyTeam
     * @param planId The ID of the plan. (required)
     * @param planOnlyTeamId The ID of the plan-only team. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or plan-only team is not found, or the plan-only team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlanOnlyTeamCall(Long planId, Long planOnlyTeamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/plans/plan/{planId}/team/planonly/{planOnlyTeamId}"
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()))
            .replace("{" + "planOnlyTeamId" + "}", localVarApiClient.escapeString(planOnlyTeamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlanOnlyTeamValidateBeforeCall(Long planId, Long planOnlyTeamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling getPlanOnlyTeam(Async)");
        }

        // verify the required parameter 'planOnlyTeamId' is set
        if (planOnlyTeamId == null) {
            throw new ApiException("Missing the required parameter 'planOnlyTeamId' when calling getPlanOnlyTeam(Async)");
        }

        return getPlanOnlyTeamCall(planId, planOnlyTeamId, _callback);

    }

    /**
     * Get plan-only team
     * Returns planning settings for a plan-only team.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param planOnlyTeamId The ID of the plan-only team. (required)
     * @return GetPlanOnlyTeamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or plan-only team is not found, or the plan-only team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public GetPlanOnlyTeamResponse getPlanOnlyTeam(Long planId, Long planOnlyTeamId) throws ApiException {
        ApiResponse<GetPlanOnlyTeamResponse> localVarResp = getPlanOnlyTeamWithHttpInfo(planId, planOnlyTeamId);
        return localVarResp.getData();
    }

    /**
     * Get plan-only team
     * Returns planning settings for a plan-only team.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param planOnlyTeamId The ID of the plan-only team. (required)
     * @return ApiResponse&lt;GetPlanOnlyTeamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or plan-only team is not found, or the plan-only team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPlanOnlyTeamResponse> getPlanOnlyTeamWithHttpInfo(Long planId, Long planOnlyTeamId) throws ApiException {
        okhttp3.Call localVarCall = getPlanOnlyTeamValidateBeforeCall(planId, planOnlyTeamId, null);
        Type localVarReturnType = new TypeToken<GetPlanOnlyTeamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get plan-only team (asynchronously)
     * Returns planning settings for a plan-only team.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param planOnlyTeamId The ID of the plan-only team. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or plan-only team is not found, or the plan-only team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlanOnlyTeamAsync(Long planId, Long planOnlyTeamId, final ApiCallback<GetPlanOnlyTeamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlanOnlyTeamValidateBeforeCall(planId, planOnlyTeamId, _callback);
        Type localVarReturnType = new TypeToken<GetPlanOnlyTeamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTeams
     * @param planId The ID of the plan. (required)
     * @param cursor The cursor to start from. If not provided, the first page will be returned. (optional, default to )
     * @param maxResults The maximum number of plan teams to return per page. The maximum value is 50. The default value is 50. (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamsCall(Long planId, String cursor, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/plans/plan/{planId}/team"
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamsValidateBeforeCall(Long planId, String cursor, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling getTeams(Async)");
        }

        return getTeamsCall(planId, cursor, maxResults, _callback);

    }

    /**
     * Get teams in plan paginated
     * Returns a [paginated](#pagination) list of plan-only and Atlassian teams in a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param cursor The cursor to start from. If not provided, the first page will be returned. (optional, default to )
     * @param maxResults The maximum number of plan teams to return per page. The maximum value is 50. The default value is 50. (optional, default to 50)
     * @return PageWithCursorGetTeamResponseForPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
     </table>
     */
    public PageWithCursorGetTeamResponseForPage getTeams(Long planId, String cursor, Integer maxResults) throws ApiException {
        ApiResponse<PageWithCursorGetTeamResponseForPage> localVarResp = getTeamsWithHttpInfo(planId, cursor, maxResults);
        return localVarResp.getData();
    }

    /**
     * Get teams in plan paginated
     * Returns a [paginated](#pagination) list of plan-only and Atlassian teams in a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param cursor The cursor to start from. If not provided, the first page will be returned. (optional, default to )
     * @param maxResults The maximum number of plan teams to return per page. The maximum value is 50. The default value is 50. (optional, default to 50)
     * @return ApiResponse&lt;PageWithCursorGetTeamResponseForPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageWithCursorGetTeamResponseForPage> getTeamsWithHttpInfo(Long planId, String cursor, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getTeamsValidateBeforeCall(planId, cursor, maxResults, null);
        Type localVarReturnType = new TypeToken<PageWithCursorGetTeamResponseForPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get teams in plan paginated (asynchronously)
     * Returns a [paginated](#pagination) list of plan-only and Atlassian teams in a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param cursor The cursor to start from. If not provided, the first page will be returned. (optional, default to )
     * @param maxResults The maximum number of plan teams to return per page. The maximum value is 50. The default value is 50. (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamsAsync(Long planId, String cursor, Integer maxResults, final ApiCallback<PageWithCursorGetTeamResponseForPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamsValidateBeforeCall(planId, cursor, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageWithCursorGetTeamResponseForPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAtlassianTeam
     * @param planId The ID of the plan. (required)
     * @param atlassianTeamId The ID of the Atlassian team. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or Atlassian team is not found, or the Atlassian team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAtlassianTeamCall(Long planId, String atlassianTeamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/plans/plan/{planId}/team/atlassian/{atlassianTeamId}"
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()))
            .replace("{" + "atlassianTeamId" + "}", localVarApiClient.escapeString(atlassianTeamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAtlassianTeamValidateBeforeCall(Long planId, String atlassianTeamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling removeAtlassianTeam(Async)");
        }

        // verify the required parameter 'atlassianTeamId' is set
        if (atlassianTeamId == null) {
            throw new ApiException("Missing the required parameter 'atlassianTeamId' when calling removeAtlassianTeam(Async)");
        }

        return removeAtlassianTeamCall(planId, atlassianTeamId, _callback);

    }

    /**
     * Remove Atlassian team from plan
     * Removes an Atlassian team from a plan and deletes their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param atlassianTeamId The ID of the Atlassian team. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or Atlassian team is not found, or the Atlassian team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public Object removeAtlassianTeam(Long planId, String atlassianTeamId) throws ApiException {
        ApiResponse<Object> localVarResp = removeAtlassianTeamWithHttpInfo(planId, atlassianTeamId);
        return localVarResp.getData();
    }

    /**
     * Remove Atlassian team from plan
     * Removes an Atlassian team from a plan and deletes their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param atlassianTeamId The ID of the Atlassian team. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or Atlassian team is not found, or the Atlassian team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> removeAtlassianTeamWithHttpInfo(Long planId, String atlassianTeamId) throws ApiException {
        okhttp3.Call localVarCall = removeAtlassianTeamValidateBeforeCall(planId, atlassianTeamId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Atlassian team from plan (asynchronously)
     * Removes an Atlassian team from a plan and deletes their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param planId The ID of the plan. (required)
     * @param atlassianTeamId The ID of the Atlassian team. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or Atlassian team is not found, or the Atlassian team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAtlassianTeamAsync(Long planId, String atlassianTeamId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAtlassianTeamValidateBeforeCall(planId, atlassianTeamId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAtlassianTeam
     * @param planId The ID of the plan. (required)
     * @param atlassianTeamId The ID of the Atlassian team. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or Atlassian team is not found, or the Atlassian team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAtlassianTeamCall(Long planId, String atlassianTeamId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rest/api/3/plans/plan/{planId}/team/atlassian/{atlassianTeamId}"
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()))
            .replace("{" + "atlassianTeamId" + "}", localVarApiClient.escapeString(atlassianTeamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAtlassianTeamValidateBeforeCall(Long planId, String atlassianTeamId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling updateAtlassianTeam(Async)");
        }

        // verify the required parameter 'atlassianTeamId' is set
        if (atlassianTeamId == null) {
            throw new ApiException("Missing the required parameter 'atlassianTeamId' when calling updateAtlassianTeam(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateAtlassianTeam(Async)");
        }

        return updateAtlassianTeamCall(planId, atlassianTeamId, body, _callback);

    }

    /**
     * Update Atlassian team in plan
     * Updates any of the following planning settings of an Atlassian team in a plan using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).   *  planningStyle  *  issueSourceId  *  sprintLength  *  capacity  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *Note that \&quot;add\&quot; operations do not respect array indexes in target locations. Call the \&quot;Get Atlassian team in plan\&quot; endpoint to find out the order of array elements.*
     * @param planId The ID of the plan. (required)
     * @param atlassianTeamId The ID of the Atlassian team. (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or Atlassian team is not found, or the Atlassian team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateAtlassianTeam(Long planId, String atlassianTeamId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = updateAtlassianTeamWithHttpInfo(planId, atlassianTeamId, body);
        return localVarResp.getData();
    }

    /**
     * Update Atlassian team in plan
     * Updates any of the following planning settings of an Atlassian team in a plan using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).   *  planningStyle  *  issueSourceId  *  sprintLength  *  capacity  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *Note that \&quot;add\&quot; operations do not respect array indexes in target locations. Call the \&quot;Get Atlassian team in plan\&quot; endpoint to find out the order of array elements.*
     * @param planId The ID of the plan. (required)
     * @param atlassianTeamId The ID of the Atlassian team. (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or Atlassian team is not found, or the Atlassian team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateAtlassianTeamWithHttpInfo(Long planId, String atlassianTeamId, Object body) throws ApiException {
        okhttp3.Call localVarCall = updateAtlassianTeamValidateBeforeCall(planId, atlassianTeamId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Atlassian team in plan (asynchronously)
     * Updates any of the following planning settings of an Atlassian team in a plan using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).   *  planningStyle  *  issueSourceId  *  sprintLength  *  capacity  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *Note that \&quot;add\&quot; operations do not respect array indexes in target locations. Call the \&quot;Get Atlassian team in plan\&quot; endpoint to find out the order of array elements.*
     * @param planId The ID of the plan. (required)
     * @param atlassianTeamId The ID of the Atlassian team. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or Atlassian team is not found, or the Atlassian team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAtlassianTeamAsync(Long planId, String atlassianTeamId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAtlassianTeamValidateBeforeCall(planId, atlassianTeamId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePlanOnlyTeam
     * @param planId The ID of the plan. (required)
     * @param planOnlyTeamId The ID of the plan-only team. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or plan-only team is not found, or the plan-only team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePlanOnlyTeamCall(Long planId, Long planOnlyTeamId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rest/api/3/plans/plan/{planId}/team/planonly/{planOnlyTeamId}"
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()))
            .replace("{" + "planOnlyTeamId" + "}", localVarApiClient.escapeString(planOnlyTeamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePlanOnlyTeamValidateBeforeCall(Long planId, Long planOnlyTeamId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling updatePlanOnlyTeam(Async)");
        }

        // verify the required parameter 'planOnlyTeamId' is set
        if (planOnlyTeamId == null) {
            throw new ApiException("Missing the required parameter 'planOnlyTeamId' when calling updatePlanOnlyTeam(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePlanOnlyTeam(Async)");
        }

        return updatePlanOnlyTeamCall(planId, planOnlyTeamId, body, _callback);

    }

    /**
     * Update plan-only team
     * Updates any of the following planning settings of a plan-only team using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).   *  name  *  planningStyle  *  issueSourceId  *  sprintLength  *  capacity  *  memberAccountIds  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *Note that \&quot;add\&quot; operations do not respect array indexes in target locations. Call the \&quot;Get plan-only team\&quot; endpoint to find out the order of array elements.*
     * @param planId The ID of the plan. (required)
     * @param planOnlyTeamId The ID of the plan-only team. (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or plan-only team is not found, or the plan-only team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public Object updatePlanOnlyTeam(Long planId, Long planOnlyTeamId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = updatePlanOnlyTeamWithHttpInfo(planId, planOnlyTeamId, body);
        return localVarResp.getData();
    }

    /**
     * Update plan-only team
     * Updates any of the following planning settings of a plan-only team using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).   *  name  *  planningStyle  *  issueSourceId  *  sprintLength  *  capacity  *  memberAccountIds  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *Note that \&quot;add\&quot; operations do not respect array indexes in target locations. Call the \&quot;Get plan-only team\&quot; endpoint to find out the order of array elements.*
     * @param planId The ID of the plan. (required)
     * @param planOnlyTeamId The ID of the plan-only team. (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or plan-only team is not found, or the plan-only team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updatePlanOnlyTeamWithHttpInfo(Long planId, Long planOnlyTeamId, Object body) throws ApiException {
        okhttp3.Call localVarCall = updatePlanOnlyTeamValidateBeforeCall(planId, planOnlyTeamId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update plan-only team (asynchronously)
     * Updates any of the following planning settings of a plan-only team using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).   *  name  *  planningStyle  *  issueSourceId  *  sprintLength  *  capacity  *  memberAccountIds  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *Note that \&quot;add\&quot; operations do not respect array indexes in target locations. Call the \&quot;Get plan-only team\&quot; endpoint to find out the order of array elements.*
     * @param planId The ID of the plan. (required)
     * @param planOnlyTeamId The ID of the plan-only team. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the plan or plan-only team is not found, or the plan-only team is not associated with the plan. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the plan is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePlanOnlyTeamAsync(Long planId, Long planOnlyTeamId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePlanOnlyTeamValidateBeforeCall(planId, planOnlyTeamId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
