/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.api;

import com.atlassian.jira.invoker.ApiCallback;
import com.atlassian.jira.invoker.ApiClient;
import com.atlassian.jira.invoker.ApiException;
import com.atlassian.jira.invoker.ApiResponse;
import com.atlassian.jira.invoker.Configuration;
import com.atlassian.jira.invoker.Pair;
import com.atlassian.jira.invoker.ProgressRequestBody;
import com.atlassian.jira.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.atlassian.jira.software.model.ErrorMessage1;
import com.atlassian.jira.software.model.FeatureFlagData;
import com.atlassian.jira.software.model.SubmitFeatureFlagRequest;
import com.atlassian.jira.software.model.SubmitFeatureFlagsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FeatureFlagsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FeatureFlagsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FeatureFlagsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteFeatureFlagById
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param featureFlagId The ID of the Feature Flag to delete.  (required)
     * @param updateSequenceId This parameter usage is no longer supported.  An optional &#x60;_updateSequenceId&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceId&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Feature Flags module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFeatureFlagByIdCall(String authorization, String featureFlagId, Long updateSequenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/featureflags/0.1/flag/{featureFlagId}"
            .replace("{" + "featureFlagId" + "}", localVarApiClient.escapeString(featureFlagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateSequenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_updateSequenceId", updateSequenceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFeatureFlagByIdValidateBeforeCall(String authorization, String featureFlagId, Long updateSequenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteFeatureFlagById(Async)");
        }

        // verify the required parameter 'featureFlagId' is set
        if (featureFlagId == null) {
            throw new ApiException("Missing the required parameter 'featureFlagId' when calling deleteFeatureFlagById(Async)");
        }

        return deleteFeatureFlagByIdCall(authorization, featureFlagId, updateSequenceId, _callback);

    }

    /**
     * Delete a Feature Flag by ID
     * Delete the Feature Flag data currently stored for the given ID.  Deletion is performed asynchronously. The getFeatureFlagById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraFeatureFlagInfoProvider&#x60; module can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param featureFlagId The ID of the Feature Flag to delete.  (required)
     * @param updateSequenceId This parameter usage is no longer supported.  An optional &#x60;_updateSequenceId&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceId&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Feature Flags module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFeatureFlagById(String authorization, String featureFlagId, Long updateSequenceId) throws ApiException {
        deleteFeatureFlagByIdWithHttpInfo(authorization, featureFlagId, updateSequenceId);
    }

    /**
     * Delete a Feature Flag by ID
     * Delete the Feature Flag data currently stored for the given ID.  Deletion is performed asynchronously. The getFeatureFlagById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraFeatureFlagInfoProvider&#x60; module can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param featureFlagId The ID of the Feature Flag to delete.  (required)
     * @param updateSequenceId This parameter usage is no longer supported.  An optional &#x60;_updateSequenceId&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceId&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Feature Flags module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFeatureFlagByIdWithHttpInfo(String authorization, String featureFlagId, Long updateSequenceId) throws ApiException {
        okhttp3.Call localVarCall = deleteFeatureFlagByIdValidateBeforeCall(authorization, featureFlagId, updateSequenceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Feature Flag by ID (asynchronously)
     * Delete the Feature Flag data currently stored for the given ID.  Deletion is performed asynchronously. The getFeatureFlagById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraFeatureFlagInfoProvider&#x60; module can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param featureFlagId The ID of the Feature Flag to delete.  (required)
     * @param updateSequenceId This parameter usage is no longer supported.  An optional &#x60;_updateSequenceId&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceId&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Feature Flags module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFeatureFlagByIdAsync(String authorization, String featureFlagId, Long updateSequenceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFeatureFlagByIdValidateBeforeCall(authorization, featureFlagId, updateSequenceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFeatureFlagsByProperty
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param updateSequenceId This parameter usage is no longer supported.  An optional &#x60;_updateSequenceId&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceId&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  If not provided, all stored data that matches the request will be deleted.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format (e.g. missing at least one Property param).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Feature Flags module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFeatureFlagsByPropertyCall(String authorization, Long updateSequenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/featureflags/0.1/bulkByProperties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateSequenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_updateSequenceId", updateSequenceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFeatureFlagsByPropertyValidateBeforeCall(String authorization, Long updateSequenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteFeatureFlagsByProperty(Async)");
        }

        return deleteFeatureFlagsByPropertyCall(authorization, updateSequenceId, _callback);

    }

    /**
     * Delete Feature Flags by Property
     * Bulk delete all Feature Flags that match the given request.  One or more query params must be supplied to specify Properties to delete by. Optional param &#x60;_updateSequenceId&#x60; is no longer supported. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND). See the documentation for the submitFeatureFlags operation for more details.  e.g. DELETE /bulkByProperties?accountId&#x3D;account-123&amp;createdBy&#x3D;user-456  Deletion is performed asynchronously. The getFeatureFlagById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraFeatureFlagInfoProvider&#x60; module can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param updateSequenceId This parameter usage is no longer supported.  An optional &#x60;_updateSequenceId&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceId&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  If not provided, all stored data that matches the request will be deleted.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format (e.g. missing at least one Property param).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Feature Flags module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFeatureFlagsByProperty(String authorization, Long updateSequenceId) throws ApiException {
        deleteFeatureFlagsByPropertyWithHttpInfo(authorization, updateSequenceId);
    }

    /**
     * Delete Feature Flags by Property
     * Bulk delete all Feature Flags that match the given request.  One or more query params must be supplied to specify Properties to delete by. Optional param &#x60;_updateSequenceId&#x60; is no longer supported. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND). See the documentation for the submitFeatureFlags operation for more details.  e.g. DELETE /bulkByProperties?accountId&#x3D;account-123&amp;createdBy&#x3D;user-456  Deletion is performed asynchronously. The getFeatureFlagById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraFeatureFlagInfoProvider&#x60; module can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param updateSequenceId This parameter usage is no longer supported.  An optional &#x60;_updateSequenceId&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceId&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  If not provided, all stored data that matches the request will be deleted.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format (e.g. missing at least one Property param).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Feature Flags module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFeatureFlagsByPropertyWithHttpInfo(String authorization, Long updateSequenceId) throws ApiException {
        okhttp3.Call localVarCall = deleteFeatureFlagsByPropertyValidateBeforeCall(authorization, updateSequenceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Feature Flags by Property (asynchronously)
     * Bulk delete all Feature Flags that match the given request.  One or more query params must be supplied to specify Properties to delete by. Optional param &#x60;_updateSequenceId&#x60; is no longer supported. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND). See the documentation for the submitFeatureFlags operation for more details.  e.g. DELETE /bulkByProperties?accountId&#x3D;account-123&amp;createdBy&#x3D;user-456  Deletion is performed asynchronously. The getFeatureFlagById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraFeatureFlagInfoProvider&#x60; module can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param updateSequenceId This parameter usage is no longer supported.  An optional &#x60;_updateSequenceId&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceId&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  If not provided, all stored data that matches the request will be deleted.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format (e.g. missing at least one Property param).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Feature Flags module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFeatureFlagsByPropertyAsync(String authorization, Long updateSequenceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFeatureFlagsByPropertyValidateBeforeCall(authorization, updateSequenceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFeatureFlagById
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param featureFlagId The ID of the Feature Flag to fetch.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Feature Flag data currently stored for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Feature Flags module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given Feature Flag ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeatureFlagByIdCall(String authorization, String featureFlagId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/featureflags/0.1/flag/{featureFlagId}"
            .replace("{" + "featureFlagId" + "}", localVarApiClient.escapeString(featureFlagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeatureFlagByIdValidateBeforeCall(String authorization, String featureFlagId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getFeatureFlagById(Async)");
        }

        // verify the required parameter 'featureFlagId' is set
        if (featureFlagId == null) {
            throw new ApiException("Missing the required parameter 'featureFlagId' when calling getFeatureFlagById(Async)");
        }

        return getFeatureFlagByIdCall(authorization, featureFlagId, _callback);

    }

    /**
     * Get a Feature Flag by ID
     * Retrieve the currently stored Feature Flag data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the &#x60;jiraFeatureFlagInfoProvider&#x60; module can access this resource. This resource requires the &#39;READ&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param featureFlagId The ID of the Feature Flag to fetch.  (required)
     * @return FeatureFlagData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Feature Flag data currently stored for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Feature Flags module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given Feature Flag ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public FeatureFlagData getFeatureFlagById(String authorization, String featureFlagId) throws ApiException {
        ApiResponse<FeatureFlagData> localVarResp = getFeatureFlagByIdWithHttpInfo(authorization, featureFlagId);
        return localVarResp.getData();
    }

    /**
     * Get a Feature Flag by ID
     * Retrieve the currently stored Feature Flag data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the &#x60;jiraFeatureFlagInfoProvider&#x60; module can access this resource. This resource requires the &#39;READ&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param featureFlagId The ID of the Feature Flag to fetch.  (required)
     * @return ApiResponse&lt;FeatureFlagData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Feature Flag data currently stored for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Feature Flags module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given Feature Flag ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeatureFlagData> getFeatureFlagByIdWithHttpInfo(String authorization, String featureFlagId) throws ApiException {
        okhttp3.Call localVarCall = getFeatureFlagByIdValidateBeforeCall(authorization, featureFlagId, null);
        Type localVarReturnType = new TypeToken<FeatureFlagData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Feature Flag by ID (asynchronously)
     * Retrieve the currently stored Feature Flag data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the &#x60;jiraFeatureFlagInfoProvider&#x60; module can access this resource. This resource requires the &#39;READ&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param featureFlagId The ID of the Feature Flag to fetch.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Feature Flag data currently stored for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Feature Flags module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given Feature Flag ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeatureFlagByIdAsync(String authorization, String featureFlagId, final ApiCallback<FeatureFlagData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeatureFlagByIdValidateBeforeCall(authorization, featureFlagId, _callback);
        Type localVarReturnType = new TypeToken<FeatureFlagData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitFeatureFlags
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param submitFeatureFlagRequest Feature Flag data to submit.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted Feature Flag that is of a valid format will be eventually available in Jira.  Details of which Feature Flags were submitted and which failed submission (due to data format problems etc.) are available in the response object.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  Note that in the case of an individual Feature Flag having an invalid format (rather than the request as a whole) the response for the request will be a 202 and details of the invalid Feature Flag will be contained in the response object.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Feature Flags module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer Feature Flags in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitFeatureFlagsCall(String authorization, SubmitFeatureFlagRequest submitFeatureFlagRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = submitFeatureFlagRequest;

        // create path and map variables
        String localVarPath = "/rest/featureflags/0.1/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitFeatureFlagsValidateBeforeCall(String authorization, SubmitFeatureFlagRequest submitFeatureFlagRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling submitFeatureFlags(Async)");
        }

        // verify the required parameter 'submitFeatureFlagRequest' is set
        if (submitFeatureFlagRequest == null) {
            throw new ApiException("Missing the required parameter 'submitFeatureFlagRequest' when calling submitFeatureFlags(Async)");
        }

        return submitFeatureFlagsCall(authorization, submitFeatureFlagRequest, _callback);

    }

    /**
     * Submit Feature Flag data
     * Update / insert Feature Flag data.  Feature Flags are identified by their ID, and existing Feature Flag data for the same ID will be replaced if it exists and the updateSequenceId of existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The getFeatureFlagById operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple Feature Flags being submitted in one request, each is validated individually prior to submission. Details of which Feature Flags failed submission (if any) are available in the response object.  Only Connect apps that define the &#x60;jiraFeatureFlagInfoProvider&#x60; module can access this resource. This resource requires the &#39;WRITE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param submitFeatureFlagRequest Feature Flag data to submit.  (required)
     * @return SubmitFeatureFlagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted Feature Flag that is of a valid format will be eventually available in Jira.  Details of which Feature Flags were submitted and which failed submission (due to data format problems etc.) are available in the response object.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  Note that in the case of an individual Feature Flag having an invalid format (rather than the request as a whole) the response for the request will be a 202 and details of the invalid Feature Flag will be contained in the response object.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Feature Flags module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer Feature Flags in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public SubmitFeatureFlagsResponse submitFeatureFlags(String authorization, SubmitFeatureFlagRequest submitFeatureFlagRequest) throws ApiException {
        ApiResponse<SubmitFeatureFlagsResponse> localVarResp = submitFeatureFlagsWithHttpInfo(authorization, submitFeatureFlagRequest);
        return localVarResp.getData();
    }

    /**
     * Submit Feature Flag data
     * Update / insert Feature Flag data.  Feature Flags are identified by their ID, and existing Feature Flag data for the same ID will be replaced if it exists and the updateSequenceId of existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The getFeatureFlagById operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple Feature Flags being submitted in one request, each is validated individually prior to submission. Details of which Feature Flags failed submission (if any) are available in the response object.  Only Connect apps that define the &#x60;jiraFeatureFlagInfoProvider&#x60; module can access this resource. This resource requires the &#39;WRITE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param submitFeatureFlagRequest Feature Flag data to submit.  (required)
     * @return ApiResponse&lt;SubmitFeatureFlagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted Feature Flag that is of a valid format will be eventually available in Jira.  Details of which Feature Flags were submitted and which failed submission (due to data format problems etc.) are available in the response object.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  Note that in the case of an individual Feature Flag having an invalid format (rather than the request as a whole) the response for the request will be a 202 and details of the invalid Feature Flag will be contained in the response object.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Feature Flags module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer Feature Flags in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubmitFeatureFlagsResponse> submitFeatureFlagsWithHttpInfo(String authorization, SubmitFeatureFlagRequest submitFeatureFlagRequest) throws ApiException {
        okhttp3.Call localVarCall = submitFeatureFlagsValidateBeforeCall(authorization, submitFeatureFlagRequest, null);
        Type localVarReturnType = new TypeToken<SubmitFeatureFlagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit Feature Flag data (asynchronously)
     * Update / insert Feature Flag data.  Feature Flags are identified by their ID, and existing Feature Flag data for the same ID will be replaced if it exists and the updateSequenceId of existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The getFeatureFlagById operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple Feature Flags being submitted in one request, each is validated individually prior to submission. Details of which Feature Flags failed submission (if any) are available in the response object.  Only Connect apps that define the &#x60;jiraFeatureFlagInfoProvider&#x60; module can access this resource. This resource requires the &#39;WRITE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param submitFeatureFlagRequest Feature Flag data to submit.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted Feature Flag that is of a valid format will be eventually available in Jira.  Details of which Feature Flags were submitted and which failed submission (due to data format problems etc.) are available in the response object.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  Note that in the case of an individual Feature Flag having an invalid format (rather than the request as a whole) the response for the request will be a 202 and details of the invalid Feature Flag will be contained in the response object.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Feature Flags module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer Feature Flags in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitFeatureFlagsAsync(String authorization, SubmitFeatureFlagRequest submitFeatureFlagRequest, final ApiCallback<SubmitFeatureFlagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitFeatureFlagsValidateBeforeCall(authorization, submitFeatureFlagRequest, _callback);
        Type localVarReturnType = new TypeToken<SubmitFeatureFlagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
