/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.api;

import com.atlassian.jira.invoker.ApiCallback;
import com.atlassian.jira.invoker.ApiClient;
import com.atlassian.jira.invoker.ApiException;
import com.atlassian.jira.invoker.ApiResponse;
import com.atlassian.jira.invoker.Configuration;
import com.atlassian.jira.invoker.Pair;
import com.atlassian.jira.invoker.ProgressRequestBody;
import com.atlassian.jira.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.atlassian.jira.software.model.DevInformation;
import com.atlassian.jira.software.model.ErrorMessages;
import com.atlassian.jira.software.model.ExistsForPropertiesResponse;
import com.atlassian.jira.software.model.Repository;
import com.atlassian.jira.software.model.StoreDevinfoResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DevelopmentInformationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DevelopmentInformationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DevelopmentInformationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteByProperties
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param updateSequenceId An optional property to use to control deletion. Only stored data with an updateSequenceId less than or equal to that provided will be deleted. This can be used to help ensure submit/delete requests are applied correctly if they are issued close together.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format. It will fail in the following cases: If no query properties are specified. If &#x60;_updateSequenceId&#x60; is not a numeric value. If multiple values of the same property key are specified. Deleting data for many property values, for the same property key, requires multiple requests to this resource.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;DELETE&#39; scope </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteByPropertiesCall(String authorization, Long updateSequenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/devinfo/0.10/bulkByProperties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateSequenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_updateSequenceId", updateSequenceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByPropertiesValidateBeforeCall(String authorization, Long updateSequenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteByProperties(Async)");
        }

        return deleteByPropertiesCall(authorization, updateSequenceId, _callback);

    }

    /**
     * Delete development information by properties
     * Deletes development information entities which have all the provided properties. Repositories which have properties that match ALL of the properties (i.e. treated as an AND), and all their related development information (such as commits, branches and pull requests), will be deleted. For example if request is &#x60;DELETE bulk?accountId&#x3D;123&amp;projectId&#x3D;ABC&#x60; entities which have properties &#x60;accountId&#x3D;123&#x60; and &#x60;projectId&#x3D;ABC&#x60; will be deleted. Optional param &#x60;_updateSequenceId&#x60; is no longer supported. Deletion is performed asynchronously: specified entities will eventually be removed from Jira. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param updateSequenceId An optional property to use to control deletion. Only stored data with an updateSequenceId less than or equal to that provided will be deleted. This can be used to help ensure submit/delete requests are applied correctly if they are issued close together.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format. It will fail in the following cases: If no query properties are specified. If &#x60;_updateSequenceId&#x60; is not a numeric value. If multiple values of the same property key are specified. Deleting data for many property values, for the same property key, requires multiple requests to this resource.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;DELETE&#39; scope </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteByProperties(String authorization, Long updateSequenceId) throws ApiException {
        deleteByPropertiesWithHttpInfo(authorization, updateSequenceId);
    }

    /**
     * Delete development information by properties
     * Deletes development information entities which have all the provided properties. Repositories which have properties that match ALL of the properties (i.e. treated as an AND), and all their related development information (such as commits, branches and pull requests), will be deleted. For example if request is &#x60;DELETE bulk?accountId&#x3D;123&amp;projectId&#x3D;ABC&#x60; entities which have properties &#x60;accountId&#x3D;123&#x60; and &#x60;projectId&#x3D;ABC&#x60; will be deleted. Optional param &#x60;_updateSequenceId&#x60; is no longer supported. Deletion is performed asynchronously: specified entities will eventually be removed from Jira. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param updateSequenceId An optional property to use to control deletion. Only stored data with an updateSequenceId less than or equal to that provided will be deleted. This can be used to help ensure submit/delete requests are applied correctly if they are issued close together.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format. It will fail in the following cases: If no query properties are specified. If &#x60;_updateSequenceId&#x60; is not a numeric value. If multiple values of the same property key are specified. Deleting data for many property values, for the same property key, requires multiple requests to this resource.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;DELETE&#39; scope </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteByPropertiesWithHttpInfo(String authorization, Long updateSequenceId) throws ApiException {
        okhttp3.Call localVarCall = deleteByPropertiesValidateBeforeCall(authorization, updateSequenceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete development information by properties (asynchronously)
     * Deletes development information entities which have all the provided properties. Repositories which have properties that match ALL of the properties (i.e. treated as an AND), and all their related development information (such as commits, branches and pull requests), will be deleted. For example if request is &#x60;DELETE bulk?accountId&#x3D;123&amp;projectId&#x3D;ABC&#x60; entities which have properties &#x60;accountId&#x3D;123&#x60; and &#x60;projectId&#x3D;ABC&#x60; will be deleted. Optional param &#x60;_updateSequenceId&#x60; is no longer supported. Deletion is performed asynchronously: specified entities will eventually be removed from Jira. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param updateSequenceId An optional property to use to control deletion. Only stored data with an updateSequenceId less than or equal to that provided will be deleted. This can be used to help ensure submit/delete requests are applied correctly if they are issued close together.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format. It will fail in the following cases: If no query properties are specified. If &#x60;_updateSequenceId&#x60; is not a numeric value. If multiple values of the same property key are specified. Deleting data for many property values, for the same property key, requires multiple requests to this resource.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;DELETE&#39; scope </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteByPropertiesAsync(String authorization, Long updateSequenceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByPropertiesValidateBeforeCall(authorization, updateSequenceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEntity
     * @param repositoryId  (required)
     * @param entityType  (required)
     * @param entityId  (required)
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param updateSequenceId An optional property to use to control deletion. Only stored data with an updateSequenceId less than or equal to that provided will be deleted. This can be used to help ensure submit/delete requests are applied correctly if they are issued close together.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete request has been accepted. Data will eventually be removed from Jira if it exists. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong entity type specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;DELETE&#39; scope </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEntityCall(String repositoryId, String entityType, String entityId, String authorization, Long updateSequenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/devinfo/0.10/repository/{repositoryId}/{entityType}/{entityId}"
            .replace("{" + "repositoryId" + "}", localVarApiClient.escapeString(repositoryId.toString()))
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateSequenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_updateSequenceId", updateSequenceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEntityValidateBeforeCall(String repositoryId, String entityType, String entityId, String authorization, Long updateSequenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling deleteEntity(Async)");
        }

        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling deleteEntity(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling deleteEntity(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteEntity(Async)");
        }

        return deleteEntityCall(repositoryId, entityType, entityId, authorization, updateSequenceId, _callback);

    }

    /**
     * Delete development information entity
     * Deletes particular development information entity. Deletion is performed asynchronously.
     * @param repositoryId  (required)
     * @param entityType  (required)
     * @param entityId  (required)
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param updateSequenceId An optional property to use to control deletion. Only stored data with an updateSequenceId less than or equal to that provided will be deleted. This can be used to help ensure submit/delete requests are applied correctly if they are issued close together.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete request has been accepted. Data will eventually be removed from Jira if it exists. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong entity type specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;DELETE&#39; scope </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEntity(String repositoryId, String entityType, String entityId, String authorization, Long updateSequenceId) throws ApiException {
        deleteEntityWithHttpInfo(repositoryId, entityType, entityId, authorization, updateSequenceId);
    }

    /**
     * Delete development information entity
     * Deletes particular development information entity. Deletion is performed asynchronously.
     * @param repositoryId  (required)
     * @param entityType  (required)
     * @param entityId  (required)
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param updateSequenceId An optional property to use to control deletion. Only stored data with an updateSequenceId less than or equal to that provided will be deleted. This can be used to help ensure submit/delete requests are applied correctly if they are issued close together.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete request has been accepted. Data will eventually be removed from Jira if it exists. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong entity type specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;DELETE&#39; scope </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEntityWithHttpInfo(String repositoryId, String entityType, String entityId, String authorization, Long updateSequenceId) throws ApiException {
        okhttp3.Call localVarCall = deleteEntityValidateBeforeCall(repositoryId, entityType, entityId, authorization, updateSequenceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete development information entity (asynchronously)
     * Deletes particular development information entity. Deletion is performed asynchronously.
     * @param repositoryId  (required)
     * @param entityType  (required)
     * @param entityId  (required)
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param updateSequenceId An optional property to use to control deletion. Only stored data with an updateSequenceId less than or equal to that provided will be deleted. This can be used to help ensure submit/delete requests are applied correctly if they are issued close together.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete request has been accepted. Data will eventually be removed from Jira if it exists. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong entity type specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;DELETE&#39; scope </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEntityAsync(String repositoryId, String entityType, String entityId, String authorization, Long updateSequenceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEntityValidateBeforeCall(repositoryId, entityType, entityId, authorization, updateSequenceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRepository
     * @param repositoryId The ID of repository to delete (required)
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param updateSequenceId An optional property to use to control deletion. Only stored data with an updateSequenceId less than or equal to that provided will be deleted. This can be used to help ensure submit/delete requests are applied correctly if they are issued close together.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete request has been accepted. Data will eventually be removed from Jira if it exists. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;DELETE&#39; scope </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryCall(String repositoryId, String authorization, Long updateSequenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/devinfo/0.10/repository/{repositoryId}"
            .replace("{" + "repositoryId" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateSequenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_updateSequenceId", updateSequenceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRepositoryValidateBeforeCall(String repositoryId, String authorization, Long updateSequenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling deleteRepository(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteRepository(Async)");
        }

        return deleteRepositoryCall(repositoryId, authorization, updateSequenceId, _callback);

    }

    /**
     * Delete repository
     * Deletes the repository data stored by the given ID and all related development information entities. Deletion is performed asynchronously.
     * @param repositoryId The ID of repository to delete (required)
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param updateSequenceId An optional property to use to control deletion. Only stored data with an updateSequenceId less than or equal to that provided will be deleted. This can be used to help ensure submit/delete requests are applied correctly if they are issued close together.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete request has been accepted. Data will eventually be removed from Jira if it exists. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;DELETE&#39; scope </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRepository(String repositoryId, String authorization, Long updateSequenceId) throws ApiException {
        deleteRepositoryWithHttpInfo(repositoryId, authorization, updateSequenceId);
    }

    /**
     * Delete repository
     * Deletes the repository data stored by the given ID and all related development information entities. Deletion is performed asynchronously.
     * @param repositoryId The ID of repository to delete (required)
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param updateSequenceId An optional property to use to control deletion. Only stored data with an updateSequenceId less than or equal to that provided will be deleted. This can be used to help ensure submit/delete requests are applied correctly if they are issued close together.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete request has been accepted. Data will eventually be removed from Jira if it exists. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;DELETE&#39; scope </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRepositoryWithHttpInfo(String repositoryId, String authorization, Long updateSequenceId) throws ApiException {
        okhttp3.Call localVarCall = deleteRepositoryValidateBeforeCall(repositoryId, authorization, updateSequenceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete repository (asynchronously)
     * Deletes the repository data stored by the given ID and all related development information entities. Deletion is performed asynchronously.
     * @param repositoryId The ID of repository to delete (required)
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param updateSequenceId An optional property to use to control deletion. Only stored data with an updateSequenceId less than or equal to that provided will be deleted. This can be used to help ensure submit/delete requests are applied correctly if they are issued close together.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete request has been accepted. Data will eventually be removed from Jira if it exists. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;DELETE&#39; scope </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryAsync(String repositoryId, String authorization, Long updateSequenceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRepositoryValidateBeforeCall(repositoryId, authorization, updateSequenceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for existsByProperties
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param updateSequenceId An optional property. Filters out entities and repositories which have updateSequenceId greater than specified.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether data exists for the specified properties.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format. It will fail in the following cases: If no query properties are specified. If &#x60;_updateSequenceId&#x60; is not a numeric value. If multiple values of the same property key are specified.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;READ&#39; scope </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call existsByPropertiesCall(String authorization, Long updateSequenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/devinfo/0.10/existsByProperties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateSequenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_updateSequenceId", updateSequenceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call existsByPropertiesValidateBeforeCall(String authorization, Long updateSequenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling existsByProperties(Async)");
        }

        return existsByPropertiesCall(authorization, updateSequenceId, _callback);

    }

    /**
     * Check if data exists for the supplied properties
     * Checks if repositories which have all the provided properties exists. For example, if request is &#x60;GET existsByProperties?accountId&#x3D;123&amp;projectId&#x3D;ABC&#x60; then result will be positive only if there is at least one repository with both properties &#x60;accountId&#x3D;123&#x60; and &#x60;projectId&#x3D;ABC&#x60;. Special property &#x60;_updateSequenceId&#x60; can be used to filter all entities with updateSequenceId less or equal than the value specified. In addition to the optional &#x60;_updateSequenceId&#x60;, one or more query params must be supplied to specify properties to search by. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param updateSequenceId An optional property. Filters out entities and repositories which have updateSequenceId greater than specified.  (optional)
     * @return ExistsForPropertiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether data exists for the specified properties.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format. It will fail in the following cases: If no query properties are specified. If &#x60;_updateSequenceId&#x60; is not a numeric value. If multiple values of the same property key are specified.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;READ&#39; scope </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public ExistsForPropertiesResponse existsByProperties(String authorization, Long updateSequenceId) throws ApiException {
        ApiResponse<ExistsForPropertiesResponse> localVarResp = existsByPropertiesWithHttpInfo(authorization, updateSequenceId);
        return localVarResp.getData();
    }

    /**
     * Check if data exists for the supplied properties
     * Checks if repositories which have all the provided properties exists. For example, if request is &#x60;GET existsByProperties?accountId&#x3D;123&amp;projectId&#x3D;ABC&#x60; then result will be positive only if there is at least one repository with both properties &#x60;accountId&#x3D;123&#x60; and &#x60;projectId&#x3D;ABC&#x60;. Special property &#x60;_updateSequenceId&#x60; can be used to filter all entities with updateSequenceId less or equal than the value specified. In addition to the optional &#x60;_updateSequenceId&#x60;, one or more query params must be supplied to specify properties to search by. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param updateSequenceId An optional property. Filters out entities and repositories which have updateSequenceId greater than specified.  (optional)
     * @return ApiResponse&lt;ExistsForPropertiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether data exists for the specified properties.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format. It will fail in the following cases: If no query properties are specified. If &#x60;_updateSequenceId&#x60; is not a numeric value. If multiple values of the same property key are specified.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;READ&#39; scope </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExistsForPropertiesResponse> existsByPropertiesWithHttpInfo(String authorization, Long updateSequenceId) throws ApiException {
        okhttp3.Call localVarCall = existsByPropertiesValidateBeforeCall(authorization, updateSequenceId, null);
        Type localVarReturnType = new TypeToken<ExistsForPropertiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if data exists for the supplied properties (asynchronously)
     * Checks if repositories which have all the provided properties exists. For example, if request is &#x60;GET existsByProperties?accountId&#x3D;123&amp;projectId&#x3D;ABC&#x60; then result will be positive only if there is at least one repository with both properties &#x60;accountId&#x3D;123&#x60; and &#x60;projectId&#x3D;ABC&#x60;. Special property &#x60;_updateSequenceId&#x60; can be used to filter all entities with updateSequenceId less or equal than the value specified. In addition to the optional &#x60;_updateSequenceId&#x60;, one or more query params must be supplied to specify properties to search by. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param updateSequenceId An optional property. Filters out entities and repositories which have updateSequenceId greater than specified.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether data exists for the specified properties.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format. It will fail in the following cases: If no query properties are specified. If &#x60;_updateSequenceId&#x60; is not a numeric value. If multiple values of the same property key are specified.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;READ&#39; scope </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call existsByPropertiesAsync(String authorization, Long updateSequenceId, final ApiCallback<ExistsForPropertiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = existsByPropertiesValidateBeforeCall(authorization, updateSequenceId, _callback);
        Type localVarReturnType = new TypeToken<ExistsForPropertiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepository
     * @param repositoryId The ID of repository to fetch (required)
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repository data currently stored for the given ID. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;READ&#39; scope </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given repository ID. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryCall(String repositoryId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/devinfo/0.10/repository/{repositoryId}"
            .replace("{" + "repositoryId" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepositoryValidateBeforeCall(String repositoryId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling getRepository(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getRepository(Async)");
        }

        return getRepositoryCall(repositoryId, authorization, _callback);

    }

    /**
     * Get repository
     * For the specified repository ID, retrieves the repository and the most recent 400 development information entities. The result will be what is currently stored, ignoring any pending updates or deletes.
     * @param repositoryId The ID of repository to fetch (required)
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repository data currently stored for the given ID. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;READ&#39; scope </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given repository ID. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public Repository getRepository(String repositoryId, String authorization) throws ApiException {
        ApiResponse<Repository> localVarResp = getRepositoryWithHttpInfo(repositoryId, authorization);
        return localVarResp.getData();
    }

    /**
     * Get repository
     * For the specified repository ID, retrieves the repository and the most recent 400 development information entities. The result will be what is currently stored, ignoring any pending updates or deletes.
     * @param repositoryId The ID of repository to fetch (required)
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repository data currently stored for the given ID. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;READ&#39; scope </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given repository ID. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Repository> getRepositoryWithHttpInfo(String repositoryId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getRepositoryValidateBeforeCall(repositoryId, authorization, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get repository (asynchronously)
     * For the specified repository ID, retrieves the repository and the most recent 400 development information entities. The result will be what is currently stored, ignoring any pending updates or deletes.
     * @param repositoryId The ID of repository to fetch (required)
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repository data currently stored for the given ID. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;READ&#39; scope </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given repository ID. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryAsync(String repositoryId, String authorization, final ApiCallback<Repository> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepositoryValidateBeforeCall(repositoryId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storeDevelopmentInformation
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param devInformation Request object, which contains development information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted repository and entity that is of a valid format will be eventually available in Jira. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format. It will fail in the following cases: If no repositories or development information entities were provided, or  more than 5 properties were submitted, or there are one or more properties with leading underscore &#39;_&#39; symbol in their keys. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;WRITE&#39; scope </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer devinfo entities in each payload. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  * X-RateLimit-Remaining - The number of remaining possible requests in current rate limit window. <br>  * X-RateLimit-Reset - The date in ISO 8601 format when the rate limit values will be next reset. <br>  * X-RateLimit-Limit - The maximum possible requests in a window of one minute. <br>  * Retry-After - The number of seconds to wait before making a follow-up request. <br>  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storeDevelopmentInformationCall(String authorization, DevInformation devInformation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = devInformation;

        // create path and map variables
        String localVarPath = "/rest/devinfo/0.10/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storeDevelopmentInformationValidateBeforeCall(String authorization, DevInformation devInformation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling storeDevelopmentInformation(Async)");
        }

        // verify the required parameter 'devInformation' is set
        if (devInformation == null) {
            throw new ApiException("Missing the required parameter 'devInformation' when calling storeDevelopmentInformation(Async)");
        }

        return storeDevelopmentInformationCall(authorization, devInformation, _callback);

    }

    /**
     * Store development information
     * Stores development information provided in the request to make it available when viewing issues in Jira. Existing repository and entity data for the same ID will be replaced if the updateSequenceId of existing data is less than the incoming data. Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times.
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param devInformation Request object, which contains development information (required)
     * @return StoreDevinfoResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted repository and entity that is of a valid format will be eventually available in Jira. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format. It will fail in the following cases: If no repositories or development information entities were provided, or  more than 5 properties were submitted, or there are one or more properties with leading underscore &#39;_&#39; symbol in their keys. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;WRITE&#39; scope </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer devinfo entities in each payload. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  * X-RateLimit-Remaining - The number of remaining possible requests in current rate limit window. <br>  * X-RateLimit-Reset - The date in ISO 8601 format when the rate limit values will be next reset. <br>  * X-RateLimit-Limit - The maximum possible requests in a window of one minute. <br>  * Retry-After - The number of seconds to wait before making a follow-up request. <br>  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public StoreDevinfoResult storeDevelopmentInformation(String authorization, DevInformation devInformation) throws ApiException {
        ApiResponse<StoreDevinfoResult> localVarResp = storeDevelopmentInformationWithHttpInfo(authorization, devInformation);
        return localVarResp.getData();
    }

    /**
     * Store development information
     * Stores development information provided in the request to make it available when viewing issues in Jira. Existing repository and entity data for the same ID will be replaced if the updateSequenceId of existing data is less than the incoming data. Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times.
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param devInformation Request object, which contains development information (required)
     * @return ApiResponse&lt;StoreDevinfoResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted repository and entity that is of a valid format will be eventually available in Jira. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format. It will fail in the following cases: If no repositories or development information entities were provided, or  more than 5 properties were submitted, or there are one or more properties with leading underscore &#39;_&#39; symbol in their keys. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;WRITE&#39; scope </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer devinfo entities in each payload. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  * X-RateLimit-Remaining - The number of remaining possible requests in current rate limit window. <br>  * X-RateLimit-Reset - The date in ISO 8601 format when the rate limit values will be next reset. <br>  * X-RateLimit-Limit - The maximum possible requests in a window of one minute. <br>  * Retry-After - The number of seconds to wait before making a follow-up request. <br>  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoreDevinfoResult> storeDevelopmentInformationWithHttpInfo(String authorization, DevInformation devInformation) throws ApiException {
        okhttp3.Call localVarCall = storeDevelopmentInformationValidateBeforeCall(authorization, devInformation, null);
        Type localVarReturnType = new TypeToken<StoreDevinfoResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Store development information (asynchronously)
     * Stores development information provided in the request to make it available when viewing issues in Jira. Existing repository and entity data for the same ID will be replaced if the updateSequenceId of existing data is less than the incoming data. Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times.
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. (required)
     * @param devInformation Request object, which contains development information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted repository and entity that is of a valid format will be eventually available in Jira. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format. It will fail in the following cases: If no repositories or development information entities were provided, or  more than 5 properties were submitted, or there are one or more properties with leading underscore &#39;_&#39; symbol in their keys. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the jiraDevelopmentTool module, or the app does not define the &#39;WRITE&#39; scope </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer devinfo entities in each payload. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded. </td><td>  * X-RateLimit-Remaining - The number of remaining possible requests in current rate limit window. <br>  * X-RateLimit-Reset - The date in ISO 8601 format when the rate limit values will be next reset. <br>  * X-RateLimit-Limit - The maximum possible requests in a window of one minute. <br>  * Retry-After - The number of seconds to wait before making a follow-up request. <br>  </td></tr>
        <tr><td> 500 </td><td> An unknown error has occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storeDevelopmentInformationAsync(String authorization, DevInformation devInformation, final ApiCallback<StoreDevinfoResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = storeDevelopmentInformationValidateBeforeCall(authorization, devInformation, _callback);
        Type localVarReturnType = new TypeToken<StoreDevinfoResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
