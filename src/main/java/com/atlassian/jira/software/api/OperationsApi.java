/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.api;

import com.atlassian.jira.invoker.ApiCallback;
import com.atlassian.jira.invoker.ApiClient;
import com.atlassian.jira.invoker.ApiException;
import com.atlassian.jira.invoker.ApiResponse;
import com.atlassian.jira.invoker.Configuration;
import com.atlassian.jira.invoker.Pair;
import com.atlassian.jira.invoker.ProgressRequestBody;
import com.atlassian.jira.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.atlassian.jira.software.model.ErrorMessage1;
import com.atlassian.jira.software.model.GetIncidentById200Response;
import com.atlassian.jira.software.model.GetReviewById200Response;
import com.atlassian.jira.software.model.OperationsWorkspaceIds;
import com.atlassian.jira.software.model.SubmitIncidentsRequest;
import com.atlassian.jira.software.model.SubmitIncidentsResponse;
import com.atlassian.jira.software.model.SubmitOperationsWorkspacesRequest;
import com.atlassian.jira.software.model.SubmitOperationsWorkspacesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OperationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OperationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OperationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteEntityByProperty
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format (e.g. missing at least one Property param).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEntityByPropertyCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/operations/1.0/bulkByProperties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEntityByPropertyValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteEntityByProperty(Async)");
        }

        return deleteEntityByPropertyCall(authorization, _callback);

    }

    /**
     * Delete Incidents or Review by Property
     * Bulk delete all Entties that match the given request.  One or more query params must be supplied to specify Properties to delete by. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND). See the documentation for the submitEntity operation for more details.  e.g. DELETE /bulkByProperties?accountId&#x3D;account-123&amp;createdBy&#x3D;user-456  Deletion is performed asynchronously. The getIncidentById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format (e.g. missing at least one Property param).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEntityByProperty(String authorization) throws ApiException {
        deleteEntityByPropertyWithHttpInfo(authorization);
    }

    /**
     * Delete Incidents or Review by Property
     * Bulk delete all Entties that match the given request.  One or more query params must be supplied to specify Properties to delete by. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND). See the documentation for the submitEntity operation for more details.  e.g. DELETE /bulkByProperties?accountId&#x3D;account-123&amp;createdBy&#x3D;user-456  Deletion is performed asynchronously. The getIncidentById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format (e.g. missing at least one Property param).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEntityByPropertyWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteEntityByPropertyValidateBeforeCall(authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Incidents or Review by Property (asynchronously)
     * Bulk delete all Entties that match the given request.  One or more query params must be supplied to specify Properties to delete by. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND). See the documentation for the submitEntity operation for more details.  e.g. DELETE /bulkByProperties?accountId&#x3D;account-123&amp;createdBy&#x3D;user-456  Deletion is performed asynchronously. The getIncidentById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format (e.g. missing at least one Property param).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEntityByPropertyAsync(String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEntityByPropertyValidateBeforeCall(authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIncidentById
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param incidentId The ID of the Incident to delete.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIncidentByIdCall(String authorization, String incidentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/operations/1.0/incidents/{incidentId}"
            .replace("{" + "incidentId" + "}", localVarApiClient.escapeString(incidentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIncidentByIdValidateBeforeCall(String authorization, String incidentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteIncidentById(Async)");
        }

        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling deleteIncidentById(Async)");
        }

        return deleteIncidentByIdCall(authorization, incidentId, _callback);

    }

    /**
     * Delete a Incident by ID
     * Delete the Incident data currently stored for the given ID.  Deletion is performed asynchronously. The getIncidentById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param incidentId The ID of the Incident to delete.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteIncidentById(String authorization, String incidentId) throws ApiException {
        deleteIncidentByIdWithHttpInfo(authorization, incidentId);
    }

    /**
     * Delete a Incident by ID
     * Delete the Incident data currently stored for the given ID.  Deletion is performed asynchronously. The getIncidentById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param incidentId The ID of the Incident to delete.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteIncidentByIdWithHttpInfo(String authorization, String incidentId) throws ApiException {
        okhttp3.Call localVarCall = deleteIncidentByIdValidateBeforeCall(authorization, incidentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Incident by ID (asynchronously)
     * Delete the Incident data currently stored for the given ID.  Deletion is performed asynchronously. The getIncidentById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param incidentId The ID of the Incident to delete.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIncidentByIdAsync(String authorization, String incidentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIncidentByIdValidateBeforeCall(authorization, incidentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteReviewById
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param reviewId The ID of the Review to delete.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReviewByIdCall(String authorization, String reviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/operations/1.0/post-incident-reviews/{reviewId}"
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReviewByIdValidateBeforeCall(String authorization, String reviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteReviewById(Async)");
        }

        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling deleteReviewById(Async)");
        }

        return deleteReviewByIdCall(authorization, reviewId, _callback);

    }

    /**
     * Delete a Review by ID
     * Delete the Review data currently stored for the given ID.  Deletion is performed asynchronously. The getReviewById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param reviewId The ID of the Review to delete.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteReviewById(String authorization, String reviewId) throws ApiException {
        deleteReviewByIdWithHttpInfo(authorization, reviewId);
    }

    /**
     * Delete a Review by ID
     * Delete the Review data currently stored for the given ID.  Deletion is performed asynchronously. The getReviewById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param reviewId The ID of the Review to delete.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteReviewByIdWithHttpInfo(String authorization, String reviewId) throws ApiException {
        okhttp3.Call localVarCall = deleteReviewByIdValidateBeforeCall(authorization, reviewId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Review by ID (asynchronously)
     * Delete the Review data currently stored for the given ID.  Deletion is performed asynchronously. The getReviewById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param reviewId The ID of the Review to delete.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReviewByIdAsync(String authorization, String reviewId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReviewByIdValidateBeforeCall(authorization, reviewId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWorkspaces
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Workspaces and relate data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorkspacesCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/operations/1.0/linkedWorkspaces/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWorkspacesValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteWorkspaces(Async)");
        }

        return deleteWorkspacesCall(authorization, _callback);

    }

    /**
     * Delete Operations Workpaces by Id
     * Bulk delete all Operations Workspaces that match the given request.  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps.  e.g. DELETE /bulk?workspaceIds&#x3D;111-222-333,444-555-666 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Workspaces and relate data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteWorkspaces(String authorization) throws ApiException {
        deleteWorkspacesWithHttpInfo(authorization);
    }

    /**
     * Delete Operations Workpaces by Id
     * Bulk delete all Operations Workspaces that match the given request.  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps.  e.g. DELETE /bulk?workspaceIds&#x3D;111-222-333,444-555-666 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Workspaces and relate data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWorkspacesWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteWorkspacesValidateBeforeCall(authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Operations Workpaces by Id (asynchronously)
     * Bulk delete all Operations Workspaces that match the given request.  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps.  e.g. DELETE /bulk?workspaceIds&#x3D;111-222-333,444-555-666 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Workspaces and relate data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorkspacesAsync(String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWorkspacesValidateBeforeCall(authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIncidentById
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param incidentId The ID of the Incident to fetch.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Incident data currently stored for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given Incident ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIncidentByIdCall(String authorization, String incidentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/operations/1.0/incidents/{incidentId}"
            .replace("{" + "incidentId" + "}", localVarApiClient.escapeString(incidentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIncidentByIdValidateBeforeCall(String authorization, String incidentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getIncidentById(Async)");
        }

        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling getIncidentById(Async)");
        }

        return getIncidentByIdCall(authorization, incidentId, _callback);

    }

    /**
     * Get a Incident by ID
     * Retrieve the currently stored Incident data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;READ&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param incidentId The ID of the Incident to fetch.  (required)
     * @return GetIncidentById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Incident data currently stored for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given Incident ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public GetIncidentById200Response getIncidentById(String authorization, String incidentId) throws ApiException {
        ApiResponse<GetIncidentById200Response> localVarResp = getIncidentByIdWithHttpInfo(authorization, incidentId);
        return localVarResp.getData();
    }

    /**
     * Get a Incident by ID
     * Retrieve the currently stored Incident data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;READ&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param incidentId The ID of the Incident to fetch.  (required)
     * @return ApiResponse&lt;GetIncidentById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Incident data currently stored for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given Incident ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetIncidentById200Response> getIncidentByIdWithHttpInfo(String authorization, String incidentId) throws ApiException {
        okhttp3.Call localVarCall = getIncidentByIdValidateBeforeCall(authorization, incidentId, null);
        Type localVarReturnType = new TypeToken<GetIncidentById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Incident by ID (asynchronously)
     * Retrieve the currently stored Incident data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;READ&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param incidentId The ID of the Incident to fetch.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Incident data currently stored for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given Incident ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIncidentByIdAsync(String authorization, String incidentId, final ApiCallback<GetIncidentById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIncidentByIdValidateBeforeCall(authorization, incidentId, _callback);
        Type localVarReturnType = new TypeToken<GetIncidentById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReviewById
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param reviewId The ID of the Review to fetch.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Review data currently stored for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given Review ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReviewByIdCall(String authorization, String reviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/operations/1.0/post-incident-reviews/{reviewId}"
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReviewByIdValidateBeforeCall(String authorization, String reviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getReviewById(Async)");
        }

        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling getReviewById(Async)");
        }

        return getReviewByIdCall(authorization, reviewId, _callback);

    }

    /**
     * Get a Review by ID
     * Retrieve the currently stored Review data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;READ&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param reviewId The ID of the Review to fetch.  (required)
     * @return GetReviewById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Review data currently stored for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given Review ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public GetReviewById200Response getReviewById(String authorization, String reviewId) throws ApiException {
        ApiResponse<GetReviewById200Response> localVarResp = getReviewByIdWithHttpInfo(authorization, reviewId);
        return localVarResp.getData();
    }

    /**
     * Get a Review by ID
     * Retrieve the currently stored Review data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;READ&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param reviewId The ID of the Review to fetch.  (required)
     * @return ApiResponse&lt;GetReviewById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Review data currently stored for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given Review ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetReviewById200Response> getReviewByIdWithHttpInfo(String authorization, String reviewId) throws ApiException {
        okhttp3.Call localVarCall = getReviewByIdValidateBeforeCall(authorization, reviewId, null);
        Type localVarReturnType = new TypeToken<GetReviewById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Review by ID (asynchronously)
     * Retrieve the currently stored Review data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;READ&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param reviewId The ID of the Review to fetch.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Review data currently stored for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given Review ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReviewByIdAsync(String authorization, String reviewId, final ApiCallback<GetReviewById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReviewByIdValidateBeforeCall(authorization, reviewId, _callback);
        Type localVarReturnType = new TypeToken<GetReviewById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWorkspaces
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Either the ID provided if stored or a list of available IDs.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given Workspace ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkspacesCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/operations/1.0/linkedWorkspaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkspacesValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getWorkspaces(Async)");
        }

        return getWorkspacesCall(authorization, _callback);

    }

    /**
     * Get all Operations Workspace IDs or a specific Operations Workspace by ID
     * Retrieve the either all Operations Workspace IDs associated with the Jira site or a specific Operations Workspace ID for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  e.g. GET /workspace?workspaceId&#x3D;111-222-333  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;READ&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @return OperationsWorkspaceIds
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Either the ID provided if stored or a list of available IDs.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given Workspace ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public OperationsWorkspaceIds getWorkspaces(String authorization) throws ApiException {
        ApiResponse<OperationsWorkspaceIds> localVarResp = getWorkspacesWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * Get all Operations Workspace IDs or a specific Operations Workspace by ID
     * Retrieve the either all Operations Workspace IDs associated with the Jira site or a specific Operations Workspace ID for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  e.g. GET /workspace?workspaceId&#x3D;111-222-333  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;READ&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @return ApiResponse&lt;OperationsWorkspaceIds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Either the ID provided if stored or a list of available IDs.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given Workspace ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationsWorkspaceIds> getWorkspacesWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = getWorkspacesValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<OperationsWorkspaceIds>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Operations Workspace IDs or a specific Operations Workspace by ID (asynchronously)
     * Retrieve the either all Operations Workspace IDs associated with the Jira site or a specific Operations Workspace ID for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  e.g. GET /workspace?workspaceId&#x3D;111-222-333  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;READ&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Either the ID provided if stored or a list of available IDs.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for the given Workspace ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkspacesAsync(String authorization, final ApiCallback<OperationsWorkspaceIds> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkspacesValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<OperationsWorkspaceIds>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitEntity
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param submitIncidentsRequest Incident data to submit.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted Incident that is of a valid format will be eventually available in Jira.  Details of which Incidents were submitted and which failed submission (due to data format problems etc.) are available in the response object.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  Note that in the case of an individual Incident having an invalid format (rather than the request as a whole) the response for the request will be a 202 and details of the invalid Incident will be contained in the response object.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer Incidents in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitEntityCall(String authorization, SubmitIncidentsRequest submitIncidentsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = submitIncidentsRequest;

        // create path and map variables
        String localVarPath = "/rest/operations/1.0/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitEntityValidateBeforeCall(String authorization, SubmitIncidentsRequest submitIncidentsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling submitEntity(Async)");
        }

        // verify the required parameter 'submitIncidentsRequest' is set
        if (submitIncidentsRequest == null) {
            throw new ApiException("Missing the required parameter 'submitIncidentsRequest' when calling submitEntity(Async)");
        }

        return submitEntityCall(authorization, submitIncidentsRequest, _callback);

    }

    /**
     * Submit Incident or Review data
     * Update / insert Incident or Review data.  Incidents and reviews are identified by their ID, and existing Incident and Review data for the same ID will be replaced if it exists and the updateSequenceNumber of existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The getIncidentById or getReviewById operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple Incidents and Reviews being submitted in one request, each is validated individually prior to submission. Details of which entities failed submission (if any) are available in the response object.  A maximum of 1000 incidents can be submitted in one request.  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;WRITE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param submitIncidentsRequest Incident data to submit.  (required)
     * @return SubmitIncidentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted Incident that is of a valid format will be eventually available in Jira.  Details of which Incidents were submitted and which failed submission (due to data format problems etc.) are available in the response object.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  Note that in the case of an individual Incident having an invalid format (rather than the request as a whole) the response for the request will be a 202 and details of the invalid Incident will be contained in the response object.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer Incidents in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public SubmitIncidentsResponse submitEntity(String authorization, SubmitIncidentsRequest submitIncidentsRequest) throws ApiException {
        ApiResponse<SubmitIncidentsResponse> localVarResp = submitEntityWithHttpInfo(authorization, submitIncidentsRequest);
        return localVarResp.getData();
    }

    /**
     * Submit Incident or Review data
     * Update / insert Incident or Review data.  Incidents and reviews are identified by their ID, and existing Incident and Review data for the same ID will be replaced if it exists and the updateSequenceNumber of existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The getIncidentById or getReviewById operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple Incidents and Reviews being submitted in one request, each is validated individually prior to submission. Details of which entities failed submission (if any) are available in the response object.  A maximum of 1000 incidents can be submitted in one request.  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;WRITE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param submitIncidentsRequest Incident data to submit.  (required)
     * @return ApiResponse&lt;SubmitIncidentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted Incident that is of a valid format will be eventually available in Jira.  Details of which Incidents were submitted and which failed submission (due to data format problems etc.) are available in the response object.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  Note that in the case of an individual Incident having an invalid format (rather than the request as a whole) the response for the request will be a 202 and details of the invalid Incident will be contained in the response object.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer Incidents in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubmitIncidentsResponse> submitEntityWithHttpInfo(String authorization, SubmitIncidentsRequest submitIncidentsRequest) throws ApiException {
        okhttp3.Call localVarCall = submitEntityValidateBeforeCall(authorization, submitIncidentsRequest, null);
        Type localVarReturnType = new TypeToken<SubmitIncidentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit Incident or Review data (asynchronously)
     * Update / insert Incident or Review data.  Incidents and reviews are identified by their ID, and existing Incident and Review data for the same ID will be replaced if it exists and the updateSequenceNumber of existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The getIncidentById or getReviewById operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple Incidents and Reviews being submitted in one request, each is validated individually prior to submission. Details of which entities failed submission (if any) are available in the response object.  A maximum of 1000 incidents can be submitted in one request.  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;WRITE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param submitIncidentsRequest Incident data to submit.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted Incident that is of a valid format will be eventually available in Jira.  Details of which Incidents were submitted and which failed submission (due to data format problems etc.) are available in the response object.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  Note that in the case of an individual Incident having an invalid format (rather than the request as a whole) the response for the request will be a 202 and details of the invalid Incident will be contained in the response object.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations Information module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer Incidents in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitEntityAsync(String authorization, SubmitIncidentsRequest submitIncidentsRequest, final ApiCallback<SubmitIncidentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitEntityValidateBeforeCall(authorization, submitIncidentsRequest, _callback);
        Type localVarReturnType = new TypeToken<SubmitIncidentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitOperationsWorkspaces
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param submitOperationsWorkspacesRequest Operations Workspace ids to submit.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted Operations Workspace ID will be linked to Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Set of Ids is too large. Submit fewer Ids in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitOperationsWorkspacesCall(String authorization, SubmitOperationsWorkspacesRequest submitOperationsWorkspacesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = submitOperationsWorkspacesRequest;

        // create path and map variables
        String localVarPath = "/rest/operations/1.0/linkedWorkspaces/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitOperationsWorkspacesValidateBeforeCall(String authorization, SubmitOperationsWorkspacesRequest submitOperationsWorkspacesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling submitOperationsWorkspaces(Async)");
        }

        // verify the required parameter 'submitOperationsWorkspacesRequest' is set
        if (submitOperationsWorkspacesRequest == null) {
            throw new ApiException("Missing the required parameter 'submitOperationsWorkspacesRequest' when calling submitOperationsWorkspaces(Async)");
        }

        return submitOperationsWorkspacesCall(authorization, submitOperationsWorkspacesRequest, _callback);

    }

    /**
     * Submit Operations Workspace Ids
     * Insert Operations Workspace IDs to establish a relationship between them and the Jira site the app is installed in. If a relationship between the Workspace ID and Jira already exists then the workspace ID will be ignored and Jira will process the rest of the entries.  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;WRITE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param submitOperationsWorkspacesRequest Operations Workspace ids to submit.  (required)
     * @return SubmitOperationsWorkspacesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted Operations Workspace ID will be linked to Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Set of Ids is too large. Submit fewer Ids in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public SubmitOperationsWorkspacesResponse submitOperationsWorkspaces(String authorization, SubmitOperationsWorkspacesRequest submitOperationsWorkspacesRequest) throws ApiException {
        ApiResponse<SubmitOperationsWorkspacesResponse> localVarResp = submitOperationsWorkspacesWithHttpInfo(authorization, submitOperationsWorkspacesRequest);
        return localVarResp.getData();
    }

    /**
     * Submit Operations Workspace Ids
     * Insert Operations Workspace IDs to establish a relationship between them and the Jira site the app is installed in. If a relationship between the Workspace ID and Jira already exists then the workspace ID will be ignored and Jira will process the rest of the entries.  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;WRITE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param submitOperationsWorkspacesRequest Operations Workspace ids to submit.  (required)
     * @return ApiResponse&lt;SubmitOperationsWorkspacesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted Operations Workspace ID will be linked to Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Set of Ids is too large. Submit fewer Ids in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubmitOperationsWorkspacesResponse> submitOperationsWorkspacesWithHttpInfo(String authorization, SubmitOperationsWorkspacesRequest submitOperationsWorkspacesRequest) throws ApiException {
        okhttp3.Call localVarCall = submitOperationsWorkspacesValidateBeforeCall(authorization, submitOperationsWorkspacesRequest, null);
        Type localVarReturnType = new TypeToken<SubmitOperationsWorkspacesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit Operations Workspace Ids (asynchronously)
     * Insert Operations Workspace IDs to establish a relationship between them and the Jira site the app is installed in. If a relationship between the Workspace ID and Jira already exists then the workspace ID will be ignored and Jira will process the rest of the entries.  Only Connect apps that define the &#x60;jiraOperationsInfoProvider&#x60; module can access this resource. This resource requires the &#39;WRITE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details.  (required)
     * @param submitOperationsWorkspacesRequest Operations Workspace ids to submit.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted Operations Workspace ID will be linked to Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the Operations module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Set of Ids is too large. Submit fewer Ids in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitOperationsWorkspacesAsync(String authorization, SubmitOperationsWorkspacesRequest submitOperationsWorkspacesRequest, final ApiCallback<SubmitOperationsWorkspacesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitOperationsWorkspacesValidateBeforeCall(authorization, submitOperationsWorkspacesRequest, _callback);
        Type localVarReturnType = new TypeToken<SubmitOperationsWorkspacesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
