/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.api;

import com.atlassian.jira.invoker.ApiCallback;
import com.atlassian.jira.invoker.ApiClient;
import com.atlassian.jira.invoker.ApiException;
import com.atlassian.jira.invoker.ApiResponse;
import com.atlassian.jira.invoker.Configuration;
import com.atlassian.jira.invoker.Pair;
import com.atlassian.jira.invoker.ProgressRequestBody;
import com.atlassian.jira.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.atlassian.jira.software.model.RemoteLinkData;
import com.atlassian.jira.software.model.SubmitRemoteLinks202Response;
import com.atlassian.jira.software.model.SubmitRemoteLinks202ResponseRejectedRemoteLinksValueInner;
import com.atlassian.jira.software.model.SubmitRemoteLinksRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RemoteLinksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RemoteLinksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RemoteLinksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteRemoteLinkById
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraRemoteLinkInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param remoteLinkId The ID of the Remote Link to fetch.  (required)
     * @param updateSequenceNumber This parameter usage is no longer supported.  An optional &#x60;_updateSequenceNumber&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceNumber&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraRemoteLinkInfoProvider&#x60; module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRemoteLinkByIdCall(String authorization, String remoteLinkId, Long updateSequenceNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/remotelinks/1.0/remotelink/{remoteLinkId}"
            .replace("{" + "remoteLinkId" + "}", localVarApiClient.escapeString(remoteLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateSequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_updateSequenceNumber", updateSequenceNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRemoteLinkByIdValidateBeforeCall(String authorization, String remoteLinkId, Long updateSequenceNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteRemoteLinkById(Async)");
        }

        // verify the required parameter 'remoteLinkId' is set
        if (remoteLinkId == null) {
            throw new ApiException("Missing the required parameter 'remoteLinkId' when calling deleteRemoteLinkById(Async)");
        }

        return deleteRemoteLinkByIdCall(authorization, remoteLinkId, updateSequenceNumber, _callback);

    }

    /**
     * Delete a Remote Link by ID
     * Delete the Remote Link data currently stored for the given ID.  Deletion is performed asynchronously. The &#x60;getRemoteLinkById&#x60; operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraRemoteLinkInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraRemoteLinkInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param remoteLinkId The ID of the Remote Link to fetch.  (required)
     * @param updateSequenceNumber This parameter usage is no longer supported.  An optional &#x60;_updateSequenceNumber&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceNumber&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraRemoteLinkInfoProvider&#x60; module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRemoteLinkById(String authorization, String remoteLinkId, Long updateSequenceNumber) throws ApiException {
        deleteRemoteLinkByIdWithHttpInfo(authorization, remoteLinkId, updateSequenceNumber);
    }

    /**
     * Delete a Remote Link by ID
     * Delete the Remote Link data currently stored for the given ID.  Deletion is performed asynchronously. The &#x60;getRemoteLinkById&#x60; operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraRemoteLinkInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraRemoteLinkInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param remoteLinkId The ID of the Remote Link to fetch.  (required)
     * @param updateSequenceNumber This parameter usage is no longer supported.  An optional &#x60;_updateSequenceNumber&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceNumber&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraRemoteLinkInfoProvider&#x60; module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRemoteLinkByIdWithHttpInfo(String authorization, String remoteLinkId, Long updateSequenceNumber) throws ApiException {
        okhttp3.Call localVarCall = deleteRemoteLinkByIdValidateBeforeCall(authorization, remoteLinkId, updateSequenceNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Remote Link by ID (asynchronously)
     * Delete the Remote Link data currently stored for the given ID.  Deletion is performed asynchronously. The &#x60;getRemoteLinkById&#x60; operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraRemoteLinkInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraRemoteLinkInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param remoteLinkId The ID of the Remote Link to fetch.  (required)
     * @param updateSequenceNumber This parameter usage is no longer supported.  An optional &#x60;_updateSequenceNumber&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceNumber&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraRemoteLinkInfoProvider&#x60; module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRemoteLinkByIdAsync(String authorization, String remoteLinkId, Long updateSequenceNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRemoteLinkByIdValidateBeforeCall(authorization, remoteLinkId, updateSequenceNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRemoteLinksByProperty
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraRemoteLinkInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param updateSequenceNumber This parameter usage is no longer supported.  An optional &#x60;_updateSequenceNumber&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceNumber&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  If not provided, all stored data that matches the request will be deleted.  (optional)
     * @param params Free-form query parameters to specify which properties to delete by. Properties refer to the arbitrary information the provider tagged Remote Links with previously.  For example, if the provider previously tagged a remote link with accountId:   \&quot;properties\&quot;: {     \&quot;accountId\&quot;: \&quot;account-123\&quot;   }  And now they want to delete Remote Links in bulk by that specific accountId as follows: e.g. DELETE /bulkByProperties?accountId&#x3D;account-123  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format (e.g. missing at least one Property param).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraRemoteLinkInfoProvider&#x60; module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRemoteLinksByPropertyCall(String authorization, Long updateSequenceNumber, Object params, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/remotelinks/1.0/bulkByProperties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateSequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_updateSequenceNumber", updateSequenceNumber));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(params));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRemoteLinksByPropertyValidateBeforeCall(String authorization, Long updateSequenceNumber, Object params, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteRemoteLinksByProperty(Async)");
        }

        return deleteRemoteLinksByPropertyCall(authorization, updateSequenceNumber, params, _callback);

    }

    /**
     * Delete Remote Links by Property
     * Bulk delete all Remote Links data that match the given request.  One or more query params must be supplied to specify Properties to delete by. Optional param &#x60;_updateSequenceNumber&#x60; is no longer supported. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND).  See the documentation for the &#x60;submitRemoteLinks&#x60; operation for more details.  e.g. DELETE /bulkByProperties?accountId&#x3D;account-123&amp;repoId&#x3D;repo-345  Deletion is performed asynchronously. The &#x60;getRemoteLinkById&#x60; operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraRemoteLinkInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraRemoteLinkInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param updateSequenceNumber This parameter usage is no longer supported.  An optional &#x60;_updateSequenceNumber&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceNumber&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  If not provided, all stored data that matches the request will be deleted.  (optional)
     * @param params Free-form query parameters to specify which properties to delete by. Properties refer to the arbitrary information the provider tagged Remote Links with previously.  For example, if the provider previously tagged a remote link with accountId:   \&quot;properties\&quot;: {     \&quot;accountId\&quot;: \&quot;account-123\&quot;   }  And now they want to delete Remote Links in bulk by that specific accountId as follows: e.g. DELETE /bulkByProperties?accountId&#x3D;account-123  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format (e.g. missing at least one Property param).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraRemoteLinkInfoProvider&#x60; module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRemoteLinksByProperty(String authorization, Long updateSequenceNumber, Object params) throws ApiException {
        deleteRemoteLinksByPropertyWithHttpInfo(authorization, updateSequenceNumber, params);
    }

    /**
     * Delete Remote Links by Property
     * Bulk delete all Remote Links data that match the given request.  One or more query params must be supplied to specify Properties to delete by. Optional param &#x60;_updateSequenceNumber&#x60; is no longer supported. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND).  See the documentation for the &#x60;submitRemoteLinks&#x60; operation for more details.  e.g. DELETE /bulkByProperties?accountId&#x3D;account-123&amp;repoId&#x3D;repo-345  Deletion is performed asynchronously. The &#x60;getRemoteLinkById&#x60; operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraRemoteLinkInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraRemoteLinkInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param updateSequenceNumber This parameter usage is no longer supported.  An optional &#x60;_updateSequenceNumber&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceNumber&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  If not provided, all stored data that matches the request will be deleted.  (optional)
     * @param params Free-form query parameters to specify which properties to delete by. Properties refer to the arbitrary information the provider tagged Remote Links with previously.  For example, if the provider previously tagged a remote link with accountId:   \&quot;properties\&quot;: {     \&quot;accountId\&quot;: \&quot;account-123\&quot;   }  And now they want to delete Remote Links in bulk by that specific accountId as follows: e.g. DELETE /bulkByProperties?accountId&#x3D;account-123  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format (e.g. missing at least one Property param).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraRemoteLinkInfoProvider&#x60; module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRemoteLinksByPropertyWithHttpInfo(String authorization, Long updateSequenceNumber, Object params) throws ApiException {
        okhttp3.Call localVarCall = deleteRemoteLinksByPropertyValidateBeforeCall(authorization, updateSequenceNumber, params, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Remote Links by Property (asynchronously)
     * Bulk delete all Remote Links data that match the given request.  One or more query params must be supplied to specify Properties to delete by. Optional param &#x60;_updateSequenceNumber&#x60; is no longer supported. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND).  See the documentation for the &#x60;submitRemoteLinks&#x60; operation for more details.  e.g. DELETE /bulkByProperties?accountId&#x3D;account-123&amp;repoId&#x3D;repo-345  Deletion is performed asynchronously. The &#x60;getRemoteLinkById&#x60; operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraRemoteLinkInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraRemoteLinkInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param updateSequenceNumber This parameter usage is no longer supported.  An optional &#x60;_updateSequenceNumber&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceNumber&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  If not provided, all stored data that matches the request will be deleted.  (optional)
     * @param params Free-form query parameters to specify which properties to delete by. Properties refer to the arbitrary information the provider tagged Remote Links with previously.  For example, if the provider previously tagged a remote link with accountId:   \&quot;properties\&quot;: {     \&quot;accountId\&quot;: \&quot;account-123\&quot;   }  And now they want to delete Remote Links in bulk by that specific accountId as follows: e.g. DELETE /bulkByProperties?accountId&#x3D;account-123  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format (e.g. missing at least one Property param).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraRemoteLinkInfoProvider&#x60; module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRemoteLinksByPropertyAsync(String authorization, Long updateSequenceNumber, Object params, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRemoteLinksByPropertyValidateBeforeCall(authorization, updateSequenceNumber, params, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRemoteLinkById
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraRemoteLinkInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param remoteLinkId The ID of the Remote Link to fetch.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Remote Link data currently stored for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraRemoteLinkInfoProvider&#x60; module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Remote Link data found for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRemoteLinkByIdCall(String authorization, String remoteLinkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/remotelinks/1.0/remotelink/{remoteLinkId}"
            .replace("{" + "remoteLinkId" + "}", localVarApiClient.escapeString(remoteLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRemoteLinkByIdValidateBeforeCall(String authorization, String remoteLinkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getRemoteLinkById(Async)");
        }

        // verify the required parameter 'remoteLinkId' is set
        if (remoteLinkId == null) {
            throw new ApiException("Missing the required parameter 'remoteLinkId' when calling getRemoteLinkById(Async)");
        }

        return getRemoteLinkByIdCall(authorization, remoteLinkId, _callback);

    }

    /**
     * Get a Remote Link by ID
     * Retrieve the currently stored Remote Link data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the &#x60;jiraRemoteLinkInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;READ&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraRemoteLinkInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param remoteLinkId The ID of the Remote Link to fetch.  (required)
     * @return RemoteLinkData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Remote Link data currently stored for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraRemoteLinkInfoProvider&#x60; module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Remote Link data found for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public RemoteLinkData getRemoteLinkById(String authorization, String remoteLinkId) throws ApiException {
        ApiResponse<RemoteLinkData> localVarResp = getRemoteLinkByIdWithHttpInfo(authorization, remoteLinkId);
        return localVarResp.getData();
    }

    /**
     * Get a Remote Link by ID
     * Retrieve the currently stored Remote Link data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the &#x60;jiraRemoteLinkInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;READ&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraRemoteLinkInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param remoteLinkId The ID of the Remote Link to fetch.  (required)
     * @return ApiResponse&lt;RemoteLinkData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Remote Link data currently stored for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraRemoteLinkInfoProvider&#x60; module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Remote Link data found for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemoteLinkData> getRemoteLinkByIdWithHttpInfo(String authorization, String remoteLinkId) throws ApiException {
        okhttp3.Call localVarCall = getRemoteLinkByIdValidateBeforeCall(authorization, remoteLinkId, null);
        Type localVarReturnType = new TypeToken<RemoteLinkData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Remote Link by ID (asynchronously)
     * Retrieve the currently stored Remote Link data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the &#x60;jiraRemoteLinkInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;READ&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraRemoteLinkInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param remoteLinkId The ID of the Remote Link to fetch.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Remote Link data currently stored for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraRemoteLinkInfoProvider&#x60; module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Remote Link data found for the given ID.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRemoteLinkByIdAsync(String authorization, String remoteLinkId, final ApiCallback<RemoteLinkData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRemoteLinkByIdValidateBeforeCall(authorization, remoteLinkId, _callback);
        Type localVarReturnType = new TypeToken<RemoteLinkData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitRemoteLinks
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraRemoteLinkInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param submitRemoteLinksRequest Remote Links data to submit.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted Remote Link that is of a valid format will be eventually available in Jira.  Details of which Remote Links were submitted and which failed submission (due to data format problems etc.) are available in the response object.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  Note that in the case of an individual Remote Link having an invalid format (rather than the request as a whole) the response for the request will be a 202 and details of the invalid Remote Link will be contained in the response object.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraRemoteLinkInfoProvider&#x60; module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer Remote Links in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitRemoteLinksCall(String authorization, SubmitRemoteLinksRequest submitRemoteLinksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = submitRemoteLinksRequest;

        // create path and map variables
        String localVarPath = "/rest/remotelinks/1.0/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitRemoteLinksValidateBeforeCall(String authorization, SubmitRemoteLinksRequest submitRemoteLinksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling submitRemoteLinks(Async)");
        }

        // verify the required parameter 'submitRemoteLinksRequest' is set
        if (submitRemoteLinksRequest == null) {
            throw new ApiException("Missing the required parameter 'submitRemoteLinksRequest' when calling submitRemoteLinks(Async)");
        }

        return submitRemoteLinksCall(authorization, submitRemoteLinksRequest, _callback);

    }

    /**
     * Submit Remote Link data
     * Update / insert Remote Link data.  Remote Links are identified by their ID, existing Remote Link data for the same ID will be replaced if it exists and the updateSequenceId of existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The &#x60;getRemoteLinkById&#x60; operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple Remote Links being submitted in one request, each is validated individually prior to submission. Details of which Remote LInk failed submission (if any) are available in the response object.  Only Connect apps that define the &#x60;jiraRemoteLinkInfoProvider&#x60; module can access this resource. This resource requires the &#39;WRITE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraRemoteLinkInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param submitRemoteLinksRequest Remote Links data to submit.  (required)
     * @return SubmitRemoteLinks202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted Remote Link that is of a valid format will be eventually available in Jira.  Details of which Remote Links were submitted and which failed submission (due to data format problems etc.) are available in the response object.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  Note that in the case of an individual Remote Link having an invalid format (rather than the request as a whole) the response for the request will be a 202 and details of the invalid Remote Link will be contained in the response object.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraRemoteLinkInfoProvider&#x60; module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer Remote Links in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public SubmitRemoteLinks202Response submitRemoteLinks(String authorization, SubmitRemoteLinksRequest submitRemoteLinksRequest) throws ApiException {
        ApiResponse<SubmitRemoteLinks202Response> localVarResp = submitRemoteLinksWithHttpInfo(authorization, submitRemoteLinksRequest);
        return localVarResp.getData();
    }

    /**
     * Submit Remote Link data
     * Update / insert Remote Link data.  Remote Links are identified by their ID, existing Remote Link data for the same ID will be replaced if it exists and the updateSequenceId of existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The &#x60;getRemoteLinkById&#x60; operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple Remote Links being submitted in one request, each is validated individually prior to submission. Details of which Remote LInk failed submission (if any) are available in the response object.  Only Connect apps that define the &#x60;jiraRemoteLinkInfoProvider&#x60; module can access this resource. This resource requires the &#39;WRITE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraRemoteLinkInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param submitRemoteLinksRequest Remote Links data to submit.  (required)
     * @return ApiResponse&lt;SubmitRemoteLinks202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted Remote Link that is of a valid format will be eventually available in Jira.  Details of which Remote Links were submitted and which failed submission (due to data format problems etc.) are available in the response object.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  Note that in the case of an individual Remote Link having an invalid format (rather than the request as a whole) the response for the request will be a 202 and details of the invalid Remote Link will be contained in the response object.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraRemoteLinkInfoProvider&#x60; module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer Remote Links in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubmitRemoteLinks202Response> submitRemoteLinksWithHttpInfo(String authorization, SubmitRemoteLinksRequest submitRemoteLinksRequest) throws ApiException {
        okhttp3.Call localVarCall = submitRemoteLinksValidateBeforeCall(authorization, submitRemoteLinksRequest, null);
        Type localVarReturnType = new TypeToken<SubmitRemoteLinks202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit Remote Link data (asynchronously)
     * Update / insert Remote Link data.  Remote Links are identified by their ID, existing Remote Link data for the same ID will be replaced if it exists and the updateSequenceId of existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The &#x60;getRemoteLinkById&#x60; operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple Remote Links being submitted in one request, each is validated individually prior to submission. Details of which Remote LInk failed submission (if any) are available in the response object.  Only Connect apps that define the &#x60;jiraRemoteLinkInfoProvider&#x60; module can access this resource. This resource requires the &#39;WRITE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with a Connect JWT token that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraRemoteLinkInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param submitRemoteLinksRequest Remote Links data to submit.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted Remote Link that is of a valid format will be eventually available in Jira.  Details of which Remote Links were submitted and which failed submission (due to data format problems etc.) are available in the response object.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  Note that in the case of an individual Remote Link having an invalid format (rather than the request as a whole) the response for the request will be a 202 and details of the invalid Remote Link will be contained in the response object.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraRemoteLinkInfoProvider&#x60; module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer Remote Links in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitRemoteLinksAsync(String authorization, SubmitRemoteLinksRequest submitRemoteLinksRequest, final ApiCallback<SubmitRemoteLinks202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitRemoteLinksValidateBeforeCall(authorization, submitRemoteLinksRequest, _callback);
        Type localVarReturnType = new TypeToken<SubmitRemoteLinks202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
