/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.api;

import com.atlassian.jira.invoker.ApiCallback;
import com.atlassian.jira.invoker.ApiClient;
import com.atlassian.jira.invoker.ApiException;
import com.atlassian.jira.invoker.ApiResponse;
import com.atlassian.jira.invoker.Configuration;
import com.atlassian.jira.invoker.Pair;
import com.atlassian.jira.invoker.ProgressRequestBody;
import com.atlassian.jira.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.atlassian.jira.software.model.BuildData;
import com.atlassian.jira.software.model.ErrorMessage;
import com.atlassian.jira.software.model.SubmitBuildsRequest;
import com.atlassian.jira.software.model.SubmitBuildsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BuildsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BuildsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BuildsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteBuildByKey
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraBuildInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param pipelineId The &#x60;pipelineId&#x60; of the build to delete.  (required)
     * @param buildNumber The &#x60;buildNumber&#x60; of the build to delete.  (required)
     * @param updateSequenceNumber This parameter usage is no longer supported.  An optional &#x60;_updateSequenceNumber&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceNumber&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraBuildInfoProvider&#x60; module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBuildByKeyCall(String authorization, String pipelineId, Long buildNumber, Long updateSequenceNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/builds/0.1/pipelines/{pipelineId}/builds/{buildNumber}"
            .replace("{" + "pipelineId" + "}", localVarApiClient.escapeString(pipelineId.toString()))
            .replace("{" + "buildNumber" + "}", localVarApiClient.escapeString(buildNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateSequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_updateSequenceNumber", updateSequenceNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBuildByKeyValidateBeforeCall(String authorization, String pipelineId, Long buildNumber, Long updateSequenceNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteBuildByKey(Async)");
        }

        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling deleteBuildByKey(Async)");
        }

        // verify the required parameter 'buildNumber' is set
        if (buildNumber == null) {
            throw new ApiException("Missing the required parameter 'buildNumber' when calling deleteBuildByKey(Async)");
        }

        return deleteBuildByKeyCall(authorization, pipelineId, buildNumber, updateSequenceNumber, _callback);

    }

    /**
     * Delete a build by key
     * Delete the build data currently stored for the given &#x60;pipelineId&#x60; and &#x60;buildNumber&#x60; combination.  Deletion is performed asynchronously. The &#x60;getBuildByKey&#x60; operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraBuildInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraBuildInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param pipelineId The &#x60;pipelineId&#x60; of the build to delete.  (required)
     * @param buildNumber The &#x60;buildNumber&#x60; of the build to delete.  (required)
     * @param updateSequenceNumber This parameter usage is no longer supported.  An optional &#x60;_updateSequenceNumber&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceNumber&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraBuildInfoProvider&#x60; module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBuildByKey(String authorization, String pipelineId, Long buildNumber, Long updateSequenceNumber) throws ApiException {
        deleteBuildByKeyWithHttpInfo(authorization, pipelineId, buildNumber, updateSequenceNumber);
    }

    /**
     * Delete a build by key
     * Delete the build data currently stored for the given &#x60;pipelineId&#x60; and &#x60;buildNumber&#x60; combination.  Deletion is performed asynchronously. The &#x60;getBuildByKey&#x60; operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraBuildInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraBuildInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param pipelineId The &#x60;pipelineId&#x60; of the build to delete.  (required)
     * @param buildNumber The &#x60;buildNumber&#x60; of the build to delete.  (required)
     * @param updateSequenceNumber This parameter usage is no longer supported.  An optional &#x60;_updateSequenceNumber&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceNumber&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraBuildInfoProvider&#x60; module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBuildByKeyWithHttpInfo(String authorization, String pipelineId, Long buildNumber, Long updateSequenceNumber) throws ApiException {
        okhttp3.Call localVarCall = deleteBuildByKeyValidateBeforeCall(authorization, pipelineId, buildNumber, updateSequenceNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a build by key (asynchronously)
     * Delete the build data currently stored for the given &#x60;pipelineId&#x60; and &#x60;buildNumber&#x60; combination.  Deletion is performed asynchronously. The &#x60;getBuildByKey&#x60; operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraBuildInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraBuildInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param pipelineId The &#x60;pipelineId&#x60; of the build to delete.  (required)
     * @param buildNumber The &#x60;buildNumber&#x60; of the build to delete.  (required)
     * @param updateSequenceNumber This parameter usage is no longer supported.  An optional &#x60;_updateSequenceNumber&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceNumber&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete has been accepted. Data will eventually be removed from Jira if it exists.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraBuildInfoProvider&#x60; module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBuildByKeyAsync(String authorization, String pipelineId, Long buildNumber, Long updateSequenceNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBuildByKeyValidateBeforeCall(authorization, pipelineId, buildNumber, updateSequenceNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBuildsByProperty
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraBuildInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param updateSequenceNumber This parameter usage is no longer supported.  An optional &#x60;_updateSequenceNumber&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceNumber&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  If not provided, all stored data that matches the request will be deleted.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format (e.g. missing at least one Property param).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraBuildInfoProvider&#x60; module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBuildsByPropertyCall(String authorization, Long updateSequenceNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/builds/0.1/bulkByProperties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateSequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_updateSequenceNumber", updateSequenceNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBuildsByPropertyValidateBeforeCall(String authorization, Long updateSequenceNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteBuildsByProperty(Async)");
        }

        return deleteBuildsByPropertyCall(authorization, updateSequenceNumber, _callback);

    }

    /**
     * Delete builds by Property
     * Bulk delete all builds data that match the given request.  One or more query params must be supplied to specify Properties to delete by. Optional param &#x60;_updateSequenceNumber&#x60; is no longer supported. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND).  See the documentation for the &#x60;submitBuilds&#x60; operation for more details.  e.g. DELETE /bulkByProperties?accountId&#x3D;account-123&amp;repoId&#x3D;repo-345  Deletion is performed asynchronously. The &#x60;getBuildByKey&#x60; operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraBuildInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraBuildInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param updateSequenceNumber This parameter usage is no longer supported.  An optional &#x60;_updateSequenceNumber&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceNumber&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  If not provided, all stored data that matches the request will be deleted.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format (e.g. missing at least one Property param).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraBuildInfoProvider&#x60; module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBuildsByProperty(String authorization, Long updateSequenceNumber) throws ApiException {
        deleteBuildsByPropertyWithHttpInfo(authorization, updateSequenceNumber);
    }

    /**
     * Delete builds by Property
     * Bulk delete all builds data that match the given request.  One or more query params must be supplied to specify Properties to delete by. Optional param &#x60;_updateSequenceNumber&#x60; is no longer supported. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND).  See the documentation for the &#x60;submitBuilds&#x60; operation for more details.  e.g. DELETE /bulkByProperties?accountId&#x3D;account-123&amp;repoId&#x3D;repo-345  Deletion is performed asynchronously. The &#x60;getBuildByKey&#x60; operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraBuildInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraBuildInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param updateSequenceNumber This parameter usage is no longer supported.  An optional &#x60;_updateSequenceNumber&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceNumber&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  If not provided, all stored data that matches the request will be deleted.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format (e.g. missing at least one Property param).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraBuildInfoProvider&#x60; module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBuildsByPropertyWithHttpInfo(String authorization, Long updateSequenceNumber) throws ApiException {
        okhttp3.Call localVarCall = deleteBuildsByPropertyValidateBeforeCall(authorization, updateSequenceNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete builds by Property (asynchronously)
     * Bulk delete all builds data that match the given request.  One or more query params must be supplied to specify Properties to delete by. Optional param &#x60;_updateSequenceNumber&#x60; is no longer supported. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND).  See the documentation for the &#x60;submitBuilds&#x60; operation for more details.  e.g. DELETE /bulkByProperties?accountId&#x3D;account-123&amp;repoId&#x3D;repo-345  Deletion is performed asynchronously. The &#x60;getBuildByKey&#x60; operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the &#x60;jiraBuildInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;DELETE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraBuildInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param updateSequenceNumber This parameter usage is no longer supported.  An optional &#x60;_updateSequenceNumber&#x60; to use to control deletion.  Only stored data with an &#x60;updateSequenceNumber&#x60; less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  If not provided, all stored data that matches the request will be deleted.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete accepted. Data will eventually be removed from Jira.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format (e.g. missing at least one Property param).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraBuildInfoProvider&#x60; module, or the app does not define the &#39;DELETE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBuildsByPropertyAsync(String authorization, Long updateSequenceNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBuildsByPropertyValidateBeforeCall(authorization, updateSequenceNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBuildByKey
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraBuildInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param pipelineId The &#x60;pipelineId&#x60; of the build.  (required)
     * @param buildNumber The &#x60;buildNumber&#x60; of the build.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The build data currently stored for the given key.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraBuildInfoProvider&#x60; module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No build data found for the given key.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBuildByKeyCall(String authorization, String pipelineId, Long buildNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/builds/0.1/pipelines/{pipelineId}/builds/{buildNumber}"
            .replace("{" + "pipelineId" + "}", localVarApiClient.escapeString(pipelineId.toString()))
            .replace("{" + "buildNumber" + "}", localVarApiClient.escapeString(buildNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBuildByKeyValidateBeforeCall(String authorization, String pipelineId, Long buildNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getBuildByKey(Async)");
        }

        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling getBuildByKey(Async)");
        }

        // verify the required parameter 'buildNumber' is set
        if (buildNumber == null) {
            throw new ApiException("Missing the required parameter 'buildNumber' when calling getBuildByKey(Async)");
        }

        return getBuildByKeyCall(authorization, pipelineId, buildNumber, _callback);

    }

    /**
     * Get a build by key
     * Retrieve the currently stored build data for the given &#x60;pipelineId&#x60; and &#x60;buildNumber&#x60; combination.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the &#x60;jiraBuildInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;READ&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraBuildInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param pipelineId The &#x60;pipelineId&#x60; of the build.  (required)
     * @param buildNumber The &#x60;buildNumber&#x60; of the build.  (required)
     * @return BuildData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The build data currently stored for the given key.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraBuildInfoProvider&#x60; module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No build data found for the given key.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public BuildData getBuildByKey(String authorization, String pipelineId, Long buildNumber) throws ApiException {
        ApiResponse<BuildData> localVarResp = getBuildByKeyWithHttpInfo(authorization, pipelineId, buildNumber);
        return localVarResp.getData();
    }

    /**
     * Get a build by key
     * Retrieve the currently stored build data for the given &#x60;pipelineId&#x60; and &#x60;buildNumber&#x60; combination.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the &#x60;jiraBuildInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;READ&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraBuildInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param pipelineId The &#x60;pipelineId&#x60; of the build.  (required)
     * @param buildNumber The &#x60;buildNumber&#x60; of the build.  (required)
     * @return ApiResponse&lt;BuildData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The build data currently stored for the given key.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraBuildInfoProvider&#x60; module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No build data found for the given key.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildData> getBuildByKeyWithHttpInfo(String authorization, String pipelineId, Long buildNumber) throws ApiException {
        okhttp3.Call localVarCall = getBuildByKeyValidateBeforeCall(authorization, pipelineId, buildNumber, null);
        Type localVarReturnType = new TypeToken<BuildData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a build by key (asynchronously)
     * Retrieve the currently stored build data for the given &#x60;pipelineId&#x60; and &#x60;buildNumber&#x60; combination.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the &#x60;jiraBuildInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;READ&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraBuildInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param pipelineId The &#x60;pipelineId&#x60; of the build.  (required)
     * @param buildNumber The &#x60;buildNumber&#x60; of the build.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The build data currently stored for the given key.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraBuildInfoProvider&#x60; module, or the app does not define the &#39;READ&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No build data found for the given key.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBuildByKeyAsync(String authorization, String pipelineId, Long buildNumber, final ApiCallback<BuildData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBuildByKeyValidateBeforeCall(authorization, pipelineId, buildNumber, _callback);
        Type localVarReturnType = new TypeToken<BuildData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitBuilds
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraBuildInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param submitBuildsRequest Builds data to submit.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted build that is of a valid format will be eventually available in Jira.  Details of which builds were submitted and which failed submission (due to data format problems etc.) are available in the response object.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  Note that in the case of an individual build having an invalid format (rather than the request as a whole) the response for the request will be a 202 and details of the invalid build will be contained in the response object.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraBuildInfoProvider&#x60; module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer builds in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitBuildsCall(String authorization, SubmitBuildsRequest submitBuildsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = submitBuildsRequest;

        // create path and map variables
        String localVarPath = "/rest/builds/0.1/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitBuildsValidateBeforeCall(String authorization, SubmitBuildsRequest submitBuildsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling submitBuilds(Async)");
        }

        // verify the required parameter 'submitBuildsRequest' is set
        if (submitBuildsRequest == null) {
            throw new ApiException("Missing the required parameter 'submitBuildsRequest' when calling submitBuilds(Async)");
        }

        return submitBuildsCall(authorization, submitBuildsRequest, _callback);

    }

    /**
     * Submit build data
     * Update / insert builds data.  Builds are identified by the combination of &#x60;pipelineId&#x60; and &#x60;buildNumber&#x60;, and existing build data for the same build will be replaced if it exists and the &#x60;updateSequenceNumber&#x60; of the existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The &#x60;getBuildByKey&#x60; operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple builds being submitted in one request, each is validated individually prior to submission. Details of which build failed submission (if any) are available in the response object.  Only Connect apps that define the &#x60;jiraBuildInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;WRITE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraBuildInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param submitBuildsRequest Builds data to submit.  (required)
     * @return SubmitBuildsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted build that is of a valid format will be eventually available in Jira.  Details of which builds were submitted and which failed submission (due to data format problems etc.) are available in the response object.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  Note that in the case of an individual build having an invalid format (rather than the request as a whole) the response for the request will be a 202 and details of the invalid build will be contained in the response object.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraBuildInfoProvider&#x60; module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer builds in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public SubmitBuildsResponse submitBuilds(String authorization, SubmitBuildsRequest submitBuildsRequest) throws ApiException {
        ApiResponse<SubmitBuildsResponse> localVarResp = submitBuildsWithHttpInfo(authorization, submitBuildsRequest);
        return localVarResp.getData();
    }

    /**
     * Submit build data
     * Update / insert builds data.  Builds are identified by the combination of &#x60;pipelineId&#x60; and &#x60;buildNumber&#x60;, and existing build data for the same build will be replaced if it exists and the &#x60;updateSequenceNumber&#x60; of the existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The &#x60;getBuildByKey&#x60; operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple builds being submitted in one request, each is validated individually prior to submission. Details of which build failed submission (if any) are available in the response object.  Only Connect apps that define the &#x60;jiraBuildInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;WRITE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraBuildInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param submitBuildsRequest Builds data to submit.  (required)
     * @return ApiResponse&lt;SubmitBuildsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted build that is of a valid format will be eventually available in Jira.  Details of which builds were submitted and which failed submission (due to data format problems etc.) are available in the response object.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  Note that in the case of an individual build having an invalid format (rather than the request as a whole) the response for the request will be a 202 and details of the invalid build will be contained in the response object.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraBuildInfoProvider&#x60; module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer builds in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubmitBuildsResponse> submitBuildsWithHttpInfo(String authorization, SubmitBuildsRequest submitBuildsRequest) throws ApiException {
        okhttp3.Call localVarCall = submitBuildsValidateBeforeCall(authorization, submitBuildsRequest, null);
        Type localVarReturnType = new TypeToken<SubmitBuildsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit build data (asynchronously)
     * Update / insert builds data.  Builds are identified by the combination of &#x60;pipelineId&#x60; and &#x60;buildNumber&#x60;, and existing build data for the same build will be replaced if it exists and the &#x60;updateSequenceNumber&#x60; of the existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The &#x60;getBuildByKey&#x60; operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple builds being submitted in one request, each is validated individually prior to submission. Details of which build failed submission (if any) are available in the response object.  Only Connect apps that define the &#x60;jiraBuildInfoProvider&#x60; module, and on-premise integrations, can access this resource. This resource requires the &#39;WRITE&#39; scope for Connect apps. 
     * @param authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define &#x60;jiraBuildInfoProvider&#x60; module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.  (required)
     * @param submitBuildsRequest Builds data to submit.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Submission accepted. Each submitted build that is of a valid format will be eventually available in Jira.  Details of which builds were submitted and which failed submission (due to data format problems etc.) are available in the response object.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request has incorrect format.  Note that in the case of an individual build having an invalid format (rather than the request as a whole) the response for the request will be a 202 and details of the invalid build will be contained in the response object.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing a JWT token, or token is invalid.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The JWT token used does not correspond to an app that defines the &#x60;jiraBuildInfoProvider&#x60; module, or the app does not define the &#39;WRITE&#39; scope.  </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Data is too large. Submit fewer builds in each payload.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit has been exceeded.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unavailable due to maintenance or other reasons.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unknown error has occurred.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitBuildsAsync(String authorization, SubmitBuildsRequest submitBuildsRequest, final ApiCallback<SubmitBuildsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitBuildsValidateBeforeCall(authorization, submitBuildsRequest, _callback);
        Type localVarReturnType = new TypeToken<SubmitBuildsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
