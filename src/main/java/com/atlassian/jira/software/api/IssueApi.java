/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.api;

import com.atlassian.jira.invoker.ApiCallback;
import com.atlassian.jira.invoker.ApiClient;
import com.atlassian.jira.invoker.ApiException;
import com.atlassian.jira.invoker.ApiResponse;
import com.atlassian.jira.invoker.Configuration;
import com.atlassian.jira.invoker.Pair;
import com.atlassian.jira.invoker.ProgressRequestBody;
import com.atlassian.jira.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.atlassian.jira.software.model.EstimateIssueForBoard200Response;
import com.atlassian.jira.software.model.EstimateIssueForBoardRequest;
import com.atlassian.jira.software.model.GetIssue200Response;
import com.atlassian.jira.software.model.MoveIssuesToBacklogForBoardRequest;
import com.atlassian.jira.software.model.RankIssues207Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IssueApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssueApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IssueApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for estimateIssueForBoard
     * @param issueIdOrKey The ID or key of the requested issue. (required)
     * @param estimateIssueForBoardRequest bean that contains value of a new estimation. (required)
     * @param boardId The ID of the board required to determine which field is used for estimation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the estimation of the issue and a fieldId of the field that is used for it. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId was not provided, field does not exists or value was in wrong format. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to edit issue. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned in these cases:   *  the issue does not exist  *  the user does not have permission to view issue  *  the board does not exist  *  the user does not have permission to view board  *  the issue does not belong to the board </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call estimateIssueForBoardCall(String issueIdOrKey, EstimateIssueForBoardRequest estimateIssueForBoardRequest, Long boardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = estimateIssueForBoardRequest;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/issue/{issueIdOrKey}/estimation"
            .replace("{" + "issueIdOrKey" + "}", localVarApiClient.escapeString(issueIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (boardId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boardId", boardId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call estimateIssueForBoardValidateBeforeCall(String issueIdOrKey, EstimateIssueForBoardRequest estimateIssueForBoardRequest, Long boardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueIdOrKey' is set
        if (issueIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'issueIdOrKey' when calling estimateIssueForBoard(Async)");
        }

        // verify the required parameter 'estimateIssueForBoardRequest' is set
        if (estimateIssueForBoardRequest == null) {
            throw new ApiException("Missing the required parameter 'estimateIssueForBoardRequest' when calling estimateIssueForBoard(Async)");
        }

        return estimateIssueForBoardCall(issueIdOrKey, estimateIssueForBoardRequest, boardId, _callback);

    }

    /**
     * Estimate issue for board
     * Updates the estimation of the issue. boardId param is required. This param determines which field will be updated on a issue.  Note that this resource changes the estimation field of the issue regardless of appearance the field on the screen.  Original time tracking estimation field accepts estimation in formats like \&quot;1w\&quot;, \&quot;2d\&quot;, \&quot;3h\&quot;, \&quot;20m\&quot; or number which represent number of minutes. However, internally the field stores and returns the estimation as a number of seconds.  The field used for estimation on the given board can be obtained from [board configuration resource](#agile/1.0/board-getConfiguration). More information about the field are returned by [edit meta resource](#api-rest-api-3-issue-issueIdOrKey-editmeta-get) or [field resource](#api-rest-api-3-field-get).
     * @param issueIdOrKey The ID or key of the requested issue. (required)
     * @param estimateIssueForBoardRequest bean that contains value of a new estimation. (required)
     * @param boardId The ID of the board required to determine which field is used for estimation. (optional)
     * @return EstimateIssueForBoard200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the estimation of the issue and a fieldId of the field that is used for it. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId was not provided, field does not exists or value was in wrong format. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to edit issue. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned in these cases:   *  the issue does not exist  *  the user does not have permission to view issue  *  the board does not exist  *  the user does not have permission to view board  *  the issue does not belong to the board </td><td>  -  </td></tr>
     </table>
     */
    public EstimateIssueForBoard200Response estimateIssueForBoard(String issueIdOrKey, EstimateIssueForBoardRequest estimateIssueForBoardRequest, Long boardId) throws ApiException {
        ApiResponse<EstimateIssueForBoard200Response> localVarResp = estimateIssueForBoardWithHttpInfo(issueIdOrKey, estimateIssueForBoardRequest, boardId);
        return localVarResp.getData();
    }

    /**
     * Estimate issue for board
     * Updates the estimation of the issue. boardId param is required. This param determines which field will be updated on a issue.  Note that this resource changes the estimation field of the issue regardless of appearance the field on the screen.  Original time tracking estimation field accepts estimation in formats like \&quot;1w\&quot;, \&quot;2d\&quot;, \&quot;3h\&quot;, \&quot;20m\&quot; or number which represent number of minutes. However, internally the field stores and returns the estimation as a number of seconds.  The field used for estimation on the given board can be obtained from [board configuration resource](#agile/1.0/board-getConfiguration). More information about the field are returned by [edit meta resource](#api-rest-api-3-issue-issueIdOrKey-editmeta-get) or [field resource](#api-rest-api-3-field-get).
     * @param issueIdOrKey The ID or key of the requested issue. (required)
     * @param estimateIssueForBoardRequest bean that contains value of a new estimation. (required)
     * @param boardId The ID of the board required to determine which field is used for estimation. (optional)
     * @return ApiResponse&lt;EstimateIssueForBoard200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the estimation of the issue and a fieldId of the field that is used for it. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId was not provided, field does not exists or value was in wrong format. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to edit issue. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned in these cases:   *  the issue does not exist  *  the user does not have permission to view issue  *  the board does not exist  *  the user does not have permission to view board  *  the issue does not belong to the board </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EstimateIssueForBoard200Response> estimateIssueForBoardWithHttpInfo(String issueIdOrKey, EstimateIssueForBoardRequest estimateIssueForBoardRequest, Long boardId) throws ApiException {
        okhttp3.Call localVarCall = estimateIssueForBoardValidateBeforeCall(issueIdOrKey, estimateIssueForBoardRequest, boardId, null);
        Type localVarReturnType = new TypeToken<EstimateIssueForBoard200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Estimate issue for board (asynchronously)
     * Updates the estimation of the issue. boardId param is required. This param determines which field will be updated on a issue.  Note that this resource changes the estimation field of the issue regardless of appearance the field on the screen.  Original time tracking estimation field accepts estimation in formats like \&quot;1w\&quot;, \&quot;2d\&quot;, \&quot;3h\&quot;, \&quot;20m\&quot; or number which represent number of minutes. However, internally the field stores and returns the estimation as a number of seconds.  The field used for estimation on the given board can be obtained from [board configuration resource](#agile/1.0/board-getConfiguration). More information about the field are returned by [edit meta resource](#api-rest-api-3-issue-issueIdOrKey-editmeta-get) or [field resource](#api-rest-api-3-field-get).
     * @param issueIdOrKey The ID or key of the requested issue. (required)
     * @param estimateIssueForBoardRequest bean that contains value of a new estimation. (required)
     * @param boardId The ID of the board required to determine which field is used for estimation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the estimation of the issue and a fieldId of the field that is used for it. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId was not provided, field does not exists or value was in wrong format. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to edit issue. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned in these cases:   *  the issue does not exist  *  the user does not have permission to view issue  *  the board does not exist  *  the user does not have permission to view board  *  the issue does not belong to the board </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call estimateIssueForBoardAsync(String issueIdOrKey, EstimateIssueForBoardRequest estimateIssueForBoardRequest, Long boardId, final ApiCallback<EstimateIssueForBoard200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = estimateIssueForBoardValidateBeforeCall(issueIdOrKey, estimateIssueForBoardRequest, boardId, _callback);
        Type localVarReturnType = new TypeToken<EstimateIssueForBoard200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIssue
     * @param issueIdOrKey The ID or key of the requested issue. (required)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @param updateHistory A boolean indicating whether the issue retrieved by this method should be added to the current user&#39;s issue history (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issue. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned in these cases:   *  the issue does not exist  *  the user does not have permission to view issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssueCall(String issueIdOrKey, List<Object> fields, String expand, Boolean updateHistory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/issue/{issueIdOrKey}"
            .replace("{" + "issueIdOrKey" + "}", localVarApiClient.escapeString(issueIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (updateHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateHistory", updateHistory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssueValidateBeforeCall(String issueIdOrKey, List<Object> fields, String expand, Boolean updateHistory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueIdOrKey' is set
        if (issueIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'issueIdOrKey' when calling getIssue(Async)");
        }

        return getIssueCall(issueIdOrKey, fields, expand, updateHistory, _callback);

    }

    /**
     * Get issue
     * Returns a single issue, for a given issue ID or issue key. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic.
     * @param issueIdOrKey The ID or key of the requested issue. (required)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @param updateHistory A boolean indicating whether the issue retrieved by this method should be added to the current user&#39;s issue history (optional)
     * @return GetIssue200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issue. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned in these cases:   *  the issue does not exist  *  the user does not have permission to view issue </td><td>  -  </td></tr>
     </table>
     */
    public GetIssue200Response getIssue(String issueIdOrKey, List<Object> fields, String expand, Boolean updateHistory) throws ApiException {
        ApiResponse<GetIssue200Response> localVarResp = getIssueWithHttpInfo(issueIdOrKey, fields, expand, updateHistory);
        return localVarResp.getData();
    }

    /**
     * Get issue
     * Returns a single issue, for a given issue ID or issue key. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic.
     * @param issueIdOrKey The ID or key of the requested issue. (required)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @param updateHistory A boolean indicating whether the issue retrieved by this method should be added to the current user&#39;s issue history (optional)
     * @return ApiResponse&lt;GetIssue200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issue. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned in these cases:   *  the issue does not exist  *  the user does not have permission to view issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetIssue200Response> getIssueWithHttpInfo(String issueIdOrKey, List<Object> fields, String expand, Boolean updateHistory) throws ApiException {
        okhttp3.Call localVarCall = getIssueValidateBeforeCall(issueIdOrKey, fields, expand, updateHistory, null);
        Type localVarReturnType = new TypeToken<GetIssue200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get issue (asynchronously)
     * Returns a single issue, for a given issue ID or issue key. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic.
     * @param issueIdOrKey The ID or key of the requested issue. (required)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @param updateHistory A boolean indicating whether the issue retrieved by this method should be added to the current user&#39;s issue history (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issue. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned in these cases:   *  the issue does not exist  *  the user does not have permission to view issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssueAsync(String issueIdOrKey, List<Object> fields, String expand, Boolean updateHistory, final ApiCallback<GetIssue200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssueValidateBeforeCall(issueIdOrKey, fields, expand, updateHistory, _callback);
        Type localVarReturnType = new TypeToken<GetIssue200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIssueEstimationForBoard
     * @param issueIdOrKey The ID or key of the requested issue. (required)
     * @param boardId The ID of the board required to determine which field is used for estimation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the estimation of the issue and a fieldId of the field that is used for it. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId was not provided, field does not exists or value was in wrong format. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to edit issue. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned in these cases:   *  the issue does not exist  *  the user does not have permission to view issue  *  the board does not exist  *  the user does not have permission to view board  *  the issue does not belong to the board </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssueEstimationForBoardCall(String issueIdOrKey, Long boardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/issue/{issueIdOrKey}/estimation"
            .replace("{" + "issueIdOrKey" + "}", localVarApiClient.escapeString(issueIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (boardId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boardId", boardId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssueEstimationForBoardValidateBeforeCall(String issueIdOrKey, Long boardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueIdOrKey' is set
        if (issueIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'issueIdOrKey' when calling getIssueEstimationForBoard(Async)");
        }

        return getIssueEstimationForBoardCall(issueIdOrKey, boardId, _callback);

    }

    /**
     * Get issue estimation for board
     * Returns the estimation of the issue and a fieldId of the field that is used for it. &#x60;boardId&#x60; param is required. This param determines which field will be updated on a issue.  Original time internally stores and returns the estimation as a number of seconds.  The field used for estimation on the given board can be obtained from [board configuration resource](#agile/1.0/board-getConfiguration). More information about the field are returned by [edit meta resource](#api-rest-api-3-issue-getEditIssueMeta) or [field resource](#api-rest-api-3-field-get).
     * @param issueIdOrKey The ID or key of the requested issue. (required)
     * @param boardId The ID of the board required to determine which field is used for estimation. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the estimation of the issue and a fieldId of the field that is used for it. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId was not provided, field does not exists or value was in wrong format. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to edit issue. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned in these cases:   *  the issue does not exist  *  the user does not have permission to view issue  *  the board does not exist  *  the user does not have permission to view board  *  the issue does not belong to the board </td><td>  -  </td></tr>
     </table>
     */
    public void getIssueEstimationForBoard(String issueIdOrKey, Long boardId) throws ApiException {
        getIssueEstimationForBoardWithHttpInfo(issueIdOrKey, boardId);
    }

    /**
     * Get issue estimation for board
     * Returns the estimation of the issue and a fieldId of the field that is used for it. &#x60;boardId&#x60; param is required. This param determines which field will be updated on a issue.  Original time internally stores and returns the estimation as a number of seconds.  The field used for estimation on the given board can be obtained from [board configuration resource](#agile/1.0/board-getConfiguration). More information about the field are returned by [edit meta resource](#api-rest-api-3-issue-getEditIssueMeta) or [field resource](#api-rest-api-3-field-get).
     * @param issueIdOrKey The ID or key of the requested issue. (required)
     * @param boardId The ID of the board required to determine which field is used for estimation. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the estimation of the issue and a fieldId of the field that is used for it. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId was not provided, field does not exists or value was in wrong format. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to edit issue. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned in these cases:   *  the issue does not exist  *  the user does not have permission to view issue  *  the board does not exist  *  the user does not have permission to view board  *  the issue does not belong to the board </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getIssueEstimationForBoardWithHttpInfo(String issueIdOrKey, Long boardId) throws ApiException {
        okhttp3.Call localVarCall = getIssueEstimationForBoardValidateBeforeCall(issueIdOrKey, boardId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get issue estimation for board (asynchronously)
     * Returns the estimation of the issue and a fieldId of the field that is used for it. &#x60;boardId&#x60; param is required. This param determines which field will be updated on a issue.  Original time internally stores and returns the estimation as a number of seconds.  The field used for estimation on the given board can be obtained from [board configuration resource](#agile/1.0/board-getConfiguration). More information about the field are returned by [edit meta resource](#api-rest-api-3-issue-getEditIssueMeta) or [field resource](#api-rest-api-3-field-get).
     * @param issueIdOrKey The ID or key of the requested issue. (required)
     * @param boardId The ID of the board required to determine which field is used for estimation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the estimation of the issue and a fieldId of the field that is used for it. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId was not provided, field does not exists or value was in wrong format. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to edit issue. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned in these cases:   *  the issue does not exist  *  the user does not have permission to view issue  *  the board does not exist  *  the user does not have permission to view board  *  the issue does not belong to the board </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssueEstimationForBoardAsync(String issueIdOrKey, Long boardId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssueEstimationForBoardValidateBeforeCall(issueIdOrKey, boardId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rankIssues
     * @param moveIssuesToBacklogForBoardRequest bean which contains list of issues to rank and information where it should be ranked. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Returns the list of issue with status of rank operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to rank. To rank issues user has to have schedule issue permission for issues that they want to rank. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rankIssuesCall(MoveIssuesToBacklogForBoardRequest moveIssuesToBacklogForBoardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveIssuesToBacklogForBoardRequest;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/issue/rank";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rankIssuesValidateBeforeCall(MoveIssuesToBacklogForBoardRequest moveIssuesToBacklogForBoardRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moveIssuesToBacklogForBoardRequest' is set
        if (moveIssuesToBacklogForBoardRequest == null) {
            throw new ApiException("Missing the required parameter 'moveIssuesToBacklogForBoardRequest' when calling rankIssues(Async)");
        }

        return rankIssuesCall(moveIssuesToBacklogForBoardRequest, _callback);

    }

    /**
     * Rank issues
     * Moves (ranks) issues before or after a given issue. At most 50 issues may be ranked at once.  This operation may fail for some issues, although this will be rare. In that case the 207 status code is returned for the whole response and detailed information regarding each issue is available in the response body.  If rankCustomFieldId is not defined, the default rank field will be used.
     * @param moveIssuesToBacklogForBoardRequest bean which contains list of issues to rank and information where it should be ranked. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Returns the list of issue with status of rank operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to rank. To rank issues user has to have schedule issue permission for issues that they want to rank. </td><td>  -  </td></tr>
     </table>
     */
    public void rankIssues(MoveIssuesToBacklogForBoardRequest moveIssuesToBacklogForBoardRequest) throws ApiException {
        rankIssuesWithHttpInfo(moveIssuesToBacklogForBoardRequest);
    }

    /**
     * Rank issues
     * Moves (ranks) issues before or after a given issue. At most 50 issues may be ranked at once.  This operation may fail for some issues, although this will be rare. In that case the 207 status code is returned for the whole response and detailed information regarding each issue is available in the response body.  If rankCustomFieldId is not defined, the default rank field will be used.
     * @param moveIssuesToBacklogForBoardRequest bean which contains list of issues to rank and information where it should be ranked. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Returns the list of issue with status of rank operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to rank. To rank issues user has to have schedule issue permission for issues that they want to rank. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rankIssuesWithHttpInfo(MoveIssuesToBacklogForBoardRequest moveIssuesToBacklogForBoardRequest) throws ApiException {
        okhttp3.Call localVarCall = rankIssuesValidateBeforeCall(moveIssuesToBacklogForBoardRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Rank issues (asynchronously)
     * Moves (ranks) issues before or after a given issue. At most 50 issues may be ranked at once.  This operation may fail for some issues, although this will be rare. In that case the 207 status code is returned for the whole response and detailed information regarding each issue is available in the response body.  If rankCustomFieldId is not defined, the default rank field will be used.
     * @param moveIssuesToBacklogForBoardRequest bean which contains list of issues to rank and information where it should be ranked. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Returns the list of issue with status of rank operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to rank. To rank issues user has to have schedule issue permission for issues that they want to rank. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rankIssuesAsync(MoveIssuesToBacklogForBoardRequest moveIssuesToBacklogForBoardRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rankIssuesValidateBeforeCall(moveIssuesToBacklogForBoardRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
