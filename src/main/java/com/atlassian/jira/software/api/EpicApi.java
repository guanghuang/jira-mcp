/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.api;

import com.atlassian.jira.invoker.ApiCallback;
import com.atlassian.jira.invoker.ApiClient;
import com.atlassian.jira.invoker.ApiException;
import com.atlassian.jira.invoker.ApiResponse;
import com.atlassian.jira.invoker.Configuration;
import com.atlassian.jira.invoker.Pair;
import com.atlassian.jira.invoker.ProgressRequestBody;
import com.atlassian.jira.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.atlassian.jira.software.model.GetEpic200Response;
import com.atlassian.jira.software.model.MoveIssuesToBacklogRequest;
import com.atlassian.jira.software.model.PartiallyUpdateEpic200Response;
import com.atlassian.jira.software.model.PartiallyUpdateEpicRequest;
import com.atlassian.jira.software.model.RankEpicsRequest;
import com.atlassian.jira.software.model.SearchResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EpicApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EpicApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EpicApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getEpic
     * @param epicIdOrKey The id or key of the requested epic. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested epic. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEpicCall(String epicIdOrKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/epic/{epicIdOrKey}"
            .replace("{" + "epicIdOrKey" + "}", localVarApiClient.escapeString(epicIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEpicValidateBeforeCall(String epicIdOrKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'epicIdOrKey' is set
        if (epicIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'epicIdOrKey' when calling getEpic(Async)");
        }

        return getEpicCall(epicIdOrKey, _callback);

    }

    /**
     * Get epic
     * Returns the epic for a given epic ID. This epic will only be returned if the user has permission to view it. **Note:** This operation does not work for epics in next-gen projects.
     * @param epicIdOrKey The id or key of the requested epic. (required)
     * @return GetEpic200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested epic. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public GetEpic200Response getEpic(String epicIdOrKey) throws ApiException {
        ApiResponse<GetEpic200Response> localVarResp = getEpicWithHttpInfo(epicIdOrKey);
        return localVarResp.getData();
    }

    /**
     * Get epic
     * Returns the epic for a given epic ID. This epic will only be returned if the user has permission to view it. **Note:** This operation does not work for epics in next-gen projects.
     * @param epicIdOrKey The id or key of the requested epic. (required)
     * @return ApiResponse&lt;GetEpic200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested epic. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEpic200Response> getEpicWithHttpInfo(String epicIdOrKey) throws ApiException {
        okhttp3.Call localVarCall = getEpicValidateBeforeCall(epicIdOrKey, null);
        Type localVarReturnType = new TypeToken<GetEpic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get epic (asynchronously)
     * Returns the epic for a given epic ID. This epic will only be returned if the user has permission to view it. **Note:** This operation does not work for epics in next-gen projects.
     * @param epicIdOrKey The id or key of the requested epic. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested epic. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEpicAsync(String epicIdOrKey, final ApiCallback<GetEpic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEpicValidateBeforeCall(epicIdOrKey, _callback);
        Type localVarReturnType = new TypeToken<GetEpic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIssuesForEpic
     * @param epicIdOrKey The id or key of the epic that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. Default: 50. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssuesForEpicCall(String epicIdOrKey, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/epic/{epicIdOrKey}/issue"
            .replace("{" + "epicIdOrKey" + "}", localVarApiClient.escapeString(epicIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (jql != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jql", jql));
        }

        if (validateQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validateQuery", validateQuery));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssuesForEpicValidateBeforeCall(String epicIdOrKey, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'epicIdOrKey' is set
        if (epicIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'epicIdOrKey' when calling getIssuesForEpic(Async)");
        }

        return getIssuesForEpicCall(epicIdOrKey, startAt, maxResults, jql, validateQuery, fields, expand, _callback);

    }

    /**
     * Get issues for epic
     * Returns all issues that belong to the epic, for the given epic ID. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank. **Note:** If you are querying a next-gen project, do not use this operation. Instead, search for issues that belong to an epic by using the [Search for issues using JQL](https://developer.atlassian.com/cloud/jira/platform/rest/v2/#api-rest-api-2-search-get) operation in the Jira platform REST API. Build your JQL query using the &#x60;parent&#x60; clause. For more information on the &#x60;parent&#x60; JQL field, see [Advanced searching](https://confluence.atlassian.com/x/dAiiLQ#Advancedsearching-fieldsreference-Parent).
     * @param epicIdOrKey The id or key of the epic that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. Default: 50. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @return SearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public SearchResults getIssuesForEpic(String epicIdOrKey, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand) throws ApiException {
        ApiResponse<SearchResults> localVarResp = getIssuesForEpicWithHttpInfo(epicIdOrKey, startAt, maxResults, jql, validateQuery, fields, expand);
        return localVarResp.getData();
    }

    /**
     * Get issues for epic
     * Returns all issues that belong to the epic, for the given epic ID. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank. **Note:** If you are querying a next-gen project, do not use this operation. Instead, search for issues that belong to an epic by using the [Search for issues using JQL](https://developer.atlassian.com/cloud/jira/platform/rest/v2/#api-rest-api-2-search-get) operation in the Jira platform REST API. Build your JQL query using the &#x60;parent&#x60; clause. For more information on the &#x60;parent&#x60; JQL field, see [Advanced searching](https://confluence.atlassian.com/x/dAiiLQ#Advancedsearching-fieldsreference-Parent).
     * @param epicIdOrKey The id or key of the epic that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. Default: 50. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @return ApiResponse&lt;SearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResults> getIssuesForEpicWithHttpInfo(String epicIdOrKey, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand) throws ApiException {
        okhttp3.Call localVarCall = getIssuesForEpicValidateBeforeCall(epicIdOrKey, startAt, maxResults, jql, validateQuery, fields, expand, null);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get issues for epic (asynchronously)
     * Returns all issues that belong to the epic, for the given epic ID. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank. **Note:** If you are querying a next-gen project, do not use this operation. Instead, search for issues that belong to an epic by using the [Search for issues using JQL](https://developer.atlassian.com/cloud/jira/platform/rest/v2/#api-rest-api-2-search-get) operation in the Jira platform REST API. Build your JQL query using the &#x60;parent&#x60; clause. For more information on the &#x60;parent&#x60; JQL field, see [Advanced searching](https://confluence.atlassian.com/x/dAiiLQ#Advancedsearching-fieldsreference-Parent).
     * @param epicIdOrKey The id or key of the epic that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. Default: 50. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssuesForEpicAsync(String epicIdOrKey, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback<SearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssuesForEpicValidateBeforeCall(epicIdOrKey, startAt, maxResults, jql, validateQuery, fields, expand, _callback);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIssuesWithoutEpic
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssuesWithoutEpicCall(Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/epic/none/issue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (jql != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jql", jql));
        }

        if (validateQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validateQuery", validateQuery));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssuesWithoutEpicValidateBeforeCall(Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback _callback) throws ApiException {
        return getIssuesWithoutEpicCall(startAt, maxResults, jql, validateQuery, fields, expand, _callback);

    }

    /**
     * Get issues without epic
     * Returns all issues that do not belong to any epic. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank. **Note:** If you are querying a next-gen project, do not use this operation. Instead, search for issues that don&#39;t belong to an epic by using the [Search for issues using JQL](https://developer.atlassian.com/cloud/jira/platform/rest/v2/#api-rest-api-2-search-get) operation in the Jira platform REST API. Build your JQL query using the &#x60;parent is empty&#x60; clause. For more information on the &#x60;parent&#x60; JQL field, see [Advanced searching](https://confluence.atlassian.com/x/dAiiLQ#Advancedsearching-fieldsreference-Parent).
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @return SearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
     </table>
     */
    public SearchResults getIssuesWithoutEpic(Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand) throws ApiException {
        ApiResponse<SearchResults> localVarResp = getIssuesWithoutEpicWithHttpInfo(startAt, maxResults, jql, validateQuery, fields, expand);
        return localVarResp.getData();
    }

    /**
     * Get issues without epic
     * Returns all issues that do not belong to any epic. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank. **Note:** If you are querying a next-gen project, do not use this operation. Instead, search for issues that don&#39;t belong to an epic by using the [Search for issues using JQL](https://developer.atlassian.com/cloud/jira/platform/rest/v2/#api-rest-api-2-search-get) operation in the Jira platform REST API. Build your JQL query using the &#x60;parent is empty&#x60; clause. For more information on the &#x60;parent&#x60; JQL field, see [Advanced searching](https://confluence.atlassian.com/x/dAiiLQ#Advancedsearching-fieldsreference-Parent).
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @return ApiResponse&lt;SearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResults> getIssuesWithoutEpicWithHttpInfo(Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand) throws ApiException {
        okhttp3.Call localVarCall = getIssuesWithoutEpicValidateBeforeCall(startAt, maxResults, jql, validateQuery, fields, expand, null);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get issues without epic (asynchronously)
     * Returns all issues that do not belong to any epic. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank. **Note:** If you are querying a next-gen project, do not use this operation. Instead, search for issues that don&#39;t belong to an epic by using the [Search for issues using JQL](https://developer.atlassian.com/cloud/jira/platform/rest/v2/#api-rest-api-2-search-get) operation in the Jira platform REST API. Build your JQL query using the &#x60;parent is empty&#x60; clause. For more information on the &#x60;parent&#x60; JQL field, see [Advanced searching](https://confluence.atlassian.com/x/dAiiLQ#Advancedsearching-fieldsreference-Parent).
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssuesWithoutEpicAsync(Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback<SearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssuesWithoutEpicValidateBeforeCall(startAt, maxResults, jql, validateQuery, fields, expand, _callback);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveIssuesToEpic
     * @param epicIdOrKey The id or key of the epic that you want to assign issues to. (required)
     * @param moveIssuesToBacklogRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have edit issue permission for all issues to assign or for the epic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveIssuesToEpicCall(String epicIdOrKey, MoveIssuesToBacklogRequest moveIssuesToBacklogRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveIssuesToBacklogRequest;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/epic/{epicIdOrKey}/issue"
            .replace("{" + "epicIdOrKey" + "}", localVarApiClient.escapeString(epicIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveIssuesToEpicValidateBeforeCall(String epicIdOrKey, MoveIssuesToBacklogRequest moveIssuesToBacklogRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'epicIdOrKey' is set
        if (epicIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'epicIdOrKey' when calling moveIssuesToEpic(Async)");
        }

        // verify the required parameter 'moveIssuesToBacklogRequest' is set
        if (moveIssuesToBacklogRequest == null) {
            throw new ApiException("Missing the required parameter 'moveIssuesToBacklogRequest' when calling moveIssuesToEpic(Async)");
        }

        return moveIssuesToEpicCall(epicIdOrKey, moveIssuesToBacklogRequest, _callback);

    }

    /**
     * Move issues to epic
     * Moves issues to an epic, for a given epic id. Issues can be only in a single epic at the same time. That means that already assigned issues to an epic, will not be assigned to the previous epic anymore. The user needs to have the edit issue permission for all issue they want to move and to the epic. The maximum number of issues that can be moved in one operation is 50. **Note:** This operation does not work for epics in next-gen projects.
     * @param epicIdOrKey The id or key of the epic that you want to assign issues to. (required)
     * @param moveIssuesToBacklogRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have edit issue permission for all issues to assign or for the epic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public void moveIssuesToEpic(String epicIdOrKey, MoveIssuesToBacklogRequest moveIssuesToBacklogRequest) throws ApiException {
        moveIssuesToEpicWithHttpInfo(epicIdOrKey, moveIssuesToBacklogRequest);
    }

    /**
     * Move issues to epic
     * Moves issues to an epic, for a given epic id. Issues can be only in a single epic at the same time. That means that already assigned issues to an epic, will not be assigned to the previous epic anymore. The user needs to have the edit issue permission for all issue they want to move and to the epic. The maximum number of issues that can be moved in one operation is 50. **Note:** This operation does not work for epics in next-gen projects.
     * @param epicIdOrKey The id or key of the epic that you want to assign issues to. (required)
     * @param moveIssuesToBacklogRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have edit issue permission for all issues to assign or for the epic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> moveIssuesToEpicWithHttpInfo(String epicIdOrKey, MoveIssuesToBacklogRequest moveIssuesToBacklogRequest) throws ApiException {
        okhttp3.Call localVarCall = moveIssuesToEpicValidateBeforeCall(epicIdOrKey, moveIssuesToBacklogRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Move issues to epic (asynchronously)
     * Moves issues to an epic, for a given epic id. Issues can be only in a single epic at the same time. That means that already assigned issues to an epic, will not be assigned to the previous epic anymore. The user needs to have the edit issue permission for all issue they want to move and to the epic. The maximum number of issues that can be moved in one operation is 50. **Note:** This operation does not work for epics in next-gen projects.
     * @param epicIdOrKey The id or key of the epic that you want to assign issues to. (required)
     * @param moveIssuesToBacklogRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have edit issue permission for all issues to assign or for the epic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveIssuesToEpicAsync(String epicIdOrKey, MoveIssuesToBacklogRequest moveIssuesToBacklogRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveIssuesToEpicValidateBeforeCall(epicIdOrKey, moveIssuesToBacklogRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for partiallyUpdateEpic
     * @param epicIdOrKey The id or key of the epic to update. (required)
     * @param partiallyUpdateEpicRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated epic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or edit issue permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partiallyUpdateEpicCall(String epicIdOrKey, PartiallyUpdateEpicRequest partiallyUpdateEpicRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = partiallyUpdateEpicRequest;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/epic/{epicIdOrKey}"
            .replace("{" + "epicIdOrKey" + "}", localVarApiClient.escapeString(epicIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partiallyUpdateEpicValidateBeforeCall(String epicIdOrKey, PartiallyUpdateEpicRequest partiallyUpdateEpicRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'epicIdOrKey' is set
        if (epicIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'epicIdOrKey' when calling partiallyUpdateEpic(Async)");
        }

        // verify the required parameter 'partiallyUpdateEpicRequest' is set
        if (partiallyUpdateEpicRequest == null) {
            throw new ApiException("Missing the required parameter 'partiallyUpdateEpicRequest' when calling partiallyUpdateEpic(Async)");
        }

        return partiallyUpdateEpicCall(epicIdOrKey, partiallyUpdateEpicRequest, _callback);

    }

    /**
     * Partially update epic
     * Performs a partial update of the epic. A partial update means that fields not present in the request JSON will not be updated. Valid values for color are &#x60;color_1&#x60; to &#x60;color_9&#x60;. **Note:** This operation does not work for epics in next-gen projects.
     * @param epicIdOrKey The id or key of the epic to update. (required)
     * @param partiallyUpdateEpicRequest  (required)
     * @return PartiallyUpdateEpic200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated epic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or edit issue permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public PartiallyUpdateEpic200Response partiallyUpdateEpic(String epicIdOrKey, PartiallyUpdateEpicRequest partiallyUpdateEpicRequest) throws ApiException {
        ApiResponse<PartiallyUpdateEpic200Response> localVarResp = partiallyUpdateEpicWithHttpInfo(epicIdOrKey, partiallyUpdateEpicRequest);
        return localVarResp.getData();
    }

    /**
     * Partially update epic
     * Performs a partial update of the epic. A partial update means that fields not present in the request JSON will not be updated. Valid values for color are &#x60;color_1&#x60; to &#x60;color_9&#x60;. **Note:** This operation does not work for epics in next-gen projects.
     * @param epicIdOrKey The id or key of the epic to update. (required)
     * @param partiallyUpdateEpicRequest  (required)
     * @return ApiResponse&lt;PartiallyUpdateEpic200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated epic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or edit issue permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartiallyUpdateEpic200Response> partiallyUpdateEpicWithHttpInfo(String epicIdOrKey, PartiallyUpdateEpicRequest partiallyUpdateEpicRequest) throws ApiException {
        okhttp3.Call localVarCall = partiallyUpdateEpicValidateBeforeCall(epicIdOrKey, partiallyUpdateEpicRequest, null);
        Type localVarReturnType = new TypeToken<PartiallyUpdateEpic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Partially update epic (asynchronously)
     * Performs a partial update of the epic. A partial update means that fields not present in the request JSON will not be updated. Valid values for color are &#x60;color_1&#x60; to &#x60;color_9&#x60;. **Note:** This operation does not work for epics in next-gen projects.
     * @param epicIdOrKey The id or key of the epic to update. (required)
     * @param partiallyUpdateEpicRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated epic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or edit issue permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partiallyUpdateEpicAsync(String epicIdOrKey, PartiallyUpdateEpicRequest partiallyUpdateEpicRequest, final ApiCallback<PartiallyUpdateEpic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = partiallyUpdateEpicValidateBeforeCall(epicIdOrKey, partiallyUpdateEpicRequest, _callback);
        Type localVarReturnType = new TypeToken<PartiallyUpdateEpic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rankEpics
     * @param epicIdOrKey The id or key of the epic to rank. (required)
     * @param rankEpicsRequest bean which contains the information where the given epic should be ranked. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to rank. To rank issues user have to have schedule issue permission for epics that they want to rank. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the given epics in the path parameter or the request body do not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rankEpicsCall(String epicIdOrKey, RankEpicsRequest rankEpicsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rankEpicsRequest;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/epic/{epicIdOrKey}/rank"
            .replace("{" + "epicIdOrKey" + "}", localVarApiClient.escapeString(epicIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rankEpicsValidateBeforeCall(String epicIdOrKey, RankEpicsRequest rankEpicsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'epicIdOrKey' is set
        if (epicIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'epicIdOrKey' when calling rankEpics(Async)");
        }

        // verify the required parameter 'rankEpicsRequest' is set
        if (rankEpicsRequest == null) {
            throw new ApiException("Missing the required parameter 'rankEpicsRequest' when calling rankEpics(Async)");
        }

        return rankEpicsCall(epicIdOrKey, rankEpicsRequest, _callback);

    }

    /**
     * Rank epics
     * Moves (ranks) an epic before or after a given epic.  If rankCustomFieldId is not defined, the default rank field will be used.  **Note:** This operation does not work for epics in next-gen projects.
     * @param epicIdOrKey The id or key of the epic to rank. (required)
     * @param rankEpicsRequest bean which contains the information where the given epic should be ranked. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to rank. To rank issues user have to have schedule issue permission for epics that they want to rank. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the given epics in the path parameter or the request body do not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void rankEpics(String epicIdOrKey, RankEpicsRequest rankEpicsRequest) throws ApiException {
        rankEpicsWithHttpInfo(epicIdOrKey, rankEpicsRequest);
    }

    /**
     * Rank epics
     * Moves (ranks) an epic before or after a given epic.  If rankCustomFieldId is not defined, the default rank field will be used.  **Note:** This operation does not work for epics in next-gen projects.
     * @param epicIdOrKey The id or key of the epic to rank. (required)
     * @param rankEpicsRequest bean which contains the information where the given epic should be ranked. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to rank. To rank issues user have to have schedule issue permission for epics that they want to rank. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the given epics in the path parameter or the request body do not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rankEpicsWithHttpInfo(String epicIdOrKey, RankEpicsRequest rankEpicsRequest) throws ApiException {
        okhttp3.Call localVarCall = rankEpicsValidateBeforeCall(epicIdOrKey, rankEpicsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Rank epics (asynchronously)
     * Moves (ranks) an epic before or after a given epic.  If rankCustomFieldId is not defined, the default rank field will be used.  **Note:** This operation does not work for epics in next-gen projects.
     * @param epicIdOrKey The id or key of the epic to rank. (required)
     * @param rankEpicsRequest bean which contains the information where the given epic should be ranked. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to rank. To rank issues user have to have schedule issue permission for epics that they want to rank. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the given epics in the path parameter or the request body do not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rankEpicsAsync(String epicIdOrKey, RankEpicsRequest rankEpicsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rankEpicsValidateBeforeCall(epicIdOrKey, rankEpicsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeIssuesFromEpic
     * @param moveIssuesToBacklogRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have permission to assign issues. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeIssuesFromEpicCall(MoveIssuesToBacklogRequest moveIssuesToBacklogRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveIssuesToBacklogRequest;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/epic/none/issue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeIssuesFromEpicValidateBeforeCall(MoveIssuesToBacklogRequest moveIssuesToBacklogRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moveIssuesToBacklogRequest' is set
        if (moveIssuesToBacklogRequest == null) {
            throw new ApiException("Missing the required parameter 'moveIssuesToBacklogRequest' when calling removeIssuesFromEpic(Async)");
        }

        return removeIssuesFromEpicCall(moveIssuesToBacklogRequest, _callback);

    }

    /**
     * Remove issues from epic
     * Removes issues from epics. The user needs to have the edit issue permission for all issue they want to remove from epics. The maximum number of issues that can be moved in one operation is 50. **Note:** This operation does not work for epics in next-gen projects. Instead, update the issue using &#x60;\\{ fields: \\{ parent: \\{\\} \\} \\}&#x60;
     * @param moveIssuesToBacklogRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have permission to assign issues. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public void removeIssuesFromEpic(MoveIssuesToBacklogRequest moveIssuesToBacklogRequest) throws ApiException {
        removeIssuesFromEpicWithHttpInfo(moveIssuesToBacklogRequest);
    }

    /**
     * Remove issues from epic
     * Removes issues from epics. The user needs to have the edit issue permission for all issue they want to remove from epics. The maximum number of issues that can be moved in one operation is 50. **Note:** This operation does not work for epics in next-gen projects. Instead, update the issue using &#x60;\\{ fields: \\{ parent: \\{\\} \\} \\}&#x60;
     * @param moveIssuesToBacklogRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have permission to assign issues. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeIssuesFromEpicWithHttpInfo(MoveIssuesToBacklogRequest moveIssuesToBacklogRequest) throws ApiException {
        okhttp3.Call localVarCall = removeIssuesFromEpicValidateBeforeCall(moveIssuesToBacklogRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove issues from epic (asynchronously)
     * Removes issues from epics. The user needs to have the edit issue permission for all issue they want to remove from epics. The maximum number of issues that can be moved in one operation is 50. **Note:** This operation does not work for epics in next-gen projects. Instead, update the issue using &#x60;\\{ fields: \\{ parent: \\{\\} \\} \\}&#x60;
     * @param moveIssuesToBacklogRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have permission to assign issues. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the epic does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeIssuesFromEpicAsync(MoveIssuesToBacklogRequest moveIssuesToBacklogRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeIssuesFromEpicValidateBeforeCall(moveIssuesToBacklogRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
