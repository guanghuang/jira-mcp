/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.api;

import com.atlassian.jira.invoker.ApiCallback;
import com.atlassian.jira.invoker.ApiClient;
import com.atlassian.jira.invoker.ApiException;
import com.atlassian.jira.invoker.ApiResponse;
import com.atlassian.jira.invoker.Configuration;
import com.atlassian.jira.invoker.Pair;
import com.atlassian.jira.invoker.ProgressRequestBody;
import com.atlassian.jira.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.atlassian.jira.software.model.CreateBoardRequest;
import com.atlassian.jira.software.model.GetAllBoards200Response;
import com.atlassian.jira.software.model.GetAllBoards200ResponseValuesInner;
import com.atlassian.jira.software.model.GetAllQuickFilters200Response;
import com.atlassian.jira.software.model.GetAllQuickFilters200ResponseValuesInner;
import com.atlassian.jira.software.model.GetAllSprints200Response;
import com.atlassian.jira.software.model.GetAllVersions200Response;
import com.atlassian.jira.software.model.GetBoardByFilterId200Response;
import com.atlassian.jira.software.model.GetConfiguration200Response;
import com.atlassian.jira.software.model.GetEpics200Response;
import com.atlassian.jira.software.model.GetFeaturesForBoard200Response;
import com.atlassian.jira.software.model.GetProjects200Response;
import com.atlassian.jira.software.model.GetReportsForBoard200Response;
import com.atlassian.jira.software.model.MoveIssuesToBacklogForBoardRequest;
import com.atlassian.jira.software.model.MoveIssuesToBoard207Response;
import com.atlassian.jira.software.model.SearchResults;
import com.atlassian.jira.software.model.ToggleFeaturesRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.naming.directory.SearchResult;

public class BoardApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BoardApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BoardApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createBoard
     * @param createBoardRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created board. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBoardCall(CreateBoardRequest createBoardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBoardRequest;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBoardValidateBeforeCall(CreateBoardRequest createBoardRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createBoardRequest' is set
        if (createBoardRequest == null) {
            throw new ApiException("Missing the required parameter 'createBoardRequest' when calling createBoard(Async)");
        }

        return createBoardCall(createBoardRequest, _callback);

    }

    /**
     * Create board
     * Creates a new board. Board name, type and filter ID is required.   *  &#x60;name&#x60; \- Must be less than 255 characters.  *  &#x60;type&#x60; \- Valid values: scrum, kanban  *  &#x60;filterId&#x60; \- ID of a filter that the user has permissions to view. Note, if the user does not have the &#39;Create shared objects&#39; permission and tries to create a shared board, a private board will be created instead (remember that board sharing depends on the filter sharing).  *  &#x60;location&#x60; \- The container that the board will be located in. &#x60;location&#x60; must include the &#x60;type&#x60; property (Valid values: project, user). If choosing &#39;project&#39;, then a project must be specified by a &#x60;projectKeyOrId&#x60; property in &#x60;location&#x60;. If choosing &#39;user&#39;, the current user is chosen by default. The &#x60;projectKeyOrId&#x60; property should not be provided.  Note:   *  If you want to create a new project with an associated board, use the [Jira platform REST API](https://docs.atlassian.com/jira/REST/latest). For more information, see the [Create project](#api-rest-api-3-project-post) method. The &#x60;projectTypeKey&#x60; for software boards must be &#39;software&#39; and the &#x60;projectTemplateKey&#x60; must be either &#x60;com.pyxis.greenhopper.jira:gh-kanban-template&#x60; or &#x60;com.pyxis.greenhopper.jira:gh-scrum-template&#x60;.  *  You can create a filter using the [Jira REST API](https://docs.atlassian.com/jira/REST/latest). For more information, see the [Create filter](#api-rest-api-3-filter-post) method.  *  If you do not ORDER BY the Rank field for the filter of your board, you will not be able to reorder issues on the board.
     * @param createBoardRequest  (required)
     * @return GetAllBoards200ResponseValuesInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created board. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllBoards200ResponseValuesInner createBoard(CreateBoardRequest createBoardRequest) throws ApiException {
        ApiResponse<GetAllBoards200ResponseValuesInner> localVarResp = createBoardWithHttpInfo(createBoardRequest);
        return localVarResp.getData();
    }

    /**
     * Create board
     * Creates a new board. Board name, type and filter ID is required.   *  &#x60;name&#x60; \- Must be less than 255 characters.  *  &#x60;type&#x60; \- Valid values: scrum, kanban  *  &#x60;filterId&#x60; \- ID of a filter that the user has permissions to view. Note, if the user does not have the &#39;Create shared objects&#39; permission and tries to create a shared board, a private board will be created instead (remember that board sharing depends on the filter sharing).  *  &#x60;location&#x60; \- The container that the board will be located in. &#x60;location&#x60; must include the &#x60;type&#x60; property (Valid values: project, user). If choosing &#39;project&#39;, then a project must be specified by a &#x60;projectKeyOrId&#x60; property in &#x60;location&#x60;. If choosing &#39;user&#39;, the current user is chosen by default. The &#x60;projectKeyOrId&#x60; property should not be provided.  Note:   *  If you want to create a new project with an associated board, use the [Jira platform REST API](https://docs.atlassian.com/jira/REST/latest). For more information, see the [Create project](#api-rest-api-3-project-post) method. The &#x60;projectTypeKey&#x60; for software boards must be &#39;software&#39; and the &#x60;projectTemplateKey&#x60; must be either &#x60;com.pyxis.greenhopper.jira:gh-kanban-template&#x60; or &#x60;com.pyxis.greenhopper.jira:gh-scrum-template&#x60;.  *  You can create a filter using the [Jira REST API](https://docs.atlassian.com/jira/REST/latest). For more information, see the [Create filter](#api-rest-api-3-filter-post) method.  *  If you do not ORDER BY the Rank field for the filter of your board, you will not be able to reorder issues on the board.
     * @param createBoardRequest  (required)
     * @return ApiResponse&lt;GetAllBoards200ResponseValuesInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created board. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllBoards200ResponseValuesInner> createBoardWithHttpInfo(CreateBoardRequest createBoardRequest) throws ApiException {
        okhttp3.Call localVarCall = createBoardValidateBeforeCall(createBoardRequest, null);
        Type localVarReturnType = new TypeToken<GetAllBoards200ResponseValuesInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create board (asynchronously)
     * Creates a new board. Board name, type and filter ID is required.   *  &#x60;name&#x60; \- Must be less than 255 characters.  *  &#x60;type&#x60; \- Valid values: scrum, kanban  *  &#x60;filterId&#x60; \- ID of a filter that the user has permissions to view. Note, if the user does not have the &#39;Create shared objects&#39; permission and tries to create a shared board, a private board will be created instead (remember that board sharing depends on the filter sharing).  *  &#x60;location&#x60; \- The container that the board will be located in. &#x60;location&#x60; must include the &#x60;type&#x60; property (Valid values: project, user). If choosing &#39;project&#39;, then a project must be specified by a &#x60;projectKeyOrId&#x60; property in &#x60;location&#x60;. If choosing &#39;user&#39;, the current user is chosen by default. The &#x60;projectKeyOrId&#x60; property should not be provided.  Note:   *  If you want to create a new project with an associated board, use the [Jira platform REST API](https://docs.atlassian.com/jira/REST/latest). For more information, see the [Create project](#api-rest-api-3-project-post) method. The &#x60;projectTypeKey&#x60; for software boards must be &#39;software&#39; and the &#x60;projectTemplateKey&#x60; must be either &#x60;com.pyxis.greenhopper.jira:gh-kanban-template&#x60; or &#x60;com.pyxis.greenhopper.jira:gh-scrum-template&#x60;.  *  You can create a filter using the [Jira REST API](https://docs.atlassian.com/jira/REST/latest). For more information, see the [Create filter](#api-rest-api-3-filter-post) method.  *  If you do not ORDER BY the Rank field for the filter of your board, you will not be able to reorder issues on the board.
     * @param createBoardRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created board. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBoardAsync(CreateBoardRequest createBoardRequest, final ApiCallback<GetAllBoards200ResponseValuesInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBoardValidateBeforeCall(createBoardRequest, _callback);
        Type localVarReturnType = new TypeToken<GetAllBoards200ResponseValuesInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBoard
     * @param boardId ID of the board to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the board has been successfully removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license, or when the user does not have the permission to delete the board, or when the user tried to delete a next-gen board. The user has to be a Jira Administrator or a board administrator to remove the board. Next-gen boards cannot be deleted, because next-gen software projects must have a board. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if a board with the given ID does not exist or the user does not have the permission to view the board. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBoardCall(Long boardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBoardValidateBeforeCall(Long boardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling deleteBoard(Async)");
        }

        return deleteBoardCall(boardId, _callback);

    }

    /**
     * Delete board
     * Deletes the board. Admin without the view permission can still remove the board.
     * @param boardId ID of the board to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the board has been successfully removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license, or when the user does not have the permission to delete the board, or when the user tried to delete a next-gen board. The user has to be a Jira Administrator or a board administrator to remove the board. Next-gen boards cannot be deleted, because next-gen software projects must have a board. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if a board with the given ID does not exist or the user does not have the permission to view the board. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBoard(Long boardId) throws ApiException {
        deleteBoardWithHttpInfo(boardId);
    }

    /**
     * Delete board
     * Deletes the board. Admin without the view permission can still remove the board.
     * @param boardId ID of the board to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the board has been successfully removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license, or when the user does not have the permission to delete the board, or when the user tried to delete a next-gen board. The user has to be a Jira Administrator or a board administrator to remove the board. Next-gen boards cannot be deleted, because next-gen software projects must have a board. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if a board with the given ID does not exist or the user does not have the permission to view the board. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBoardWithHttpInfo(Long boardId) throws ApiException {
        okhttp3.Call localVarCall = deleteBoardValidateBeforeCall(boardId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete board (asynchronously)
     * Deletes the board. Admin without the view permission can still remove the board.
     * @param boardId ID of the board to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the board has been successfully removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license, or when the user does not have the permission to delete the board, or when the user tried to delete a next-gen board. The user has to be a Jira Administrator or a board administrator to remove the board. Next-gen boards cannot be deleted, because next-gen software projects must have a board. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if a board with the given ID does not exist or the user does not have the permission to view the board. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBoardAsync(Long boardId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBoardValidateBeforeCall(boardId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBoardProperty
     * @param boardId the id of the board from which the property will be removed. (required)
     * @param propertyKey the key of the property to remove. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the board property was removed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist, or if the property with given key is not found, or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBoardPropertyCall(String boardId, String propertyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/properties/{propertyKey}"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()))
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBoardPropertyValidateBeforeCall(String boardId, String propertyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling deleteBoardProperty(Async)");
        }

        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling deleteBoardProperty(Async)");
        }

        return deleteBoardPropertyCall(boardId, propertyKey, _callback);

    }

    /**
     * Delete board property
     * Removes the property from the board identified by the id. Ths user removing the property is required to have permissions to modify the board.
     * @param boardId the id of the board from which the property will be removed. (required)
     * @param propertyKey the key of the property to remove. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the board property was removed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist, or if the property with given key is not found, or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBoardProperty(String boardId, String propertyKey) throws ApiException {
        deleteBoardPropertyWithHttpInfo(boardId, propertyKey);
    }

    /**
     * Delete board property
     * Removes the property from the board identified by the id. Ths user removing the property is required to have permissions to modify the board.
     * @param boardId the id of the board from which the property will be removed. (required)
     * @param propertyKey the key of the property to remove. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the board property was removed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist, or if the property with given key is not found, or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBoardPropertyWithHttpInfo(String boardId, String propertyKey) throws ApiException {
        okhttp3.Call localVarCall = deleteBoardPropertyValidateBeforeCall(boardId, propertyKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete board property (asynchronously)
     * Removes the property from the board identified by the id. Ths user removing the property is required to have permissions to modify the board.
     * @param boardId the id of the board from which the property will be removed. (required)
     * @param propertyKey the key of the property to remove. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the board property was removed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist, or if the property with given key is not found, or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBoardPropertyAsync(String boardId, String propertyKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBoardPropertyValidateBeforeCall(boardId, propertyKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllBoards
     * @param startAt The starting index of the returned boards. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional, default to 0)
     * @param maxResults The maximum number of boards to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional, default to 50)
     * @param type Filters results to boards of the specified types. Valid values: scrum, kanban, simple. (optional)
     * @param name Filters results to boards that match or partially match the specified name. (optional)
     * @param projectKeyOrId Filters results to boards that are relevant to a project. Relevance means that the jql filter defined in board contains a reference to a project. (optional)
     * @param accountIdLocation  (optional)
     * @param projectLocation  (optional)
     * @param includePrivate Appends private boards to the end of the list. The name and type fields are excluded for security reasons. (optional)
     * @param negateLocationFiltering If set to true, negate filters used for querying by location. By default false. (optional)
     * @param orderBy Ordering of the results by a given field. If not provided, values will not be sorted. Valid values: name. (optional)
     * @param expand List of fields to expand for each board. Valid values: admins, permissions. (optional)
     * @param projectTypeLocation Filters results to boards that are relevant to a project types. Support Jira Software, Jira Service Management. Valid values: software, service\_desk. By default software. (optional)
     * @param filterId Filters results to boards that are relevant to a filter. Not supported for next-gen boards. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested boards, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have valid license. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllBoardsCall(Long startAt, Integer maxResults, Object type, String name, String projectKeyOrId, String accountIdLocation, String projectLocation, Boolean includePrivate, Boolean negateLocationFiltering, String orderBy, String expand, List<String> projectTypeLocation, Long filterId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(type));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (projectKeyOrId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectKeyOrId", projectKeyOrId));
        }

        if (accountIdLocation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountIdLocation", accountIdLocation));
        }

        if (projectLocation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectLocation", projectLocation));
        }

        if (includePrivate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePrivate", includePrivate));
        }

        if (negateLocationFiltering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("negateLocationFiltering", negateLocationFiltering));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (projectTypeLocation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectTypeLocation", projectTypeLocation));
        }

        if (filterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterId", filterId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllBoardsValidateBeforeCall(Long startAt, Integer maxResults, Object type, String name, String projectKeyOrId, String accountIdLocation, String projectLocation, Boolean includePrivate, Boolean negateLocationFiltering, String orderBy, String expand, List<String> projectTypeLocation, Long filterId, final ApiCallback _callback) throws ApiException {
        return getAllBoardsCall(startAt, maxResults, type, name, projectKeyOrId, accountIdLocation, projectLocation, includePrivate, negateLocationFiltering, orderBy, expand, projectTypeLocation, filterId, _callback);

    }

    /**
     * Get all boards
     * Returns all boards. This only includes boards that the user has permission to view.  **Deprecation notice:** The required OAuth 2.0 scopes will be updated on February 15, 2024.   *  &#x60;read:board-scope:jira-software&#x60;, &#x60;read:project:jira&#x60;
     * @param startAt The starting index of the returned boards. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional, default to 0)
     * @param maxResults The maximum number of boards to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional, default to 50)
     * @param type Filters results to boards of the specified types. Valid values: scrum, kanban, simple. (optional)
     * @param name Filters results to boards that match or partially match the specified name. (optional)
     * @param projectKeyOrId Filters results to boards that are relevant to a project. Relevance means that the jql filter defined in board contains a reference to a project. (optional)
     * @param accountIdLocation  (optional)
     * @param projectLocation  (optional)
     * @param includePrivate Appends private boards to the end of the list. The name and type fields are excluded for security reasons. (optional)
     * @param negateLocationFiltering If set to true, negate filters used for querying by location. By default false. (optional)
     * @param orderBy Ordering of the results by a given field. If not provided, values will not be sorted. Valid values: name. (optional)
     * @param expand List of fields to expand for each board. Valid values: admins, permissions. (optional)
     * @param projectTypeLocation Filters results to boards that are relevant to a project types. Support Jira Software, Jira Service Management. Valid values: software, service\_desk. By default software. (optional)
     * @param filterId Filters results to boards that are relevant to a filter. Not supported for next-gen boards. (optional)
     * @return GetAllBoards200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested boards, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have valid license. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllBoards200Response getAllBoards(Long startAt, Integer maxResults, Object type, String name, String projectKeyOrId, String accountIdLocation, String projectLocation, Boolean includePrivate, Boolean negateLocationFiltering, String orderBy, String expand, List<String> projectTypeLocation, Long filterId) throws ApiException {
        ApiResponse<GetAllBoards200Response> localVarResp = getAllBoardsWithHttpInfo(startAt, maxResults, type, name, projectKeyOrId, accountIdLocation, projectLocation, includePrivate, negateLocationFiltering, orderBy, expand, projectTypeLocation, filterId);
        return localVarResp.getData();
    }

    /**
     * Get all boards
     * Returns all boards. This only includes boards that the user has permission to view.  **Deprecation notice:** The required OAuth 2.0 scopes will be updated on February 15, 2024.   *  &#x60;read:board-scope:jira-software&#x60;, &#x60;read:project:jira&#x60;
     * @param startAt The starting index of the returned boards. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional, default to 0)
     * @param maxResults The maximum number of boards to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional, default to 50)
     * @param type Filters results to boards of the specified types. Valid values: scrum, kanban, simple. (optional)
     * @param name Filters results to boards that match or partially match the specified name. (optional)
     * @param projectKeyOrId Filters results to boards that are relevant to a project. Relevance means that the jql filter defined in board contains a reference to a project. (optional)
     * @param accountIdLocation  (optional)
     * @param projectLocation  (optional)
     * @param includePrivate Appends private boards to the end of the list. The name and type fields are excluded for security reasons. (optional)
     * @param negateLocationFiltering If set to true, negate filters used for querying by location. By default false. (optional)
     * @param orderBy Ordering of the results by a given field. If not provided, values will not be sorted. Valid values: name. (optional)
     * @param expand List of fields to expand for each board. Valid values: admins, permissions. (optional)
     * @param projectTypeLocation Filters results to boards that are relevant to a project types. Support Jira Software, Jira Service Management. Valid values: software, service\_desk. By default software. (optional)
     * @param filterId Filters results to boards that are relevant to a filter. Not supported for next-gen boards. (optional)
     * @return ApiResponse&lt;GetAllBoards200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested boards, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have valid license. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllBoards200Response> getAllBoardsWithHttpInfo(Long startAt, Integer maxResults, Object type, String name, String projectKeyOrId, String accountIdLocation, String projectLocation, Boolean includePrivate, Boolean negateLocationFiltering, String orderBy, String expand, List<String> projectTypeLocation, Long filterId) throws ApiException {
        okhttp3.Call localVarCall = getAllBoardsValidateBeforeCall(startAt, maxResults, type, name, projectKeyOrId, accountIdLocation, projectLocation, includePrivate, negateLocationFiltering, orderBy, expand, projectTypeLocation, filterId, null);
        Type localVarReturnType = new TypeToken<GetAllBoards200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all boards (asynchronously)
     * Returns all boards. This only includes boards that the user has permission to view.  **Deprecation notice:** The required OAuth 2.0 scopes will be updated on February 15, 2024.   *  &#x60;read:board-scope:jira-software&#x60;, &#x60;read:project:jira&#x60;
     * @param startAt The starting index of the returned boards. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional, default to 0)
     * @param maxResults The maximum number of boards to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional, default to 50)
     * @param type Filters results to boards of the specified types. Valid values: scrum, kanban, simple. (optional)
     * @param name Filters results to boards that match or partially match the specified name. (optional)
     * @param projectKeyOrId Filters results to boards that are relevant to a project. Relevance means that the jql filter defined in board contains a reference to a project. (optional)
     * @param accountIdLocation  (optional)
     * @param projectLocation  (optional)
     * @param includePrivate Appends private boards to the end of the list. The name and type fields are excluded for security reasons. (optional)
     * @param negateLocationFiltering If set to true, negate filters used for querying by location. By default false. (optional)
     * @param orderBy Ordering of the results by a given field. If not provided, values will not be sorted. Valid values: name. (optional)
     * @param expand List of fields to expand for each board. Valid values: admins, permissions. (optional)
     * @param projectTypeLocation Filters results to boards that are relevant to a project types. Support Jira Software, Jira Service Management. Valid values: software, service\_desk. By default software. (optional)
     * @param filterId Filters results to boards that are relevant to a filter. Not supported for next-gen boards. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested boards, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have valid license. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllBoardsAsync(Long startAt, Integer maxResults, Object type, String name, String projectKeyOrId, String accountIdLocation, String projectLocation, Boolean includePrivate, Boolean negateLocationFiltering, String orderBy, String expand, List<String> projectTypeLocation, Long filterId, final ApiCallback<GetAllBoards200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllBoardsValidateBeforeCall(startAt, maxResults, type, name, projectKeyOrId, accountIdLocation, projectLocation, includePrivate, negateLocationFiltering, orderBy, expand, projectTypeLocation, filterId, _callback);
        Type localVarReturnType = new TypeToken<GetAllBoards200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllQuickFilters
     * @param boardId The ID of the board that contains the requested quick filters. (required)
     * @param startAt The starting index of the returned quick filters. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of sprints to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested quick filters, at the specified page of the results. Quick filters will be ordered first by position. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllQuickFiltersCall(Long boardId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/quickfilter"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllQuickFiltersValidateBeforeCall(Long boardId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getAllQuickFilters(Async)");
        }

        return getAllQuickFiltersCall(boardId, startAt, maxResults, _callback);

    }

    /**
     * Get all quick filters
     * Returns all quick filters from a board, for a given board ID.
     * @param boardId The ID of the board that contains the requested quick filters. (required)
     * @param startAt The starting index of the returned quick filters. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of sprints to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @return GetAllQuickFilters200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested quick filters, at the specified page of the results. Quick filters will be ordered first by position. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllQuickFilters200Response getAllQuickFilters(Long boardId, Long startAt, Integer maxResults) throws ApiException {
        ApiResponse<GetAllQuickFilters200Response> localVarResp = getAllQuickFiltersWithHttpInfo(boardId, startAt, maxResults);
        return localVarResp.getData();
    }

    /**
     * Get all quick filters
     * Returns all quick filters from a board, for a given board ID.
     * @param boardId The ID of the board that contains the requested quick filters. (required)
     * @param startAt The starting index of the returned quick filters. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of sprints to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @return ApiResponse&lt;GetAllQuickFilters200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested quick filters, at the specified page of the results. Quick filters will be ordered first by position. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllQuickFilters200Response> getAllQuickFiltersWithHttpInfo(Long boardId, Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getAllQuickFiltersValidateBeforeCall(boardId, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<GetAllQuickFilters200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all quick filters (asynchronously)
     * Returns all quick filters from a board, for a given board ID.
     * @param boardId The ID of the board that contains the requested quick filters. (required)
     * @param startAt The starting index of the returned quick filters. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of sprints to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested quick filters, at the specified page of the results. Quick filters will be ordered first by position. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllQuickFiltersAsync(Long boardId, Long startAt, Integer maxResults, final ApiCallback<GetAllQuickFilters200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllQuickFiltersValidateBeforeCall(boardId, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<GetAllQuickFilters200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllSprints
     * @param boardId The ID of the board that contains the requested sprints. (required)
     * @param startAt The starting index of the returned sprints. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of sprints to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param state Filters results to sprints in specified states. Valid values: future, active, closed. You can define multiple states separated by commas, e.g. state&#x3D;active,closed (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested sprints, at the specified page of the results. Sprints will be ordered first by state (i.e. closed, active, future) then by their position in the backlog. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllSprintsCall(Long boardId, Long startAt, Integer maxResults, Object state, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/sprint"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(state));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllSprintsValidateBeforeCall(Long boardId, Long startAt, Integer maxResults, Object state, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getAllSprints(Async)");
        }

        return getAllSprintsCall(boardId, startAt, maxResults, state, _callback);

    }

    /**
     * Get all sprints
     * Returns all sprints from a board, for a given board ID. This only includes sprints that the user has permission to view.
     * @param boardId The ID of the board that contains the requested sprints. (required)
     * @param startAt The starting index of the returned sprints. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of sprints to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param state Filters results to sprints in specified states. Valid values: future, active, closed. You can define multiple states separated by commas, e.g. state&#x3D;active,closed (optional)
     * @return GetAllSprints200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested sprints, at the specified page of the results. Sprints will be ordered first by state (i.e. closed, active, future) then by their position in the backlog. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllSprints200Response getAllSprints(Long boardId, Long startAt, Integer maxResults, Object state) throws ApiException {
        ApiResponse<GetAllSprints200Response> localVarResp = getAllSprintsWithHttpInfo(boardId, startAt, maxResults, state);
        return localVarResp.getData();
    }

    /**
     * Get all sprints
     * Returns all sprints from a board, for a given board ID. This only includes sprints that the user has permission to view.
     * @param boardId The ID of the board that contains the requested sprints. (required)
     * @param startAt The starting index of the returned sprints. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of sprints to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param state Filters results to sprints in specified states. Valid values: future, active, closed. You can define multiple states separated by commas, e.g. state&#x3D;active,closed (optional)
     * @return ApiResponse&lt;GetAllSprints200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested sprints, at the specified page of the results. Sprints will be ordered first by state (i.e. closed, active, future) then by their position in the backlog. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllSprints200Response> getAllSprintsWithHttpInfo(Long boardId, Long startAt, Integer maxResults, Object state) throws ApiException {
        okhttp3.Call localVarCall = getAllSprintsValidateBeforeCall(boardId, startAt, maxResults, state, null);
        Type localVarReturnType = new TypeToken<GetAllSprints200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all sprints (asynchronously)
     * Returns all sprints from a board, for a given board ID. This only includes sprints that the user has permission to view.
     * @param boardId The ID of the board that contains the requested sprints. (required)
     * @param startAt The starting index of the returned sprints. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of sprints to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param state Filters results to sprints in specified states. Valid values: future, active, closed. You can define multiple states separated by commas, e.g. state&#x3D;active,closed (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested sprints, at the specified page of the results. Sprints will be ordered first by state (i.e. closed, active, future) then by their position in the backlog. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllSprintsAsync(Long boardId, Long startAt, Integer maxResults, Object state, final ApiCallback<GetAllSprints200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllSprintsValidateBeforeCall(boardId, startAt, maxResults, state, _callback);
        Type localVarReturnType = new TypeToken<GetAllSprints200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllVersions
     * @param boardId The ID of the board that contains the requested versions. (required)
     * @param startAt The starting index of the returned versions. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of versions to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param released Filters results to versions that are either released or unreleased. Valid values: true, false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested versions, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllVersionsCall(Long boardId, Long startAt, Integer maxResults, String released, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/version"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (released != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("released", released));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllVersionsValidateBeforeCall(Long boardId, Long startAt, Integer maxResults, String released, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getAllVersions(Async)");
        }

        return getAllVersionsCall(boardId, startAt, maxResults, released, _callback);

    }

    /**
     * Get all versions
     * Returns all versions from a board, for a given board ID. This only includes versions that the user has permission to view. Note, if the user does not have permission to view the board, no versions will be returned at all. Returned versions are ordered by the name of the project from which they belong and then by sequence defined by user.
     * @param boardId The ID of the board that contains the requested versions. (required)
     * @param startAt The starting index of the returned versions. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of versions to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param released Filters results to versions that are either released or unreleased. Valid values: true, false. (optional)
     * @return GetAllVersions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested versions, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllVersions200Response getAllVersions(Long boardId, Long startAt, Integer maxResults, String released) throws ApiException {
        ApiResponse<GetAllVersions200Response> localVarResp = getAllVersionsWithHttpInfo(boardId, startAt, maxResults, released);
        return localVarResp.getData();
    }

    /**
     * Get all versions
     * Returns all versions from a board, for a given board ID. This only includes versions that the user has permission to view. Note, if the user does not have permission to view the board, no versions will be returned at all. Returned versions are ordered by the name of the project from which they belong and then by sequence defined by user.
     * @param boardId The ID of the board that contains the requested versions. (required)
     * @param startAt The starting index of the returned versions. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of versions to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param released Filters results to versions that are either released or unreleased. Valid values: true, false. (optional)
     * @return ApiResponse&lt;GetAllVersions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested versions, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllVersions200Response> getAllVersionsWithHttpInfo(Long boardId, Long startAt, Integer maxResults, String released) throws ApiException {
        okhttp3.Call localVarCall = getAllVersionsValidateBeforeCall(boardId, startAt, maxResults, released, null);
        Type localVarReturnType = new TypeToken<GetAllVersions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all versions (asynchronously)
     * Returns all versions from a board, for a given board ID. This only includes versions that the user has permission to view. Note, if the user does not have permission to view the board, no versions will be returned at all. Returned versions are ordered by the name of the project from which they belong and then by sequence defined by user.
     * @param boardId The ID of the board that contains the requested versions. (required)
     * @param startAt The starting index of the returned versions. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of versions to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param released Filters results to versions that are either released or unreleased. Valid values: true, false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested versions, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllVersionsAsync(Long boardId, Long startAt, Integer maxResults, String released, final ApiCallback<GetAllVersions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllVersionsValidateBeforeCall(boardId, startAt, maxResults, released, _callback);
        Type localVarReturnType = new TypeToken<GetAllVersions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoard
     * @param boardId The ID of the requested board. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested board. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardCall(Long boardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardValidateBeforeCall(Long boardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getBoard(Async)");
        }

        return getBoardCall(boardId, _callback);

    }

    /**
     * Get board
     * Returns the board for the given board ID. This board will only be returned if the user has permission to view it. Admins without the view permission will see the board as a private one, so will see only a subset of the board&#39;s data (board location for instance).
     * @param boardId The ID of the requested board. (required)
     * @return GetAllBoards200ResponseValuesInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested board. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllBoards200ResponseValuesInner getBoard(Long boardId) throws ApiException {
        ApiResponse<GetAllBoards200ResponseValuesInner> localVarResp = getBoardWithHttpInfo(boardId);
        return localVarResp.getData();
    }

    /**
     * Get board
     * Returns the board for the given board ID. This board will only be returned if the user has permission to view it. Admins without the view permission will see the board as a private one, so will see only a subset of the board&#39;s data (board location for instance).
     * @param boardId The ID of the requested board. (required)
     * @return ApiResponse&lt;GetAllBoards200ResponseValuesInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested board. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllBoards200ResponseValuesInner> getBoardWithHttpInfo(Long boardId) throws ApiException {
        okhttp3.Call localVarCall = getBoardValidateBeforeCall(boardId, null);
        Type localVarReturnType = new TypeToken<GetAllBoards200ResponseValuesInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get board (asynchronously)
     * Returns the board for the given board ID. This board will only be returned if the user has permission to view it. Admins without the view permission will see the board as a private one, so will see only a subset of the board&#39;s data (board location for instance).
     * @param boardId The ID of the requested board. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested board. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardAsync(Long boardId, final ApiCallback<GetAllBoards200ResponseValuesInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardValidateBeforeCall(boardId, _callback);
        Type localVarReturnType = new TypeToken<GetAllBoards200ResponseValuesInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardByFilterId
     * @param filterId Filters results to boards that are relevant to a filter. Not supported for next-gen boards. (required)
     * @param startAt The starting index of the returned boards. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of boards to return per page. Default: 50. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested boards, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardByFilterIdCall(Long filterId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/filter/{filterId}"
            .replace("{" + "filterId" + "}", localVarApiClient.escapeString(filterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardByFilterIdValidateBeforeCall(Long filterId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filterId' is set
        if (filterId == null) {
            throw new ApiException("Missing the required parameter 'filterId' when calling getBoardByFilterId(Async)");
        }

        return getBoardByFilterIdCall(filterId, startAt, maxResults, _callback);

    }

    /**
     * Get board by filter id
     * Returns any boards which use the provided filter id. This method can be executed by users without a valid software license in order to find which boards are using a particular filter.
     * @param filterId Filters results to boards that are relevant to a filter. Not supported for next-gen boards. (required)
     * @param startAt The starting index of the returned boards. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of boards to return per page. Default: 50. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @return GetBoardByFilterId200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested boards, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardByFilterId200Response getBoardByFilterId(Long filterId, Long startAt, Integer maxResults) throws ApiException {
        ApiResponse<GetBoardByFilterId200Response> localVarResp = getBoardByFilterIdWithHttpInfo(filterId, startAt, maxResults);
        return localVarResp.getData();
    }

    /**
     * Get board by filter id
     * Returns any boards which use the provided filter id. This method can be executed by users without a valid software license in order to find which boards are using a particular filter.
     * @param filterId Filters results to boards that are relevant to a filter. Not supported for next-gen boards. (required)
     * @param startAt The starting index of the returned boards. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of boards to return per page. Default: 50. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @return ApiResponse&lt;GetBoardByFilterId200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested boards, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBoardByFilterId200Response> getBoardByFilterIdWithHttpInfo(Long filterId, Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getBoardByFilterIdValidateBeforeCall(filterId, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<GetBoardByFilterId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get board by filter id (asynchronously)
     * Returns any boards which use the provided filter id. This method can be executed by users without a valid software license in order to find which boards are using a particular filter.
     * @param filterId Filters results to boards that are relevant to a filter. Not supported for next-gen boards. (required)
     * @param startAt The starting index of the returned boards. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of boards to return per page. Default: 50. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested boards, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardByFilterIdAsync(Long filterId, Long startAt, Integer maxResults, final ApiCallback<GetBoardByFilterId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardByFilterIdValidateBeforeCall(filterId, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<GetBoardByFilterId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardIssuesForEpic
     * @param boardId The ID of the board that contains the requested issues. (required)
     * @param epicId The ID of the epic that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. Default: 50. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardIssuesForEpicCall(Long boardId, Long epicId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/epic/{epicId}/issue"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()))
            .replace("{" + "epicId" + "}", localVarApiClient.escapeString(epicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (jql != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jql", jql));
        }

        if (validateQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validateQuery", validateQuery));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardIssuesForEpicValidateBeforeCall(Long boardId, Long epicId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getBoardIssuesForEpic(Async)");
        }

        // verify the required parameter 'epicId' is set
        if (epicId == null) {
            throw new ApiException("Missing the required parameter 'epicId' when calling getBoardIssuesForEpic(Async)");
        }

        return getBoardIssuesForEpicCall(boardId, epicId, startAt, maxResults, jql, validateQuery, fields, expand, _callback);

    }

    /**
     * Get board issues for epic
     * Returns all issues that belong to an epic on the board, for the given epic ID and the board ID. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * @param boardId The ID of the board that contains the requested issues. (required)
     * @param epicId The ID of the epic that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. Default: 50. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @return SearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public SearchResults getBoardIssuesForEpic(Long boardId, Long epicId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand) throws ApiException {
        ApiResponse<SearchResults> localVarResp = getBoardIssuesForEpicWithHttpInfo(boardId, epicId, startAt, maxResults, jql, validateQuery, fields, expand);
        return localVarResp.getData();
    }

    /**
     * Get board issues for epic
     * Returns all issues that belong to an epic on the board, for the given epic ID and the board ID. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * @param boardId The ID of the board that contains the requested issues. (required)
     * @param epicId The ID of the epic that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. Default: 50. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @return ApiResponse&lt;SearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResults> getBoardIssuesForEpicWithHttpInfo(Long boardId, Long epicId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand) throws ApiException {
        okhttp3.Call localVarCall = getBoardIssuesForEpicValidateBeforeCall(boardId, epicId, startAt, maxResults, jql, validateQuery, fields, expand, null);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get board issues for epic (asynchronously)
     * Returns all issues that belong to an epic on the board, for the given epic ID and the board ID. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * @param boardId The ID of the board that contains the requested issues. (required)
     * @param epicId The ID of the epic that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. Default: 50. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardIssuesForEpicAsync(Long boardId, Long epicId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback<SearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardIssuesForEpicValidateBeforeCall(boardId, epicId, startAt, maxResults, jql, validateQuery, fields, expand, _callback);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardIssuesForSprint
     * @param boardId The ID of the board that contains requested issues. (required)
     * @param sprintId The ID of the sprint that contains requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardIssuesForSprintCall(Long boardId, Long sprintId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/sprint/{sprintId}/issue"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()))
            .replace("{" + "sprintId" + "}", localVarApiClient.escapeString(sprintId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (jql != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jql", jql));
        }

        if (validateQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validateQuery", validateQuery));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardIssuesForSprintValidateBeforeCall(Long boardId, Long sprintId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getBoardIssuesForSprint(Async)");
        }

        // verify the required parameter 'sprintId' is set
        if (sprintId == null) {
            throw new ApiException("Missing the required parameter 'sprintId' when calling getBoardIssuesForSprint(Async)");
        }

        return getBoardIssuesForSprintCall(boardId, sprintId, startAt, maxResults, jql, validateQuery, fields, expand, _callback);

    }

    /**
     * Get board issues for sprint
     * Get all issues you have access to that belong to the sprint from the board. Issue returned from this resource contains additional fields like: sprint, closedSprints, flagged and epic. Issues are returned ordered by rank. JQL order has higher priority than default rank.
     * @param boardId The ID of the board that contains requested issues. (required)
     * @param sprintId The ID of the sprint that contains requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @return SearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public SearchResults getBoardIssuesForSprint(Long boardId, Long sprintId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand) throws ApiException {
        ApiResponse<SearchResults> localVarResp = getBoardIssuesForSprintWithHttpInfo(boardId, sprintId, startAt, maxResults, jql, validateQuery, fields, expand);
        return localVarResp.getData();
    }

    /**
     * Get board issues for sprint
     * Get all issues you have access to that belong to the sprint from the board. Issue returned from this resource contains additional fields like: sprint, closedSprints, flagged and epic. Issues are returned ordered by rank. JQL order has higher priority than default rank.
     * @param boardId The ID of the board that contains requested issues. (required)
     * @param sprintId The ID of the sprint that contains requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @return ApiResponse&lt;SearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResults> getBoardIssuesForSprintWithHttpInfo(Long boardId, Long sprintId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand) throws ApiException {
        okhttp3.Call localVarCall = getBoardIssuesForSprintValidateBeforeCall(boardId, sprintId, startAt, maxResults, jql, validateQuery, fields, expand, null);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get board issues for sprint (asynchronously)
     * Get all issues you have access to that belong to the sprint from the board. Issue returned from this resource contains additional fields like: sprint, closedSprints, flagged and epic. Issues are returned ordered by rank. JQL order has higher priority than default rank.
     * @param boardId The ID of the board that contains requested issues. (required)
     * @param sprintId The ID of the sprint that contains requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardIssuesForSprintAsync(Long boardId, Long sprintId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback<SearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardIssuesForSprintValidateBeforeCall(boardId, sprintId, startAt, maxResults, jql, validateQuery, fields, expand, _callback);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardProperty
     * @param boardId the ID of the board from which the property will be returned. (required)
     * @param propertyKey the key of the property to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the board exists and the property was found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist, or if the property with given key is not found, or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardPropertyCall(String boardId, String propertyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/properties/{propertyKey}"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()))
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardPropertyValidateBeforeCall(String boardId, String propertyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getBoardProperty(Async)");
        }

        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling getBoardProperty(Async)");
        }

        return getBoardPropertyCall(boardId, propertyKey, _callback);

    }

    /**
     * Get board property
     * Returns the value of the property with a given key from the board identified by the provided id. The user who retrieves the property is required to have permissions to view the board.
     * @param boardId the ID of the board from which the property will be returned. (required)
     * @param propertyKey the key of the property to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the board exists and the property was found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist, or if the property with given key is not found, or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardProperty(String boardId, String propertyKey) throws ApiException {
        getBoardPropertyWithHttpInfo(boardId, propertyKey);
    }

    /**
     * Get board property
     * Returns the value of the property with a given key from the board identified by the provided id. The user who retrieves the property is required to have permissions to view the board.
     * @param boardId the ID of the board from which the property will be returned. (required)
     * @param propertyKey the key of the property to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the board exists and the property was found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist, or if the property with given key is not found, or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardPropertyWithHttpInfo(String boardId, String propertyKey) throws ApiException {
        okhttp3.Call localVarCall = getBoardPropertyValidateBeforeCall(boardId, propertyKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get board property (asynchronously)
     * Returns the value of the property with a given key from the board identified by the provided id. The user who retrieves the property is required to have permissions to view the board.
     * @param boardId the ID of the board from which the property will be returned. (required)
     * @param propertyKey the key of the property to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the board exists and the property was found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist, or if the property with given key is not found, or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardPropertyAsync(String boardId, String propertyKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardPropertyValidateBeforeCall(boardId, propertyKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardPropertyKeys
     * @param boardId the ID of the board from which property keys will be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the board with given id exists. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist, or if the property with given key is not found, or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardPropertyKeysCall(String boardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/properties"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardPropertyKeysValidateBeforeCall(String boardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getBoardPropertyKeys(Async)");
        }

        return getBoardPropertyKeysCall(boardId, _callback);

    }

    /**
     * Get board property keys
     * Returns the keys of all properties for the board identified by the id. The user who retrieves the property keys is required to have permissions to view the board.
     * @param boardId the ID of the board from which property keys will be returned. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the board with given id exists. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist, or if the property with given key is not found, or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardPropertyKeys(String boardId) throws ApiException {
        getBoardPropertyKeysWithHttpInfo(boardId);
    }

    /**
     * Get board property keys
     * Returns the keys of all properties for the board identified by the id. The user who retrieves the property keys is required to have permissions to view the board.
     * @param boardId the ID of the board from which property keys will be returned. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the board with given id exists. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist, or if the property with given key is not found, or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardPropertyKeysWithHttpInfo(String boardId) throws ApiException {
        okhttp3.Call localVarCall = getBoardPropertyKeysValidateBeforeCall(boardId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get board property keys (asynchronously)
     * Returns the keys of all properties for the board identified by the id. The user who retrieves the property keys is required to have permissions to view the board.
     * @param boardId the ID of the board from which property keys will be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the board with given id exists. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist, or if the property with given key is not found, or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardPropertyKeysAsync(String boardId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardPropertyKeysValidateBeforeCall(boardId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConfiguration
     * @param boardId The ID of the board for which configuration is requested. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the configuration of the board for given boardId. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user cannot view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigurationCall(Long boardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/configuration"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigurationValidateBeforeCall(Long boardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getConfiguration(Async)");
        }

        return getConfigurationCall(boardId, _callback);

    }

    /**
     * Get configuration
     * Get the board configuration. The response contains the following fields:   *  &#x60;id&#x60; \- ID of the board.  *  &#x60;name&#x60; \- Name of the board.  *  &#x60;filter&#x60; \- Reference to the filter used by the given board.  *  &#x60;location&#x60; \- Reference to the container that the board is located in. Includes the container type (Valid values: project, user).  *  &#x60;subQuery&#x60; (Kanban only) - JQL subquery used by the given board.  *  &#x60;columnConfig&#x60; \- The column configuration lists the columns for the board, in the order defined in the column configuration. For each column, it shows the issue status mapping as well as the constraint type (Valid values: none, issueCount, issueCountExclSubs) for the min/max number of issues. Note, the last column with statuses mapped to it is treated as the \&quot;Done\&quot; column, which means that issues in that column will be marked as already completed.  *  &#x60;estimation&#x60; (Scrum only) - Contains information about type of estimation used for the board. Valid values: none, issueCount, field. If the estimation type is \&quot;field\&quot;, the ID and display name of the field used for estimation is also returned. Note, estimates for an issue can be updated by a PUT /rest/api/3/issue/\{issueIdOrKey\} request, however the fields must be on the screen. \&quot;timeoriginalestimate\&quot; field will never be on the screen, so in order to update it \&quot;originalEstimate\&quot; in \&quot;timetracking\&quot; field should be updated.  *  &#x60;ranking&#x60; \- Contains information about custom field used for ranking in the given board.
     * @param boardId The ID of the board for which configuration is requested. (required)
     * @return GetConfiguration200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the configuration of the board for given boardId. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user cannot view it. </td><td>  -  </td></tr>
     </table>
     */
    public GetConfiguration200Response getConfiguration(Long boardId) throws ApiException {
        ApiResponse<GetConfiguration200Response> localVarResp = getConfigurationWithHttpInfo(boardId);
        return localVarResp.getData();
    }

    /**
     * Get configuration
     * Get the board configuration. The response contains the following fields:   *  &#x60;id&#x60; \- ID of the board.  *  &#x60;name&#x60; \- Name of the board.  *  &#x60;filter&#x60; \- Reference to the filter used by the given board.  *  &#x60;location&#x60; \- Reference to the container that the board is located in. Includes the container type (Valid values: project, user).  *  &#x60;subQuery&#x60; (Kanban only) - JQL subquery used by the given board.  *  &#x60;columnConfig&#x60; \- The column configuration lists the columns for the board, in the order defined in the column configuration. For each column, it shows the issue status mapping as well as the constraint type (Valid values: none, issueCount, issueCountExclSubs) for the min/max number of issues. Note, the last column with statuses mapped to it is treated as the \&quot;Done\&quot; column, which means that issues in that column will be marked as already completed.  *  &#x60;estimation&#x60; (Scrum only) - Contains information about type of estimation used for the board. Valid values: none, issueCount, field. If the estimation type is \&quot;field\&quot;, the ID and display name of the field used for estimation is also returned. Note, estimates for an issue can be updated by a PUT /rest/api/3/issue/\{issueIdOrKey\} request, however the fields must be on the screen. \&quot;timeoriginalestimate\&quot; field will never be on the screen, so in order to update it \&quot;originalEstimate\&quot; in \&quot;timetracking\&quot; field should be updated.  *  &#x60;ranking&#x60; \- Contains information about custom field used for ranking in the given board.
     * @param boardId The ID of the board for which configuration is requested. (required)
     * @return ApiResponse&lt;GetConfiguration200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the configuration of the board for given boardId. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user cannot view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetConfiguration200Response> getConfigurationWithHttpInfo(Long boardId) throws ApiException {
        okhttp3.Call localVarCall = getConfigurationValidateBeforeCall(boardId, null);
        Type localVarReturnType = new TypeToken<GetConfiguration200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get configuration (asynchronously)
     * Get the board configuration. The response contains the following fields:   *  &#x60;id&#x60; \- ID of the board.  *  &#x60;name&#x60; \- Name of the board.  *  &#x60;filter&#x60; \- Reference to the filter used by the given board.  *  &#x60;location&#x60; \- Reference to the container that the board is located in. Includes the container type (Valid values: project, user).  *  &#x60;subQuery&#x60; (Kanban only) - JQL subquery used by the given board.  *  &#x60;columnConfig&#x60; \- The column configuration lists the columns for the board, in the order defined in the column configuration. For each column, it shows the issue status mapping as well as the constraint type (Valid values: none, issueCount, issueCountExclSubs) for the min/max number of issues. Note, the last column with statuses mapped to it is treated as the \&quot;Done\&quot; column, which means that issues in that column will be marked as already completed.  *  &#x60;estimation&#x60; (Scrum only) - Contains information about type of estimation used for the board. Valid values: none, issueCount, field. If the estimation type is \&quot;field\&quot;, the ID and display name of the field used for estimation is also returned. Note, estimates for an issue can be updated by a PUT /rest/api/3/issue/\{issueIdOrKey\} request, however the fields must be on the screen. \&quot;timeoriginalestimate\&quot; field will never be on the screen, so in order to update it \&quot;originalEstimate\&quot; in \&quot;timetracking\&quot; field should be updated.  *  &#x60;ranking&#x60; \- Contains information about custom field used for ranking in the given board.
     * @param boardId The ID of the board for which configuration is requested. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the configuration of the board for given boardId. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user cannot view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigurationAsync(Long boardId, final ApiCallback<GetConfiguration200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigurationValidateBeforeCall(boardId, _callback);
        Type localVarReturnType = new TypeToken<GetConfiguration200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEpics
     * @param boardId The ID of the board that contains the requested epics. (required)
     * @param startAt The starting index of the returned epics. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of epics to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param done Filters results to epics that are either done or not done. Valid values: true, false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested epics, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEpicsCall(Long boardId, Long startAt, Integer maxResults, String done, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/epic"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (done != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("done", done));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEpicsValidateBeforeCall(Long boardId, Long startAt, Integer maxResults, String done, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getEpics(Async)");
        }

        return getEpicsCall(boardId, startAt, maxResults, done, _callback);

    }

    /**
     * Get epics
     * Returns all epics from the board, for the given board ID. This only includes epics that the user has permission to view. Note, if the user does not have permission to view the board, no epics will be returned at all.
     * @param boardId The ID of the board that contains the requested epics. (required)
     * @param startAt The starting index of the returned epics. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of epics to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param done Filters results to epics that are either done or not done. Valid values: true, false. (optional)
     * @return GetEpics200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested epics, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public GetEpics200Response getEpics(Long boardId, Long startAt, Integer maxResults, String done) throws ApiException {
        ApiResponse<GetEpics200Response> localVarResp = getEpicsWithHttpInfo(boardId, startAt, maxResults, done);
        return localVarResp.getData();
    }

    /**
     * Get epics
     * Returns all epics from the board, for the given board ID. This only includes epics that the user has permission to view. Note, if the user does not have permission to view the board, no epics will be returned at all.
     * @param boardId The ID of the board that contains the requested epics. (required)
     * @param startAt The starting index of the returned epics. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of epics to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param done Filters results to epics that are either done or not done. Valid values: true, false. (optional)
     * @return ApiResponse&lt;GetEpics200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested epics, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEpics200Response> getEpicsWithHttpInfo(Long boardId, Long startAt, Integer maxResults, String done) throws ApiException {
        okhttp3.Call localVarCall = getEpicsValidateBeforeCall(boardId, startAt, maxResults, done, null);
        Type localVarReturnType = new TypeToken<GetEpics200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get epics (asynchronously)
     * Returns all epics from the board, for the given board ID. This only includes epics that the user has permission to view. Note, if the user does not have permission to view the board, no epics will be returned at all.
     * @param boardId The ID of the board that contains the requested epics. (required)
     * @param startAt The starting index of the returned epics. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of epics to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param done Filters results to epics that are either done or not done. Valid values: true, false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested epics, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEpicsAsync(Long boardId, Long startAt, Integer maxResults, String done, final ApiCallback<GetEpics200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEpicsValidateBeforeCall(boardId, startAt, maxResults, done, _callback);
        Type localVarReturnType = new TypeToken<GetEpics200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFeaturesForBoard
     * @param boardId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeaturesForBoardCall(Long boardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/features"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeaturesForBoardValidateBeforeCall(Long boardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getFeaturesForBoard(Async)");
        }

        return getFeaturesForBoardCall(boardId, _callback);

    }

    /**
     * Get features for board
     * 
     * @param boardId  (required)
     * @return GetFeaturesForBoard200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
     </table>
     */
    public GetFeaturesForBoard200Response getFeaturesForBoard(Long boardId) throws ApiException {
        ApiResponse<GetFeaturesForBoard200Response> localVarResp = getFeaturesForBoardWithHttpInfo(boardId);
        return localVarResp.getData();
    }

    /**
     * Get features for board
     * 
     * @param boardId  (required)
     * @return ApiResponse&lt;GetFeaturesForBoard200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFeaturesForBoard200Response> getFeaturesForBoardWithHttpInfo(Long boardId) throws ApiException {
        okhttp3.Call localVarCall = getFeaturesForBoardValidateBeforeCall(boardId, null);
        Type localVarReturnType = new TypeToken<GetFeaturesForBoard200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get features for board (asynchronously)
     * 
     * @param boardId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeaturesForBoardAsync(Long boardId, final ApiCallback<GetFeaturesForBoard200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeaturesForBoardValidateBeforeCall(boardId, _callback);
        Type localVarReturnType = new TypeToken<GetFeaturesForBoard200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIssuesForBacklog
     * @param boardId The ID of the board that has the backlog containing the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. Default: 50. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand This parameter is currently not used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssuesForBacklogCall(Long boardId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/backlog"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (jql != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jql", jql));
        }

        if (validateQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validateQuery", validateQuery));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssuesForBacklogValidateBeforeCall(Long boardId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getIssuesForBacklog(Async)");
        }

        return getIssuesForBacklogCall(boardId, startAt, maxResults, jql, validateQuery, fields, expand, _callback);

    }

    /**
     * Get issues for backlog
     * Returns all issues from the board&#39;s backlog, for the given board ID. This only includes issues that the user has permission to view. The backlog contains incomplete issues that are not assigned to any future or active sprint. Note, if the user does not have permission to view the board, no issues will be returned at all. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * @param boardId The ID of the board that has the backlog containing the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. Default: 50. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand This parameter is currently not used. (optional)
     * @return SearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public SearchResults getIssuesForBacklog(Long boardId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand) throws ApiException {
        ApiResponse<SearchResults> localVarResp = getIssuesForBacklogWithHttpInfo(boardId, startAt, maxResults, jql, validateQuery, fields, expand);
        return localVarResp.getData();
    }

    /**
     * Get issues for backlog
     * Returns all issues from the board&#39;s backlog, for the given board ID. This only includes issues that the user has permission to view. The backlog contains incomplete issues that are not assigned to any future or active sprint. Note, if the user does not have permission to view the board, no issues will be returned at all. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * @param boardId The ID of the board that has the backlog containing the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. Default: 50. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand This parameter is currently not used. (optional)
     * @return ApiResponse&lt;SearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResults> getIssuesForBacklogWithHttpInfo(Long boardId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand) throws ApiException {
        okhttp3.Call localVarCall = getIssuesForBacklogValidateBeforeCall(boardId, startAt, maxResults, jql, validateQuery, fields, expand, null);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get issues for backlog (asynchronously)
     * Returns all issues from the board&#39;s backlog, for the given board ID. This only includes issues that the user has permission to view. The backlog contains incomplete issues that are not assigned to any future or active sprint. Note, if the user does not have permission to view the board, no issues will be returned at all. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * @param boardId The ID of the board that has the backlog containing the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. Default: 50. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand This parameter is currently not used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssuesForBacklogAsync(Long boardId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback<SearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssuesForBacklogValidateBeforeCall(boardId, startAt, maxResults, jql, validateQuery, fields, expand, _callback);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIssuesForBoard
     * @param boardId The ID of the board that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand This parameter is currently not used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssuesForBoardCall(Long boardId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/issue"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (jql != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jql", jql));
        }

        if (validateQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validateQuery", validateQuery));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssuesForBoardValidateBeforeCall(Long boardId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getIssuesForBoard(Async)");
        }

        return getIssuesForBoardCall(boardId, startAt, maxResults, jql, validateQuery, fields, expand, _callback);

    }

    /**
     * Get issues for board
     * Returns all issues from a board, for a given board ID. This only includes issues that the user has permission to view. An issue belongs to the board if its status is mapped to the board&#39;s column. Epic issues do not belongs to the scrum boards. Note, if the user does not have permission to view the board, no issues will be returned at all. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * @param boardId The ID of the board that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand This parameter is currently not used. (optional)
     * @return SearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public SearchResults getIssuesForBoard(Long boardId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand) throws ApiException {
        ApiResponse<SearchResults> localVarResp = getIssuesForBoardWithHttpInfo(boardId, startAt, maxResults, jql, validateQuery, fields, expand);
        return localVarResp.getData();
    }

    /**
     * Get issues for board
     * Returns all issues from a board, for a given board ID. This only includes issues that the user has permission to view. An issue belongs to the board if its status is mapped to the board&#39;s column. Epic issues do not belongs to the scrum boards. Note, if the user does not have permission to view the board, no issues will be returned at all. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * @param boardId The ID of the board that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand This parameter is currently not used. (optional)
     * @return ApiResponse&lt;SearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResults> getIssuesForBoardWithHttpInfo(Long boardId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand) throws ApiException {
        okhttp3.Call localVarCall = getIssuesForBoardValidateBeforeCall(boardId, startAt, maxResults, jql, validateQuery, fields, expand, null);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get issues for board (asynchronously)
     * Returns all issues from a board, for a given board ID. This only includes issues that the user has permission to view. An issue belongs to the board if its status is mapped to the board&#39;s column. Epic issues do not belongs to the scrum boards. Note, if the user does not have permission to view the board, no issues will be returned at all. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * @param boardId The ID of the board that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand This parameter is currently not used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssuesForBoardAsync(Long boardId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback<SearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssuesForBoardValidateBeforeCall(boardId, startAt, maxResults, jql, validateQuery, fields, expand, _callback);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIssuesWithoutEpicForBoard
     * @param boardId The ID of the board that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssuesWithoutEpicForBoardCall(Long boardId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/epic/none/issue"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (jql != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jql", jql));
        }

        if (validateQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validateQuery", validateQuery));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssuesWithoutEpicForBoardValidateBeforeCall(Long boardId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getIssuesWithoutEpicForBoard(Async)");
        }

        return getIssuesWithoutEpicForBoardCall(boardId, startAt, maxResults, jql, validateQuery, fields, expand, _callback);

    }

    /**
     * Get issues without epic for board
     * Returns all issues that do not belong to any epic on a board, for a given board ID. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * @param boardId The ID of the board that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @return SearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public SearchResults getIssuesWithoutEpicForBoard(Long boardId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand) throws ApiException {
        ApiResponse<SearchResults> localVarResp = getIssuesWithoutEpicForBoardWithHttpInfo(boardId, startAt, maxResults, jql, validateQuery, fields, expand);
        return localVarResp.getData();
    }

    /**
     * Get issues without epic for board
     * Returns all issues that do not belong to any epic on a board, for a given board ID. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * @param boardId The ID of the board that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @return ApiResponse&lt;SearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResults> getIssuesWithoutEpicForBoardWithHttpInfo(Long boardId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand) throws ApiException {
        okhttp3.Call localVarCall = getIssuesWithoutEpicForBoardValidateBeforeCall(boardId, startAt, maxResults, jql, validateQuery, fields, expand, null);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get issues without epic for board (asynchronously)
     * Returns all issues that do not belong to any epic on a board, for a given board ID. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * @param boardId The ID of the board that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssuesWithoutEpicForBoardAsync(Long boardId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback<SearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssuesWithoutEpicForBoardValidateBeforeCall(boardId, startAt, maxResults, jql, validateQuery, fields, expand, _callback);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjects
     * @param boardId The ID of the board that contains returned projects. (required)
     * @param startAt The starting index of the returned projects. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of projects to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the board&#39;s projects, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to access it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectsCall(Long boardId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/project"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectsValidateBeforeCall(Long boardId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getProjects(Async)");
        }

        return getProjectsCall(boardId, startAt, maxResults, _callback);

    }

    /**
     * Get projects
     * Returns all projects that are associated with the board, for the given board ID. If the user does not have permission to view the board, no projects will be returned at all. Returned projects are ordered by the name.  A project is associated with a board if the board filter contains reference the project or there is an issue from the project that belongs to the board.  The board filter contains reference the project only if JQL query guarantees that returned issues will be returned from the project set defined in JQL. For instance the query &#x60;project in (ABC, BCD) AND reporter &#x3D; admin&#x60; have reference to ABC and BCD projects but query &#x60;project in (ABC, BCD) OR reporter &#x3D; admin&#x60; doesn&#39;t have reference to any project.  An issue belongs to the board if its status is mapped to the board&#39;s column. Epic issues do not belongs to the scrum boards.
     * @param boardId The ID of the board that contains returned projects. (required)
     * @param startAt The starting index of the returned projects. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of projects to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @return GetProjects200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the board&#39;s projects, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to access it. </td><td>  -  </td></tr>
     </table>
     */
    public GetProjects200Response getProjects(Long boardId, Long startAt, Integer maxResults) throws ApiException {
        ApiResponse<GetProjects200Response> localVarResp = getProjectsWithHttpInfo(boardId, startAt, maxResults);
        return localVarResp.getData();
    }

    /**
     * Get projects
     * Returns all projects that are associated with the board, for the given board ID. If the user does not have permission to view the board, no projects will be returned at all. Returned projects are ordered by the name.  A project is associated with a board if the board filter contains reference the project or there is an issue from the project that belongs to the board.  The board filter contains reference the project only if JQL query guarantees that returned issues will be returned from the project set defined in JQL. For instance the query &#x60;project in (ABC, BCD) AND reporter &#x3D; admin&#x60; have reference to ABC and BCD projects but query &#x60;project in (ABC, BCD) OR reporter &#x3D; admin&#x60; doesn&#39;t have reference to any project.  An issue belongs to the board if its status is mapped to the board&#39;s column. Epic issues do not belongs to the scrum boards.
     * @param boardId The ID of the board that contains returned projects. (required)
     * @param startAt The starting index of the returned projects. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of projects to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @return ApiResponse&lt;GetProjects200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the board&#39;s projects, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to access it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetProjects200Response> getProjectsWithHttpInfo(Long boardId, Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getProjectsValidateBeforeCall(boardId, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<GetProjects200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get projects (asynchronously)
     * Returns all projects that are associated with the board, for the given board ID. If the user does not have permission to view the board, no projects will be returned at all. Returned projects are ordered by the name.  A project is associated with a board if the board filter contains reference the project or there is an issue from the project that belongs to the board.  The board filter contains reference the project only if JQL query guarantees that returned issues will be returned from the project set defined in JQL. For instance the query &#x60;project in (ABC, BCD) AND reporter &#x3D; admin&#x60; have reference to ABC and BCD projects but query &#x60;project in (ABC, BCD) OR reporter &#x3D; admin&#x60; doesn&#39;t have reference to any project.  An issue belongs to the board if its status is mapped to the board&#39;s column. Epic issues do not belongs to the scrum boards.
     * @param boardId The ID of the board that contains returned projects. (required)
     * @param startAt The starting index of the returned projects. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of projects to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the board&#39;s projects, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to access it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectsAsync(Long boardId, Long startAt, Integer maxResults, final ApiCallback<GetProjects200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectsValidateBeforeCall(boardId, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<GetProjects200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectsFull
     * @param boardId The ID of the board that contains returned projects. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the board&#39;s projects, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to access it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectsFullCall(Long boardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/project/full"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectsFullValidateBeforeCall(Long boardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getProjectsFull(Async)");
        }

        return getProjectsFullCall(boardId, _callback);

    }

    /**
     * Get projects full
     * Returns all projects that are statically associated with the board, for the given board ID. Returned projects are ordered by the name.  A project is associated with a board if the board filter contains reference the project.  The board filter contains reference the project only if JQL query guarantees that returned issues will be returned from the project set defined in JQL. For instance the query &#x60;project in (ABC, BCD) AND reporter &#x3D; admin&#x60; have reference to ABC and BCD projects but query &#x60;project in (ABC, BCD) OR reporter &#x3D; admin&#x60; doesn&#39;t have reference to any project.
     * @param boardId The ID of the board that contains returned projects. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the board&#39;s projects, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to access it. </td><td>  -  </td></tr>
     </table>
     */
    public void getProjectsFull(Long boardId) throws ApiException {
        getProjectsFullWithHttpInfo(boardId);
    }

    /**
     * Get projects full
     * Returns all projects that are statically associated with the board, for the given board ID. Returned projects are ordered by the name.  A project is associated with a board if the board filter contains reference the project.  The board filter contains reference the project only if JQL query guarantees that returned issues will be returned from the project set defined in JQL. For instance the query &#x60;project in (ABC, BCD) AND reporter &#x3D; admin&#x60; have reference to ABC and BCD projects but query &#x60;project in (ABC, BCD) OR reporter &#x3D; admin&#x60; doesn&#39;t have reference to any project.
     * @param boardId The ID of the board that contains returned projects. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the board&#39;s projects, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to access it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getProjectsFullWithHttpInfo(Long boardId) throws ApiException {
        okhttp3.Call localVarCall = getProjectsFullValidateBeforeCall(boardId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get projects full (asynchronously)
     * Returns all projects that are statically associated with the board, for the given board ID. Returned projects are ordered by the name.  A project is associated with a board if the board filter contains reference the project.  The board filter contains reference the project only if JQL query guarantees that returned issues will be returned from the project set defined in JQL. For instance the query &#x60;project in (ABC, BCD) AND reporter &#x3D; admin&#x60; have reference to ABC and BCD projects but query &#x60;project in (ABC, BCD) OR reporter &#x3D; admin&#x60; doesn&#39;t have reference to any project.
     * @param boardId The ID of the board that contains returned projects. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the board&#39;s projects, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if board does not exist or the user does not have permission to access it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectsFullAsync(Long boardId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectsFullValidateBeforeCall(boardId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuickFilter
     * @param boardId  (required)
     * @param quickFilterId The ID of the requested quick filter. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested quick filter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist or if the quick filter with given id is not found or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuickFilterCall(Long boardId, Long quickFilterId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/quickfilter/{quickFilterId}"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()))
            .replace("{" + "quickFilterId" + "}", localVarApiClient.escapeString(quickFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuickFilterValidateBeforeCall(Long boardId, Long quickFilterId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getQuickFilter(Async)");
        }

        // verify the required parameter 'quickFilterId' is set
        if (quickFilterId == null) {
            throw new ApiException("Missing the required parameter 'quickFilterId' when calling getQuickFilter(Async)");
        }

        return getQuickFilterCall(boardId, quickFilterId, _callback);

    }

    /**
     * Get quick filter
     * Returns the quick filter for a given quick filter ID. The quick filter will only be returned if the user can view the board that the quick filter belongs to.
     * @param boardId  (required)
     * @param quickFilterId The ID of the requested quick filter. (required)
     * @return GetAllQuickFilters200ResponseValuesInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested quick filter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist or if the quick filter with given id is not found or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllQuickFilters200ResponseValuesInner getQuickFilter(Long boardId, Long quickFilterId) throws ApiException {
        ApiResponse<GetAllQuickFilters200ResponseValuesInner> localVarResp = getQuickFilterWithHttpInfo(boardId, quickFilterId);
        return localVarResp.getData();
    }

    /**
     * Get quick filter
     * Returns the quick filter for a given quick filter ID. The quick filter will only be returned if the user can view the board that the quick filter belongs to.
     * @param boardId  (required)
     * @param quickFilterId The ID of the requested quick filter. (required)
     * @return ApiResponse&lt;GetAllQuickFilters200ResponseValuesInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested quick filter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist or if the quick filter with given id is not found or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllQuickFilters200ResponseValuesInner> getQuickFilterWithHttpInfo(Long boardId, Long quickFilterId) throws ApiException {
        okhttp3.Call localVarCall = getQuickFilterValidateBeforeCall(boardId, quickFilterId, null);
        Type localVarReturnType = new TypeToken<GetAllQuickFilters200ResponseValuesInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get quick filter (asynchronously)
     * Returns the quick filter for a given quick filter ID. The quick filter will only be returned if the user can view the board that the quick filter belongs to.
     * @param boardId  (required)
     * @param quickFilterId The ID of the requested quick filter. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested quick filter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist or if the quick filter with given id is not found or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuickFilterAsync(Long boardId, Long quickFilterId, final ApiCallback<GetAllQuickFilters200ResponseValuesInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuickFilterValidateBeforeCall(boardId, quickFilterId, _callback);
        Type localVarReturnType = new TypeToken<GetAllQuickFilters200ResponseValuesInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportsForBoard
     * @param boardId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportsForBoardCall(Long boardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/reports"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportsForBoardValidateBeforeCall(Long boardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getReportsForBoard(Async)");
        }

        return getReportsForBoardCall(boardId, _callback);

    }

    /**
     * Get reports for board
     * 
     * @param boardId  (required)
     * @return GetReportsForBoard200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
     </table>
     */
    public GetReportsForBoard200Response getReportsForBoard(Long boardId) throws ApiException {
        ApiResponse<GetReportsForBoard200Response> localVarResp = getReportsForBoardWithHttpInfo(boardId);
        return localVarResp.getData();
    }

    /**
     * Get reports for board
     * 
     * @param boardId  (required)
     * @return ApiResponse&lt;GetReportsForBoard200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetReportsForBoard200Response> getReportsForBoardWithHttpInfo(Long boardId) throws ApiException {
        okhttp3.Call localVarCall = getReportsForBoardValidateBeforeCall(boardId, null);
        Type localVarReturnType = new TypeToken<GetReportsForBoard200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get reports for board (asynchronously)
     * 
     * @param boardId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportsForBoardAsync(Long boardId, final ApiCallback<GetReportsForBoard200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportsForBoardValidateBeforeCall(boardId, _callback);
        Type localVarReturnType = new TypeToken<GetReportsForBoard200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveIssuesToBoard
     * @param boardId  (required)
     * @param moveIssuesToBacklogForBoardRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Returns the list of issue with status of rank operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to assign issues. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveIssuesToBoardCall(Long boardId, MoveIssuesToBacklogForBoardRequest moveIssuesToBacklogForBoardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveIssuesToBacklogForBoardRequest;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/issue"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveIssuesToBoardValidateBeforeCall(Long boardId, MoveIssuesToBacklogForBoardRequest moveIssuesToBacklogForBoardRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling moveIssuesToBoard(Async)");
        }

        // verify the required parameter 'moveIssuesToBacklogForBoardRequest' is set
        if (moveIssuesToBacklogForBoardRequest == null) {
            throw new ApiException("Missing the required parameter 'moveIssuesToBacklogForBoardRequest' when calling moveIssuesToBoard(Async)");
        }

        return moveIssuesToBoardCall(boardId, moveIssuesToBacklogForBoardRequest, _callback);

    }

    /**
     * Move issues to board
     * Move issues from the backog to the board (if they are already in the backlog of that board).   This operation either moves an issue(s) onto a board from the backlog (by adding it to the issueList for the board) Or transitions the issue(s) to the first column for a kanban board with backlog. At most 50 issues may be moved at once.
     * @param boardId  (required)
     * @param moveIssuesToBacklogForBoardRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Returns the list of issue with status of rank operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to assign issues. </td><td>  -  </td></tr>
     </table>
     */
    public void moveIssuesToBoard(Long boardId, MoveIssuesToBacklogForBoardRequest moveIssuesToBacklogForBoardRequest) throws ApiException {
        moveIssuesToBoardWithHttpInfo(boardId, moveIssuesToBacklogForBoardRequest);
    }

    /**
     * Move issues to board
     * Move issues from the backog to the board (if they are already in the backlog of that board).   This operation either moves an issue(s) onto a board from the backlog (by adding it to the issueList for the board) Or transitions the issue(s) to the first column for a kanban board with backlog. At most 50 issues may be moved at once.
     * @param boardId  (required)
     * @param moveIssuesToBacklogForBoardRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Returns the list of issue with status of rank operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to assign issues. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> moveIssuesToBoardWithHttpInfo(Long boardId, MoveIssuesToBacklogForBoardRequest moveIssuesToBacklogForBoardRequest) throws ApiException {
        okhttp3.Call localVarCall = moveIssuesToBoardValidateBeforeCall(boardId, moveIssuesToBacklogForBoardRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Move issues to board (asynchronously)
     * Move issues from the backog to the board (if they are already in the backlog of that board).   This operation either moves an issue(s) onto a board from the backlog (by adding it to the issueList for the board) Or transitions the issue(s) to the first column for a kanban board with backlog. At most 50 issues may be moved at once.
     * @param boardId  (required)
     * @param moveIssuesToBacklogForBoardRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Returns the list of issue with status of rank operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if user does not a have valid license or does not have permission to assign issues. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveIssuesToBoardAsync(Long boardId, MoveIssuesToBacklogForBoardRequest moveIssuesToBacklogForBoardRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveIssuesToBoardValidateBeforeCall(boardId, moveIssuesToBacklogForBoardRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setBoardProperty
     * @param boardId the ID of the board on which the property will be set. (required)
     * @param propertyKey the key of the board&#39;s property. The maximum length of the key is 255 bytes. (required)
     * @param body The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the board property is successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Returned if the board property is successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setBoardPropertyCall(String boardId, String propertyKey, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/properties/{propertyKey}"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()))
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setBoardPropertyValidateBeforeCall(String boardId, String propertyKey, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling setBoardProperty(Async)");
        }

        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling setBoardProperty(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setBoardProperty(Async)");
        }

        return setBoardPropertyCall(boardId, propertyKey, body, _callback);

    }

    /**
     * Set board property
     * Sets the value of the specified board&#39;s property.  You can use this resource to store a custom data against the board identified by the id. The user who stores the data is required to have permissions to modify the board.
     * @param boardId the ID of the board on which the property will be set. (required)
     * @param propertyKey the key of the board&#39;s property. The maximum length of the key is 255 bytes. (required)
     * @param body The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the board property is successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Returned if the board property is successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public Object setBoardProperty(String boardId, String propertyKey, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = setBoardPropertyWithHttpInfo(boardId, propertyKey, body);
        return localVarResp.getData();
    }

    /**
     * Set board property
     * Sets the value of the specified board&#39;s property.  You can use this resource to store a custom data against the board identified by the id. The user who stores the data is required to have permissions to modify the board.
     * @param boardId the ID of the board on which the property will be set. (required)
     * @param propertyKey the key of the board&#39;s property. The maximum length of the key is 255 bytes. (required)
     * @param body The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the board property is successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Returned if the board property is successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> setBoardPropertyWithHttpInfo(String boardId, String propertyKey, Object body) throws ApiException {
        okhttp3.Call localVarCall = setBoardPropertyValidateBeforeCall(boardId, propertyKey, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set board property (asynchronously)
     * Sets the value of the specified board&#39;s property.  You can use this resource to store a custom data against the board identified by the id. The user who stores the data is required to have permissions to modify the board.
     * @param boardId the ID of the board on which the property will be set. (required)
     * @param propertyKey the key of the board&#39;s property. The maximum length of the key is 255 bytes. (required)
     * @param body The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the board property is successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Returned if the board property is successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the boardId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board with given id does not exist or the user doesn&#39;t have permissions to see it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setBoardPropertyAsync(String boardId, String propertyKey, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setBoardPropertyValidateBeforeCall(boardId, propertyKey, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toggleFeatures
     * @param boardId  (required)
     * @param toggleFeaturesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toggleFeaturesCall(Long boardId, ToggleFeaturesRequest toggleFeaturesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toggleFeaturesRequest;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/board/{boardId}/features"
            .replace("{" + "boardId" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toggleFeaturesValidateBeforeCall(Long boardId, ToggleFeaturesRequest toggleFeaturesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling toggleFeatures(Async)");
        }

        // verify the required parameter 'toggleFeaturesRequest' is set
        if (toggleFeaturesRequest == null) {
            throw new ApiException("Missing the required parameter 'toggleFeaturesRequest' when calling toggleFeatures(Async)");
        }

        return toggleFeaturesCall(boardId, toggleFeaturesRequest, _callback);

    }

    /**
     * Toggle features
     * 
     * @param boardId  (required)
     * @param toggleFeaturesRequest  (required)
     * @return GetFeaturesForBoard200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
     </table>
     */
    public GetFeaturesForBoard200Response toggleFeatures(Long boardId, ToggleFeaturesRequest toggleFeaturesRequest) throws ApiException {
        ApiResponse<GetFeaturesForBoard200Response> localVarResp = toggleFeaturesWithHttpInfo(boardId, toggleFeaturesRequest);
        return localVarResp.getData();
    }

    /**
     * Toggle features
     * 
     * @param boardId  (required)
     * @param toggleFeaturesRequest  (required)
     * @return ApiResponse&lt;GetFeaturesForBoard200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFeaturesForBoard200Response> toggleFeaturesWithHttpInfo(Long boardId, ToggleFeaturesRequest toggleFeaturesRequest) throws ApiException {
        okhttp3.Call localVarCall = toggleFeaturesValidateBeforeCall(boardId, toggleFeaturesRequest, null);
        Type localVarReturnType = new TypeToken<GetFeaturesForBoard200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Toggle features (asynchronously)
     * 
     * @param boardId  (required)
     * @param toggleFeaturesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toggleFeaturesAsync(Long boardId, ToggleFeaturesRequest toggleFeaturesRequest, final ApiCallback<GetFeaturesForBoard200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toggleFeaturesValidateBeforeCall(boardId, toggleFeaturesRequest, _callback);
        Type localVarReturnType = new TypeToken<GetFeaturesForBoard200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
