/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.api;

import com.atlassian.jira.invoker.ApiCallback;
import com.atlassian.jira.invoker.ApiClient;
import com.atlassian.jira.invoker.ApiException;
import com.atlassian.jira.invoker.ApiResponse;
import com.atlassian.jira.invoker.Configuration;
import com.atlassian.jira.invoker.Pair;
import com.atlassian.jira.invoker.ProgressRequestBody;
import com.atlassian.jira.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.atlassian.jira.software.model.CreateSprint201Response;
import com.atlassian.jira.software.model.CreateSprintRequest;
import com.atlassian.jira.software.model.GetPropertiesKeys200Response;
import com.atlassian.jira.software.model.GetProperty200Response;
import com.atlassian.jira.software.model.GetSprint200Response;
import com.atlassian.jira.software.model.MoveIssuesToBacklogForBoardRequest;
import com.atlassian.jira.software.model.PartiallyUpdateSprint200Response;
import com.atlassian.jira.software.model.SearchResults;
import com.atlassian.jira.software.model.SwapSprintRequest;
import com.atlassian.jira.software.model.UpdateSprint200Response;
import com.atlassian.jira.software.model.UpdateSprintRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SprintApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SprintApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SprintApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createSprint
     * @param createSprintRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created sprint </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSprintCall(CreateSprintRequest createSprintRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSprintRequest;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/sprint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSprintValidateBeforeCall(CreateSprintRequest createSprintRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createSprintRequest' is set
        if (createSprintRequest == null) {
            throw new ApiException("Missing the required parameter 'createSprintRequest' when calling createSprint(Async)");
        }

        return createSprintCall(createSprintRequest, _callback);

    }

    /**
     * Create sprint
     * Creates a future sprint. Sprint name and origin board id are required. Start date, end date, and goal are optional.  Note that the sprint name is trimmed. Also, when starting sprints from the UI, the \&quot;endDate\&quot; set through this call is ignored and instead the last sprint&#39;s duration is used to fill the form.
     * @param createSprintRequest  (required)
     * @return CreateSprint201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created sprint </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSprint201Response createSprint(CreateSprintRequest createSprintRequest) throws ApiException {
        ApiResponse<CreateSprint201Response> localVarResp = createSprintWithHttpInfo(createSprintRequest);
        return localVarResp.getData();
    }

    /**
     * Create sprint
     * Creates a future sprint. Sprint name and origin board id are required. Start date, end date, and goal are optional.  Note that the sprint name is trimmed. Also, when starting sprints from the UI, the \&quot;endDate\&quot; set through this call is ignored and instead the last sprint&#39;s duration is used to fill the form.
     * @param createSprintRequest  (required)
     * @return ApiResponse&lt;CreateSprint201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created sprint </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSprint201Response> createSprintWithHttpInfo(CreateSprintRequest createSprintRequest) throws ApiException {
        okhttp3.Call localVarCall = createSprintValidateBeforeCall(createSprintRequest, null);
        Type localVarReturnType = new TypeToken<CreateSprint201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create sprint (asynchronously)
     * Creates a future sprint. Sprint name and origin board id are required. Start date, end date, and goal are optional.  Note that the sprint name is trimmed. Also, when starting sprints from the UI, the \&quot;endDate\&quot; set through this call is ignored and instead the last sprint&#39;s duration is used to fill the form.
     * @param createSprintRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created sprint </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the board does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSprintAsync(CreateSprintRequest createSprintRequest, final ApiCallback<CreateSprint201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSprintValidateBeforeCall(createSprintRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateSprint201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProperty
     * @param sprintId the ID of the sprint from which the property will be removed. (required)
     * @param propertyKey the key of the property to remove. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the sprint property was removed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the sprintId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the calling user does not have permission to modify the sprint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint with given id does not exist or if the property with given key is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePropertyCall(String sprintId, String propertyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/sprint/{sprintId}/properties/{propertyKey}"
            .replace("{" + "sprintId" + "}", localVarApiClient.escapeString(sprintId.toString()))
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePropertyValidateBeforeCall(String sprintId, String propertyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sprintId' is set
        if (sprintId == null) {
            throw new ApiException("Missing the required parameter 'sprintId' when calling deleteProperty(Async)");
        }

        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling deleteProperty(Async)");
        }

        return deletePropertyCall(sprintId, propertyKey, _callback);

    }

    /**
     * Delete property
     * Removes the property from the sprint identified by the id. Ths user removing the property is required to have permissions to modify the sprint.
     * @param sprintId the ID of the sprint from which the property will be removed. (required)
     * @param propertyKey the key of the property to remove. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the sprint property was removed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the sprintId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the calling user does not have permission to modify the sprint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint with given id does not exist or if the property with given key is not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProperty(String sprintId, String propertyKey) throws ApiException {
        deletePropertyWithHttpInfo(sprintId, propertyKey);
    }

    /**
     * Delete property
     * Removes the property from the sprint identified by the id. Ths user removing the property is required to have permissions to modify the sprint.
     * @param sprintId the ID of the sprint from which the property will be removed. (required)
     * @param propertyKey the key of the property to remove. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the sprint property was removed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the sprintId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the calling user does not have permission to modify the sprint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint with given id does not exist or if the property with given key is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePropertyWithHttpInfo(String sprintId, String propertyKey) throws ApiException {
        okhttp3.Call localVarCall = deletePropertyValidateBeforeCall(sprintId, propertyKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete property (asynchronously)
     * Removes the property from the sprint identified by the id. Ths user removing the property is required to have permissions to modify the sprint.
     * @param sprintId the ID of the sprint from which the property will be removed. (required)
     * @param propertyKey the key of the property to remove. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the sprint property was removed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the sprintId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the calling user does not have permission to modify the sprint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint with given id does not exist or if the property with given key is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePropertyAsync(String sprintId, String propertyKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePropertyValidateBeforeCall(sprintId, propertyKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSprint
     * @param sprintId The ID of the sprint to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the sprint was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have permission to delete sprints. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSprintCall(Long sprintId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/sprint/{sprintId}"
            .replace("{" + "sprintId" + "}", localVarApiClient.escapeString(sprintId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSprintValidateBeforeCall(Long sprintId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sprintId' is set
        if (sprintId == null) {
            throw new ApiException("Missing the required parameter 'sprintId' when calling deleteSprint(Async)");
        }

        return deleteSprintCall(sprintId, _callback);

    }

    /**
     * Delete sprint
     * Deletes a sprint. Once a sprint is deleted, all open issues in the sprint will be moved to the backlog.
     * @param sprintId The ID of the sprint to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the sprint was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have permission to delete sprints. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSprint(Long sprintId) throws ApiException {
        deleteSprintWithHttpInfo(sprintId);
    }

    /**
     * Delete sprint
     * Deletes a sprint. Once a sprint is deleted, all open issues in the sprint will be moved to the backlog.
     * @param sprintId The ID of the sprint to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the sprint was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have permission to delete sprints. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSprintWithHttpInfo(Long sprintId) throws ApiException {
        okhttp3.Call localVarCall = deleteSprintValidateBeforeCall(sprintId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete sprint (asynchronously)
     * Deletes a sprint. Once a sprint is deleted, all open issues in the sprint will be moved to the backlog.
     * @param sprintId The ID of the sprint to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the sprint was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have permission to delete sprints. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSprintAsync(Long sprintId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSprintValidateBeforeCall(sprintId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIssuesForSprint
     * @param sprintId The ID of the sprint that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if sprint does not exist or the user cannot view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssuesForSprintCall(Long sprintId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/sprint/{sprintId}/issue"
            .replace("{" + "sprintId" + "}", localVarApiClient.escapeString(sprintId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (jql != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jql", jql));
        }

        if (validateQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validateQuery", validateQuery));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssuesForSprintValidateBeforeCall(Long sprintId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sprintId' is set
        if (sprintId == null) {
            throw new ApiException("Missing the required parameter 'sprintId' when calling getIssuesForSprint(Async)");
        }

        return getIssuesForSprintCall(sprintId, startAt, maxResults, jql, validateQuery, fields, expand, _callback);

    }

    /**
     * Get issues for sprint
     * Returns all issues in a sprint, for a given sprint ID. This only includes issues that the user has permission to view. By default, the returned issues are ordered by rank.
     * @param sprintId The ID of the sprint that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @return SearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if sprint does not exist or the user cannot view it. </td><td>  -  </td></tr>
     </table>
     */
    public SearchResults getIssuesForSprint(Long sprintId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand) throws ApiException {
        ApiResponse<SearchResults> localVarResp = getIssuesForSprintWithHttpInfo(sprintId, startAt, maxResults, jql, validateQuery, fields, expand);
        return localVarResp.getData();
    }

    /**
     * Get issues for sprint
     * Returns all issues in a sprint, for a given sprint ID. This only includes issues that the user has permission to view. By default, the returned issues are ordered by rank.
     * @param sprintId The ID of the sprint that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @return ApiResponse&lt;SearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if sprint does not exist or the user cannot view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResults> getIssuesForSprintWithHttpInfo(Long sprintId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand) throws ApiException {
        okhttp3.Call localVarCall = getIssuesForSprintValidateBeforeCall(sprintId, startAt, maxResults, jql, validateQuery, fields, expand, null);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get issues for sprint (asynchronously)
     * Returns all issues in a sprint, for a given sprint ID. This only includes issues that the user has permission to view. By default, the returned issues are ordered by rank.
     * @param sprintId The ID of the sprint that contains the requested issues. (required)
     * @param startAt The starting index of the returned issues. Base index: 0. See the &#39;Pagination&#39; section at the top of this page for more details. (optional)
     * @param maxResults The maximum number of issues to return per page. See the &#39;Pagination&#39; section at the top of this page for more details. Note, the total number of issues returned is limited by the property &#39;jira.search.views.default.max&#39; in your Jira instance. If you exceed this limit, your results will be truncated. (optional)
     * @param jql Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that &#x60;username&#x60; and &#x60;userkey&#x60; can&#39;t be used as search terms for this parameter due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param validateQuery Specifies whether to validate the JQL query or not. Default: true. (optional)
     * @param fields The list of fields to return for each issue. By default, all navigable and Agile fields are returned. (optional)
     * @param expand A comma-separated list of the parameters to expand. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested issues, at the specified page of the results. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if sprint does not exist or the user cannot view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssuesForSprintAsync(Long sprintId, Long startAt, Integer maxResults, String jql, Boolean validateQuery, List<Object> fields, String expand, final ApiCallback<SearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssuesForSprintValidateBeforeCall(sprintId, startAt, maxResults, jql, validateQuery, fields, expand, _callback);
        Type localVarReturnType = new TypeToken<SearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPropertiesKeys
     * @param sprintId the ID of the sprint from which property keys will be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the sprint with given id exists. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the sprintId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the calling user does not have permission to view the sprint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint with given id does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertiesKeysCall(String sprintId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/sprint/{sprintId}/properties"
            .replace("{" + "sprintId" + "}", localVarApiClient.escapeString(sprintId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertiesKeysValidateBeforeCall(String sprintId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sprintId' is set
        if (sprintId == null) {
            throw new ApiException("Missing the required parameter 'sprintId' when calling getPropertiesKeys(Async)");
        }

        return getPropertiesKeysCall(sprintId, _callback);

    }

    /**
     * Get properties keys
     * Returns the keys of all properties for the sprint identified by the id. The user who retrieves the property keys is required to have permissions to view the sprint.
     * @param sprintId the ID of the sprint from which property keys will be returned. (required)
     * @return GetPropertiesKeys200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the sprint with given id exists. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the sprintId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the calling user does not have permission to view the sprint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint with given id does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public GetPropertiesKeys200Response getPropertiesKeys(String sprintId) throws ApiException {
        ApiResponse<GetPropertiesKeys200Response> localVarResp = getPropertiesKeysWithHttpInfo(sprintId);
        return localVarResp.getData();
    }

    /**
     * Get properties keys
     * Returns the keys of all properties for the sprint identified by the id. The user who retrieves the property keys is required to have permissions to view the sprint.
     * @param sprintId the ID of the sprint from which property keys will be returned. (required)
     * @return ApiResponse&lt;GetPropertiesKeys200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the sprint with given id exists. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the sprintId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the calling user does not have permission to view the sprint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint with given id does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPropertiesKeys200Response> getPropertiesKeysWithHttpInfo(String sprintId) throws ApiException {
        okhttp3.Call localVarCall = getPropertiesKeysValidateBeforeCall(sprintId, null);
        Type localVarReturnType = new TypeToken<GetPropertiesKeys200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get properties keys (asynchronously)
     * Returns the keys of all properties for the sprint identified by the id. The user who retrieves the property keys is required to have permissions to view the sprint.
     * @param sprintId the ID of the sprint from which property keys will be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the sprint with given id exists. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the sprintId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the calling user does not have permission to view the sprint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint with given id does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertiesKeysAsync(String sprintId, final ApiCallback<GetPropertiesKeys200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertiesKeysValidateBeforeCall(sprintId, _callback);
        Type localVarReturnType = new TypeToken<GetPropertiesKeys200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProperty
     * @param sprintId the ID of the sprint from which the property will be returned. (required)
     * @param propertyKey the key of the property to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the sprint exists and the property was found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the sprintId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the calling user does not have permission to view the sprint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint with a given id does not exist or if the property with given key is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyCall(String sprintId, String propertyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/sprint/{sprintId}/properties/{propertyKey}"
            .replace("{" + "sprintId" + "}", localVarApiClient.escapeString(sprintId.toString()))
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyValidateBeforeCall(String sprintId, String propertyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sprintId' is set
        if (sprintId == null) {
            throw new ApiException("Missing the required parameter 'sprintId' when calling getProperty(Async)");
        }

        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling getProperty(Async)");
        }

        return getPropertyCall(sprintId, propertyKey, _callback);

    }

    /**
     * Get property
     * Returns the value of the property with a given key from the sprint identified by the provided id. The user who retrieves the property is required to have permissions to view the sprint.
     * @param sprintId the ID of the sprint from which the property will be returned. (required)
     * @param propertyKey the key of the property to return. (required)
     * @return GetProperty200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the sprint exists and the property was found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the sprintId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the calling user does not have permission to view the sprint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint with a given id does not exist or if the property with given key is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetProperty200Response getProperty(String sprintId, String propertyKey) throws ApiException {
        ApiResponse<GetProperty200Response> localVarResp = getPropertyWithHttpInfo(sprintId, propertyKey);
        return localVarResp.getData();
    }

    /**
     * Get property
     * Returns the value of the property with a given key from the sprint identified by the provided id. The user who retrieves the property is required to have permissions to view the sprint.
     * @param sprintId the ID of the sprint from which the property will be returned. (required)
     * @param propertyKey the key of the property to return. (required)
     * @return ApiResponse&lt;GetProperty200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the sprint exists and the property was found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the sprintId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the calling user does not have permission to view the sprint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint with a given id does not exist or if the property with given key is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetProperty200Response> getPropertyWithHttpInfo(String sprintId, String propertyKey) throws ApiException {
        okhttp3.Call localVarCall = getPropertyValidateBeforeCall(sprintId, propertyKey, null);
        Type localVarReturnType = new TypeToken<GetProperty200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get property (asynchronously)
     * Returns the value of the property with a given key from the sprint identified by the provided id. The user who retrieves the property is required to have permissions to view the sprint.
     * @param sprintId the ID of the sprint from which the property will be returned. (required)
     * @param propertyKey the key of the property to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the sprint exists and the property was found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the sprintId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the calling user does not have permission to view the sprint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint with a given id does not exist or if the property with given key is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyAsync(String sprintId, String propertyKey, final ApiCallback<GetProperty200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyValidateBeforeCall(sprintId, propertyKey, _callback);
        Type localVarReturnType = new TypeToken<GetProperty200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSprint
     * @param sprintId The ID of the requested sprint. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested sprint. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSprintCall(Long sprintId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/sprint/{sprintId}"
            .replace("{" + "sprintId" + "}", localVarApiClient.escapeString(sprintId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSprintValidateBeforeCall(Long sprintId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sprintId' is set
        if (sprintId == null) {
            throw new ApiException("Missing the required parameter 'sprintId' when calling getSprint(Async)");
        }

        return getSprintCall(sprintId, _callback);

    }

    /**
     * Get sprint
     * Returns the sprint for a given sprint ID. The sprint will only be returned if the user can view the board that the sprint was created on, or view at least one of the issues in the sprint.
     * @param sprintId The ID of the requested sprint. (required)
     * @return GetSprint200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested sprint. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public GetSprint200Response getSprint(Long sprintId) throws ApiException {
        ApiResponse<GetSprint200Response> localVarResp = getSprintWithHttpInfo(sprintId);
        return localVarResp.getData();
    }

    /**
     * Get sprint
     * Returns the sprint for a given sprint ID. The sprint will only be returned if the user can view the board that the sprint was created on, or view at least one of the issues in the sprint.
     * @param sprintId The ID of the requested sprint. (required)
     * @return ApiResponse&lt;GetSprint200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested sprint. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSprint200Response> getSprintWithHttpInfo(Long sprintId) throws ApiException {
        okhttp3.Call localVarCall = getSprintValidateBeforeCall(sprintId, null);
        Type localVarReturnType = new TypeToken<GetSprint200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get sprint (asynchronously)
     * Returns the sprint for a given sprint ID. The sprint will only be returned if the user can view the board that the sprint was created on, or view at least one of the issues in the sprint.
     * @param sprintId The ID of the requested sprint. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested sprint. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSprintAsync(Long sprintId, final ApiCallback<GetSprint200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSprintValidateBeforeCall(sprintId, _callback);
        Type localVarReturnType = new TypeToken<GetSprint200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveIssuesToSprintAndRank
     * @param sprintId The ID of the sprint that you want to assign issues to. (required)
     * @param moveIssuesToBacklogForBoardRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have permission to assign issues. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveIssuesToSprintAndRankCall(Long sprintId, MoveIssuesToBacklogForBoardRequest moveIssuesToBacklogForBoardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveIssuesToBacklogForBoardRequest;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/sprint/{sprintId}/issue"
            .replace("{" + "sprintId" + "}", localVarApiClient.escapeString(sprintId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveIssuesToSprintAndRankValidateBeforeCall(Long sprintId, MoveIssuesToBacklogForBoardRequest moveIssuesToBacklogForBoardRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sprintId' is set
        if (sprintId == null) {
            throw new ApiException("Missing the required parameter 'sprintId' when calling moveIssuesToSprintAndRank(Async)");
        }

        // verify the required parameter 'moveIssuesToBacklogForBoardRequest' is set
        if (moveIssuesToBacklogForBoardRequest == null) {
            throw new ApiException("Missing the required parameter 'moveIssuesToBacklogForBoardRequest' when calling moveIssuesToSprintAndRank(Async)");
        }

        return moveIssuesToSprintAndRankCall(sprintId, moveIssuesToBacklogForBoardRequest, _callback);

    }

    /**
     * Move issues to sprint and rank
     * Moves issues to a sprint, for a given sprint ID. Issues can only be moved to open or active sprints. The maximum number of issues that can be moved in one operation is 50.
     * @param sprintId The ID of the sprint that you want to assign issues to. (required)
     * @param moveIssuesToBacklogForBoardRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have permission to assign issues. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public void moveIssuesToSprintAndRank(Long sprintId, MoveIssuesToBacklogForBoardRequest moveIssuesToBacklogForBoardRequest) throws ApiException {
        moveIssuesToSprintAndRankWithHttpInfo(sprintId, moveIssuesToBacklogForBoardRequest);
    }

    /**
     * Move issues to sprint and rank
     * Moves issues to a sprint, for a given sprint ID. Issues can only be moved to open or active sprints. The maximum number of issues that can be moved in one operation is 50.
     * @param sprintId The ID of the sprint that you want to assign issues to. (required)
     * @param moveIssuesToBacklogForBoardRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have permission to assign issues. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> moveIssuesToSprintAndRankWithHttpInfo(Long sprintId, MoveIssuesToBacklogForBoardRequest moveIssuesToBacklogForBoardRequest) throws ApiException {
        okhttp3.Call localVarCall = moveIssuesToSprintAndRankValidateBeforeCall(sprintId, moveIssuesToBacklogForBoardRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Move issues to sprint and rank (asynchronously)
     * Moves issues to a sprint, for a given sprint ID. Issues can only be moved to open or active sprints. The maximum number of issues that can be moved in one operation is 50.
     * @param sprintId The ID of the sprint that you want to assign issues to. (required)
     * @param moveIssuesToBacklogForBoardRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response is returned if operation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have permission to assign issues. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveIssuesToSprintAndRankAsync(Long sprintId, MoveIssuesToBacklogForBoardRequest moveIssuesToBacklogForBoardRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveIssuesToSprintAndRankValidateBeforeCall(sprintId, moveIssuesToBacklogForBoardRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for partiallyUpdateSprint
     * @param sprintId The ID of the sprint to update. (required)
     * @param updateSprintRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated sprint </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partiallyUpdateSprintCall(Long sprintId, UpdateSprintRequest updateSprintRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSprintRequest;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/sprint/{sprintId}"
            .replace("{" + "sprintId" + "}", localVarApiClient.escapeString(sprintId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partiallyUpdateSprintValidateBeforeCall(Long sprintId, UpdateSprintRequest updateSprintRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sprintId' is set
        if (sprintId == null) {
            throw new ApiException("Missing the required parameter 'sprintId' when calling partiallyUpdateSprint(Async)");
        }

        // verify the required parameter 'updateSprintRequest' is set
        if (updateSprintRequest == null) {
            throw new ApiException("Missing the required parameter 'updateSprintRequest' when calling partiallyUpdateSprint(Async)");
        }

        return partiallyUpdateSprintCall(sprintId, updateSprintRequest, _callback);

    }

    /**
     * Partially update sprint
     * Performs a partial update of a sprint. A partial update means that fields not present in the request JSON will not be updated.  Notes:   *  For closed sprints, only the name and goal can be updated; changes to other fields will be ignored.  *  A sprint can be started by updating the state to &#39;active&#39;. This requires the sprint to be in the &#39;future&#39; state and have a startDate and endDate set.  *  A sprint can be completed by updating the state to &#39;closed&#39;. This action requires the sprint to be in the &#39;active&#39; state. This sets the completeDate to the time of the request.  *  Other changes to state are not allowed.  *  The completeDate field cannot be updated manually.
     * @param sprintId The ID of the sprint to update. (required)
     * @param updateSprintRequest  (required)
     * @return PartiallyUpdateSprint200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated sprint </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public PartiallyUpdateSprint200Response partiallyUpdateSprint(Long sprintId, UpdateSprintRequest updateSprintRequest) throws ApiException {
        ApiResponse<PartiallyUpdateSprint200Response> localVarResp = partiallyUpdateSprintWithHttpInfo(sprintId, updateSprintRequest);
        return localVarResp.getData();
    }

    /**
     * Partially update sprint
     * Performs a partial update of a sprint. A partial update means that fields not present in the request JSON will not be updated.  Notes:   *  For closed sprints, only the name and goal can be updated; changes to other fields will be ignored.  *  A sprint can be started by updating the state to &#39;active&#39;. This requires the sprint to be in the &#39;future&#39; state and have a startDate and endDate set.  *  A sprint can be completed by updating the state to &#39;closed&#39;. This action requires the sprint to be in the &#39;active&#39; state. This sets the completeDate to the time of the request.  *  Other changes to state are not allowed.  *  The completeDate field cannot be updated manually.
     * @param sprintId The ID of the sprint to update. (required)
     * @param updateSprintRequest  (required)
     * @return ApiResponse&lt;PartiallyUpdateSprint200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated sprint </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartiallyUpdateSprint200Response> partiallyUpdateSprintWithHttpInfo(Long sprintId, UpdateSprintRequest updateSprintRequest) throws ApiException {
        okhttp3.Call localVarCall = partiallyUpdateSprintValidateBeforeCall(sprintId, updateSprintRequest, null);
        Type localVarReturnType = new TypeToken<PartiallyUpdateSprint200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Partially update sprint (asynchronously)
     * Performs a partial update of a sprint. A partial update means that fields not present in the request JSON will not be updated.  Notes:   *  For closed sprints, only the name and goal can be updated; changes to other fields will be ignored.  *  A sprint can be started by updating the state to &#39;active&#39;. This requires the sprint to be in the &#39;future&#39; state and have a startDate and endDate set.  *  A sprint can be completed by updating the state to &#39;closed&#39;. This action requires the sprint to be in the &#39;active&#39; state. This sets the completeDate to the time of the request.  *  Other changes to state are not allowed.  *  The completeDate field cannot be updated manually.
     * @param sprintId The ID of the sprint to update. (required)
     * @param updateSprintRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated sprint </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partiallyUpdateSprintAsync(Long sprintId, UpdateSprintRequest updateSprintRequest, final ApiCallback<PartiallyUpdateSprint200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = partiallyUpdateSprintValidateBeforeCall(sprintId, updateSprintRequest, _callback);
        Type localVarReturnType = new TypeToken<PartiallyUpdateSprint200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setProperty
     * @param sprintId the ID of the sprint on which the property will be set. (required)
     * @param propertyKey the key of the sprint&#39;s property. The maximum length of the key is 255 bytes. (required)
     * @param body The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the sprint property is successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Returned if the sprint property is successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the sprintId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the calling user does not have permission to edit the sprint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint with given id does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPropertyCall(String sprintId, String propertyKey, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/sprint/{sprintId}/properties/{propertyKey}"
            .replace("{" + "sprintId" + "}", localVarApiClient.escapeString(sprintId.toString()))
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPropertyValidateBeforeCall(String sprintId, String propertyKey, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sprintId' is set
        if (sprintId == null) {
            throw new ApiException("Missing the required parameter 'sprintId' when calling setProperty(Async)");
        }

        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling setProperty(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setProperty(Async)");
        }

        return setPropertyCall(sprintId, propertyKey, body, _callback);

    }

    /**
     * Set property
     * Sets the value of the specified sprint&#39;s property.  You can use this resource to store a custom data against the sprint identified by the id. The user who stores the data is required to have permissions to modify the sprint.
     * @param sprintId the ID of the sprint on which the property will be set. (required)
     * @param propertyKey the key of the sprint&#39;s property. The maximum length of the key is 255 bytes. (required)
     * @param body The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the sprint property is successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Returned if the sprint property is successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the sprintId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the calling user does not have permission to edit the sprint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint with given id does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public Object setProperty(String sprintId, String propertyKey, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = setPropertyWithHttpInfo(sprintId, propertyKey, body);
        return localVarResp.getData();
    }

    /**
     * Set property
     * Sets the value of the specified sprint&#39;s property.  You can use this resource to store a custom data against the sprint identified by the id. The user who stores the data is required to have permissions to modify the sprint.
     * @param sprintId the ID of the sprint on which the property will be set. (required)
     * @param propertyKey the key of the sprint&#39;s property. The maximum length of the key is 255 bytes. (required)
     * @param body The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the sprint property is successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Returned if the sprint property is successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the sprintId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the calling user does not have permission to edit the sprint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint with given id does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> setPropertyWithHttpInfo(String sprintId, String propertyKey, Object body) throws ApiException {
        okhttp3.Call localVarCall = setPropertyValidateBeforeCall(sprintId, propertyKey, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set property (asynchronously)
     * Sets the value of the specified sprint&#39;s property.  You can use this resource to store a custom data against the sprint identified by the id. The user who stores the data is required to have permissions to modify the sprint.
     * @param sprintId the ID of the sprint on which the property will be set. (required)
     * @param propertyKey the key of the sprint&#39;s property. The maximum length of the key is 255 bytes. (required)
     * @param body The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the sprint property is successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Returned if the sprint property is successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the sprintId is invalid (negative or not a number). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the calling user is not authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the calling user does not have permission to edit the sprint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint with given id does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPropertyAsync(String sprintId, String propertyKey, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPropertyValidateBeforeCall(sprintId, propertyKey, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for swapSprint
     * @param sprintId The ID of the sprint to swap. (required)
     * @param swapSprintRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the sprint swap was performed successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have permission to at least one sprint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if at least one sprint does not exist or user does not have permission to view to at least one sprint. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swapSprintCall(Long sprintId, SwapSprintRequest swapSprintRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = swapSprintRequest;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/sprint/{sprintId}/swap"
            .replace("{" + "sprintId" + "}", localVarApiClient.escapeString(sprintId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call swapSprintValidateBeforeCall(Long sprintId, SwapSprintRequest swapSprintRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sprintId' is set
        if (sprintId == null) {
            throw new ApiException("Missing the required parameter 'sprintId' when calling swapSprint(Async)");
        }

        // verify the required parameter 'swapSprintRequest' is set
        if (swapSprintRequest == null) {
            throw new ApiException("Missing the required parameter 'swapSprintRequest' when calling swapSprint(Async)");
        }

        return swapSprintCall(sprintId, swapSprintRequest, _callback);

    }

    /**
     * Swap sprint
     * Swap the position of the sprint with the second sprint.
     * @param sprintId The ID of the sprint to swap. (required)
     * @param swapSprintRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the sprint swap was performed successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have permission to at least one sprint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if at least one sprint does not exist or user does not have permission to view to at least one sprint. </td><td>  -  </td></tr>
     </table>
     */
    public void swapSprint(Long sprintId, SwapSprintRequest swapSprintRequest) throws ApiException {
        swapSprintWithHttpInfo(sprintId, swapSprintRequest);
    }

    /**
     * Swap sprint
     * Swap the position of the sprint with the second sprint.
     * @param sprintId The ID of the sprint to swap. (required)
     * @param swapSprintRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the sprint swap was performed successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have permission to at least one sprint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if at least one sprint does not exist or user does not have permission to view to at least one sprint. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> swapSprintWithHttpInfo(Long sprintId, SwapSprintRequest swapSprintRequest) throws ApiException {
        okhttp3.Call localVarCall = swapSprintValidateBeforeCall(sprintId, swapSprintRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Swap sprint (asynchronously)
     * Swap the position of the sprint with the second sprint.
     * @param sprintId The ID of the sprint to swap. (required)
     * @param swapSprintRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the sprint swap was performed successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license or does not have permission to at least one sprint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if at least one sprint does not exist or user does not have permission to view to at least one sprint. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swapSprintAsync(Long sprintId, SwapSprintRequest swapSprintRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = swapSprintValidateBeforeCall(sprintId, swapSprintRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSprint
     * @param sprintId the ID of the sprint to update. (required)
     * @param updateSprintRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated sprint </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSprintCall(Long sprintId, UpdateSprintRequest updateSprintRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSprintRequest;

        // create path and map variables
        String localVarPath = "/rest/agile/1.0/sprint/{sprintId}"
            .replace("{" + "sprintId" + "}", localVarApiClient.escapeString(sprintId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSprintValidateBeforeCall(Long sprintId, UpdateSprintRequest updateSprintRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sprintId' is set
        if (sprintId == null) {
            throw new ApiException("Missing the required parameter 'sprintId' when calling updateSprint(Async)");
        }

        // verify the required parameter 'updateSprintRequest' is set
        if (updateSprintRequest == null) {
            throw new ApiException("Missing the required parameter 'updateSprintRequest' when calling updateSprint(Async)");
        }

        return updateSprintCall(sprintId, updateSprintRequest, _callback);

    }

    /**
     * Update sprint
     * Performs a full update of a sprint. A full update means that the result will be exactly the same as the request body. Any fields not present in the request JSON will be set to null.  Notes:   *  For closed sprints, only the name and goal can be updated; changes to other fields will be ignored.  *  A sprint can be started by updating the state to &#39;active&#39;. This requires the sprint to be in the &#39;future&#39; state and have a startDate and endDate set.  *  A sprint can be completed by updating the state to &#39;closed&#39;. This action requires the sprint to be in the &#39;active&#39; state. This sets the completeDate to the time of the request.  *  Other changes to state are not allowed.  *  The completeDate field cannot be updated manually.
     * @param sprintId the ID of the sprint to update. (required)
     * @param updateSprintRequest  (required)
     * @return UpdateSprint200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated sprint </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSprint200Response updateSprint(Long sprintId, UpdateSprintRequest updateSprintRequest) throws ApiException {
        ApiResponse<UpdateSprint200Response> localVarResp = updateSprintWithHttpInfo(sprintId, updateSprintRequest);
        return localVarResp.getData();
    }

    /**
     * Update sprint
     * Performs a full update of a sprint. A full update means that the result will be exactly the same as the request body. Any fields not present in the request JSON will be set to null.  Notes:   *  For closed sprints, only the name and goal can be updated; changes to other fields will be ignored.  *  A sprint can be started by updating the state to &#39;active&#39;. This requires the sprint to be in the &#39;future&#39; state and have a startDate and endDate set.  *  A sprint can be completed by updating the state to &#39;closed&#39;. This action requires the sprint to be in the &#39;active&#39; state. This sets the completeDate to the time of the request.  *  Other changes to state are not allowed.  *  The completeDate field cannot be updated manually.
     * @param sprintId the ID of the sprint to update. (required)
     * @param updateSprintRequest  (required)
     * @return ApiResponse&lt;UpdateSprint200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated sprint </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSprint200Response> updateSprintWithHttpInfo(Long sprintId, UpdateSprintRequest updateSprintRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSprintValidateBeforeCall(sprintId, updateSprintRequest, null);
        Type localVarReturnType = new TypeToken<UpdateSprint200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update sprint (asynchronously)
     * Performs a full update of a sprint. A full update means that the result will be exactly the same as the request body. Any fields not present in the request JSON will be set to null.  Notes:   *  For closed sprints, only the name and goal can be updated; changes to other fields will be ignored.  *  A sprint can be started by updating the state to &#39;active&#39;. This requires the sprint to be in the &#39;future&#39; state and have a startDate and endDate set.  *  A sprint can be completed by updating the state to &#39;closed&#39;. This action requires the sprint to be in the &#39;active&#39; state. This sets the completeDate to the time of the request.  *  Other changes to state are not allowed.  *  The completeDate field cannot be updated manually.
     * @param sprintId the ID of the sprint to update. (required)
     * @param updateSprintRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated sprint </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user is not logged in. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not a have valid license. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the sprint does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSprintAsync(Long sprintId, UpdateSprintRequest updateSprintRequest, final ApiCallback<UpdateSprint200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSprintValidateBeforeCall(sprintId, updateSprintRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateSprint200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
