/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * The container that the board is located in.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class BoardLocationBean {
  public static final String SERIALIZED_NAME_AVATAR_U_R_I = "avatarURI";
  @SerializedName(SERIALIZED_NAME_AVATAR_U_R_I)
  @javax.annotation.Nullable
  private URI avatarURI;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  @javax.annotation.Nullable
  private String displayName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  @javax.annotation.Nullable
  private Long projectId;

  public static final String SERIALIZED_NAME_PROJECT_KEY = "projectKey";
  @SerializedName(SERIALIZED_NAME_PROJECT_KEY)
  @javax.annotation.Nullable
  private String projectKey;

  public static final String SERIALIZED_NAME_PROJECT_NAME = "projectName";
  @SerializedName(SERIALIZED_NAME_PROJECT_NAME)
  @javax.annotation.Nullable
  private String projectName;

  public static final String SERIALIZED_NAME_PROJECT_TYPE_KEY = "projectTypeKey";
  @SerializedName(SERIALIZED_NAME_PROJECT_TYPE_KEY)
  @javax.annotation.Nullable
  private String projectTypeKey;

  public static final String SERIALIZED_NAME_USER_ACCOUNT_ID = "userAccountId";
  @SerializedName(SERIALIZED_NAME_USER_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String userAccountId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private Long userId;

  public BoardLocationBean() {
  }

  public BoardLocationBean avatarURI(@javax.annotation.Nullable URI avatarURI) {
    this.avatarURI = avatarURI;
    return this;
  }

  /**
   * Get avatarURI
   * @return avatarURI
   */
  @javax.annotation.Nullable
  public URI getAvatarURI() {
    return avatarURI;
  }

  public void setAvatarURI(@javax.annotation.Nullable URI avatarURI) {
    this.avatarURI = avatarURI;
  }


  public BoardLocationBean displayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
  }


  public BoardLocationBean name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public BoardLocationBean projectId(@javax.annotation.Nullable Long projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Get projectId
   * @return projectId
   */
  @javax.annotation.Nullable
  public Long getProjectId() {
    return projectId;
  }

  public void setProjectId(@javax.annotation.Nullable Long projectId) {
    this.projectId = projectId;
  }


  public BoardLocationBean projectKey(@javax.annotation.Nullable String projectKey) {
    this.projectKey = projectKey;
    return this;
  }

  /**
   * Get projectKey
   * @return projectKey
   */
  @javax.annotation.Nullable
  public String getProjectKey() {
    return projectKey;
  }

  public void setProjectKey(@javax.annotation.Nullable String projectKey) {
    this.projectKey = projectKey;
  }


  public BoardLocationBean projectName(@javax.annotation.Nullable String projectName) {
    this.projectName = projectName;
    return this;
  }

  /**
   * Get projectName
   * @return projectName
   */
  @javax.annotation.Nullable
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(@javax.annotation.Nullable String projectName) {
    this.projectName = projectName;
  }


  public BoardLocationBean projectTypeKey(@javax.annotation.Nullable String projectTypeKey) {
    this.projectTypeKey = projectTypeKey;
    return this;
  }

  /**
   * Get projectTypeKey
   * @return projectTypeKey
   */
  @javax.annotation.Nullable
  public String getProjectTypeKey() {
    return projectTypeKey;
  }

  public void setProjectTypeKey(@javax.annotation.Nullable String projectTypeKey) {
    this.projectTypeKey = projectTypeKey;
  }


  public BoardLocationBean userAccountId(@javax.annotation.Nullable String userAccountId) {
    this.userAccountId = userAccountId;
    return this;
  }

  /**
   * Get userAccountId
   * @return userAccountId
   */
  @javax.annotation.Nullable
  public String getUserAccountId() {
    return userAccountId;
  }

  public void setUserAccountId(@javax.annotation.Nullable String userAccountId) {
    this.userAccountId = userAccountId;
  }


  public BoardLocationBean userId(@javax.annotation.Nullable Long userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public Long getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable Long userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoardLocationBean boardLocationBean = (BoardLocationBean) o;
    return Objects.equals(this.avatarURI, boardLocationBean.avatarURI) &&
        Objects.equals(this.displayName, boardLocationBean.displayName) &&
        Objects.equals(this.name, boardLocationBean.name) &&
        Objects.equals(this.projectId, boardLocationBean.projectId) &&
        Objects.equals(this.projectKey, boardLocationBean.projectKey) &&
        Objects.equals(this.projectName, boardLocationBean.projectName) &&
        Objects.equals(this.projectTypeKey, boardLocationBean.projectTypeKey) &&
        Objects.equals(this.userAccountId, boardLocationBean.userAccountId) &&
        Objects.equals(this.userId, boardLocationBean.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatarURI, displayName, name, projectId, projectKey, projectName, projectTypeKey, userAccountId, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoardLocationBean {\n");
    sb.append("    avatarURI: ").append(toIndentedString(avatarURI)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    projectKey: ").append(toIndentedString(projectKey)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    projectTypeKey: ").append(toIndentedString(projectTypeKey)).append("\n");
    sb.append("    userAccountId: ").append(toIndentedString(userAccountId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatarURI");
    openapiFields.add("displayName");
    openapiFields.add("name");
    openapiFields.add("projectId");
    openapiFields.add("projectKey");
    openapiFields.add("projectName");
    openapiFields.add("projectTypeKey");
    openapiFields.add("userAccountId");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BoardLocationBean
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BoardLocationBean.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BoardLocationBean is not found in the empty JSON string", BoardLocationBean.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BoardLocationBean.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BoardLocationBean` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("avatarURI") != null && !jsonObj.get("avatarURI").isJsonNull()) && !jsonObj.get("avatarURI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatarURI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatarURI").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("projectKey") != null && !jsonObj.get("projectKey").isJsonNull()) && !jsonObj.get("projectKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectKey").toString()));
      }
      if ((jsonObj.get("projectName") != null && !jsonObj.get("projectName").isJsonNull()) && !jsonObj.get("projectName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectName").toString()));
      }
      if ((jsonObj.get("projectTypeKey") != null && !jsonObj.get("projectTypeKey").isJsonNull()) && !jsonObj.get("projectTypeKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectTypeKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectTypeKey").toString()));
      }
      if ((jsonObj.get("userAccountId") != null && !jsonObj.get("userAccountId").isJsonNull()) && !jsonObj.get("userAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAccountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BoardLocationBean.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BoardLocationBean' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BoardLocationBean> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BoardLocationBean.class));

       return (TypeAdapter<T>) new TypeAdapter<BoardLocationBean>() {
           @Override
           public void write(JsonWriter out, BoardLocationBean value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BoardLocationBean read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BoardLocationBean given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BoardLocationBean
   * @throws IOException if the JSON string is invalid with respect to BoardLocationBean
   */
  public static BoardLocationBean fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BoardLocationBean.class);
  }

  /**
   * Convert an instance of BoardLocationBean to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

