/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.BuildReferences;
import com.atlassian.jira.software.model.TestInfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * Data related to a single build 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class BuildData {
  /**
   * The schema version used for this data.  Placeholder to support potential schema changes in the future. 
   */
  @JsonAdapter(SchemaVersionEnum.Adapter.class)
  public enum SchemaVersionEnum {
    _1_0("1.0");

    private String value;

    SchemaVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SchemaVersionEnum fromValue(String value) {
      for (SchemaVersionEnum b : SchemaVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SchemaVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SchemaVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SchemaVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SchemaVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SchemaVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  @javax.annotation.Nullable
  private SchemaVersionEnum schemaVersion = SchemaVersionEnum._1_0;

  public static final String SERIALIZED_NAME_PIPELINE_ID = "pipelineId";
  @SerializedName(SERIALIZED_NAME_PIPELINE_ID)
  @javax.annotation.Nonnull
  private String pipelineId;

  public static final String SERIALIZED_NAME_BUILD_NUMBER = "buildNumber";
  @SerializedName(SERIALIZED_NAME_BUILD_NUMBER)
  @javax.annotation.Nonnull
  private Long buildNumber;

  public static final String SERIALIZED_NAME_UPDATE_SEQUENCE_NUMBER = "updateSequenceNumber";
  @SerializedName(SERIALIZED_NAME_UPDATE_SEQUENCE_NUMBER)
  @javax.annotation.Nonnull
  private Long updateSequenceNumber;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  @javax.annotation.Nonnull
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  @javax.annotation.Nullable
  private String label;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nonnull
  private String url;

  /**
   * The state of a build.  * &#x60;pending&#x60; - The build is queued, or some manual action is required. * &#x60;in_progress&#x60; - The build is currently running. * &#x60;successful&#x60; - The build completed successfully. * &#x60;failed&#x60; - The build failed. * &#x60;cancelled&#x60; - The build has been cancelled or stopped. * &#x60;unknown&#x60; - The build is in an unknown state. 
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    PENDING("pending"),
    
    IN_PROGRESS("in_progress"),
    
    SUCCESSFUL("successful"),
    
    FAILED("failed"),
    
    CANCELLED("cancelled"),
    
    UNKNOWN("unknown");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nonnull
  private StateEnum state;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  @javax.annotation.Nonnull
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_ISSUE_KEYS = "issueKeys";
  @SerializedName(SERIALIZED_NAME_ISSUE_KEYS)
  @javax.annotation.Nonnull
  private List<String> issueKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEST_INFO = "testInfo";
  @SerializedName(SERIALIZED_NAME_TEST_INFO)
  @javax.annotation.Nullable
  private TestInfo testInfo;

  public static final String SERIALIZED_NAME_REFERENCES = "references";
  @SerializedName(SERIALIZED_NAME_REFERENCES)
  @javax.annotation.Nullable
  private List<BuildReferences> references = new ArrayList<>();

  public BuildData() {
  }

  public BuildData schemaVersion(@javax.annotation.Nullable SchemaVersionEnum schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

  /**
   * The schema version used for this data.  Placeholder to support potential schema changes in the future. 
   * @return schemaVersion
   */
  @javax.annotation.Nullable
  public SchemaVersionEnum getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(@javax.annotation.Nullable SchemaVersionEnum schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


  public BuildData pipelineId(@javax.annotation.Nonnull String pipelineId) {
    this.pipelineId = pipelineId;
    return this;
  }

  /**
   * An ID that relates a sequence of builds. Depending on your use case this might be a project ID, pipeline ID, plan key etc. - whatever logical unit you use to group a sequence of builds.  The combination of &#x60;pipelineId&#x60; and &#x60;buildNumber&#x60; must uniquely identify a build you have provided. 
   * @return pipelineId
   */
  @javax.annotation.Nonnull
  public String getPipelineId() {
    return pipelineId;
  }

  public void setPipelineId(@javax.annotation.Nonnull String pipelineId) {
    this.pipelineId = pipelineId;
  }


  public BuildData buildNumber(@javax.annotation.Nonnull Long buildNumber) {
    this.buildNumber = buildNumber;
    return this;
  }

  /**
   * Identifies a build within the sequence of builds identified by the build &#x60;pipelineId&#x60;.  Used to identify the &#39;most recent&#39; build in that sequence of builds.  The combination of &#x60;pipelineId&#x60; and &#x60;buildNumber&#x60; must uniquely identify a build you have provided. 
   * @return buildNumber
   */
  @javax.annotation.Nonnull
  public Long getBuildNumber() {
    return buildNumber;
  }

  public void setBuildNumber(@javax.annotation.Nonnull Long buildNumber) {
    this.buildNumber = buildNumber;
  }


  public BuildData updateSequenceNumber(@javax.annotation.Nonnull Long updateSequenceNumber) {
    this.updateSequenceNumber = updateSequenceNumber;
    return this;
  }

  /**
   * A number used to apply an order to the updates to the build, as identified by &#x60;pipelineId&#x60; and &#x60;buildNumber&#x60;, in the case of out-of-order receipt of update requests.  It must be a monotonically increasing number. For example, epoch time could be one way to generate the &#x60;updateSequenceNumber&#x60;.  Updates for a build that is received with an &#x60;updateSqeuenceNumber&#x60; less than or equal to what is currently stored will be ignored. 
   * @return updateSequenceNumber
   */
  @javax.annotation.Nonnull
  public Long getUpdateSequenceNumber() {
    return updateSequenceNumber;
  }

  public void setUpdateSequenceNumber(@javax.annotation.Nonnull Long updateSequenceNumber) {
    this.updateSequenceNumber = updateSequenceNumber;
  }


  public BuildData displayName(@javax.annotation.Nonnull String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The human-readable name for the build.  Will be shown in the UI. 
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(@javax.annotation.Nonnull String displayName) {
    this.displayName = displayName;
  }


  public BuildData description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * An optional description to attach to this build.  This may be anything that makes sense in your system. 
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public BuildData label(@javax.annotation.Nullable String label) {
    this.label = label;
    return this;
  }

  /**
   * A human-readable string that to provide information about the build. 
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(@javax.annotation.Nullable String label) {
    this.label = label;
  }


  public BuildData url(@javax.annotation.Nonnull String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL to this build in your system. 
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nonnull String url) {
    this.url = url;
  }


  public BuildData state(@javax.annotation.Nonnull StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state of a build.  * &#x60;pending&#x60; - The build is queued, or some manual action is required. * &#x60;in_progress&#x60; - The build is currently running. * &#x60;successful&#x60; - The build completed successfully. * &#x60;failed&#x60; - The build failed. * &#x60;cancelled&#x60; - The build has been cancelled or stopped. * &#x60;unknown&#x60; - The build is in an unknown state. 
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(@javax.annotation.Nonnull StateEnum state) {
    this.state = state;
  }


  public BuildData lastUpdated(@javax.annotation.Nonnull OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The last-updated timestamp to present to the user as a summary of the state of the build. 
   * @return lastUpdated
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(@javax.annotation.Nonnull OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public BuildData issueKeys(@javax.annotation.Nonnull List<String> issueKeys) {
    this.issueKeys = issueKeys;
    return this;
  }

  public BuildData addIssueKeysItem(String issueKeysItem) {
    if (this.issueKeys == null) {
      this.issueKeys = new ArrayList<>();
    }
    this.issueKeys.add(issueKeysItem);
    return this;
  }

  /**
   * The Jira issue keys to associate the build information with.  You are free to associate issue keys in any way you like. However, we recommend that you use the name of the branch the build was executed on, and extract issue keys from that name using a simple regex. This has the advantage that it provides an intuitive association of builds to issue keys. 
   * @return issueKeys
   */
  @javax.annotation.Nonnull
  public List<String> getIssueKeys() {
    return issueKeys;
  }

  public void setIssueKeys(@javax.annotation.Nonnull List<String> issueKeys) {
    this.issueKeys = issueKeys;
  }


  public BuildData testInfo(@javax.annotation.Nullable TestInfo testInfo) {
    this.testInfo = testInfo;
    return this;
  }

  /**
   * Get testInfo
   * @return testInfo
   */
  @javax.annotation.Nullable
  public TestInfo getTestInfo() {
    return testInfo;
  }

  public void setTestInfo(@javax.annotation.Nullable TestInfo testInfo) {
    this.testInfo = testInfo;
  }


  public BuildData references(@javax.annotation.Nullable List<BuildReferences> references) {
    this.references = references;
    return this;
  }

  public BuildData addReferencesItem(BuildReferences referencesItem) {
    if (this.references == null) {
      this.references = new ArrayList<>();
    }
    this.references.add(referencesItem);
    return this;
  }

  /**
   * Optional information that links a build to a commit, branch etc. 
   * @return references
   */
  @javax.annotation.Nullable
  public List<BuildReferences> getReferences() {
    return references;
  }

  public void setReferences(@javax.annotation.Nullable List<BuildReferences> references) {
    this.references = references;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildData buildData = (BuildData) o;
    return Objects.equals(this.schemaVersion, buildData.schemaVersion) &&
        Objects.equals(this.pipelineId, buildData.pipelineId) &&
        Objects.equals(this.buildNumber, buildData.buildNumber) &&
        Objects.equals(this.updateSequenceNumber, buildData.updateSequenceNumber) &&
        Objects.equals(this.displayName, buildData.displayName) &&
        Objects.equals(this.description, buildData.description) &&
        Objects.equals(this.label, buildData.label) &&
        Objects.equals(this.url, buildData.url) &&
        Objects.equals(this.state, buildData.state) &&
        Objects.equals(this.lastUpdated, buildData.lastUpdated) &&
        Objects.equals(this.issueKeys, buildData.issueKeys) &&
        Objects.equals(this.testInfo, buildData.testInfo) &&
        Objects.equals(this.references, buildData.references);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaVersion, pipelineId, buildNumber, updateSequenceNumber, displayName, description, label, url, state, lastUpdated, issueKeys, testInfo, references);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildData {\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    pipelineId: ").append(toIndentedString(pipelineId)).append("\n");
    sb.append("    buildNumber: ").append(toIndentedString(buildNumber)).append("\n");
    sb.append("    updateSequenceNumber: ").append(toIndentedString(updateSequenceNumber)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    issueKeys: ").append(toIndentedString(issueKeys)).append("\n");
    sb.append("    testInfo: ").append(toIndentedString(testInfo)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("schemaVersion");
    openapiFields.add("pipelineId");
    openapiFields.add("buildNumber");
    openapiFields.add("updateSequenceNumber");
    openapiFields.add("displayName");
    openapiFields.add("description");
    openapiFields.add("label");
    openapiFields.add("url");
    openapiFields.add("state");
    openapiFields.add("lastUpdated");
    openapiFields.add("issueKeys");
    openapiFields.add("testInfo");
    openapiFields.add("references");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pipelineId");
    openapiRequiredFields.add("buildNumber");
    openapiRequiredFields.add("updateSequenceNumber");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("lastUpdated");
    openapiRequiredFields.add("issueKeys");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildData is not found in the empty JSON string", BuildData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BuildData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("schemaVersion") != null && !jsonObj.get("schemaVersion").isJsonNull()) && !jsonObj.get("schemaVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaVersion").toString()));
      }
      // validate the optional field `schemaVersion`
      if (jsonObj.get("schemaVersion") != null && !jsonObj.get("schemaVersion").isJsonNull()) {
        SchemaVersionEnum.validateJsonElement(jsonObj.get("schemaVersion"));
      }
      if (!jsonObj.get("pipelineId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pipelineId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pipelineId").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `state`
      StateEnum.validateJsonElement(jsonObj.get("state"));
      // ensure the required json array is present
      if (jsonObj.get("issueKeys") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("issueKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueKeys` to be an array in the JSON string but got `%s`", jsonObj.get("issueKeys").toString()));
      }
      // validate the optional field `testInfo`
      if (jsonObj.get("testInfo") != null && !jsonObj.get("testInfo").isJsonNull()) {
        TestInfo.validateJsonElement(jsonObj.get("testInfo"));
      }
      if (jsonObj.get("references") != null && !jsonObj.get("references").isJsonNull()) {
        JsonArray jsonArrayreferences = jsonObj.getAsJsonArray("references");
        if (jsonArrayreferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("references").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `references` to be an array in the JSON string but got `%s`", jsonObj.get("references").toString()));
          }

          // validate the optional field `references` (array)
          for (int i = 0; i < jsonArrayreferences.size(); i++) {
            BuildReferences.validateJsonElement(jsonArrayreferences.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildData.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildData>() {
           @Override
           public void write(JsonWriter out, BuildData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildData
   * @throws IOException if the JSON string is invalid with respect to BuildData
   */
  public static BuildData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildData.class);
  }

  /**
   * Convert an instance of BuildData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

