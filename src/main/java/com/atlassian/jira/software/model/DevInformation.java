/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.ProviderMetadata;
import com.atlassian.jira.software.model.Repository;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * Request object for development information push operations, entities are grouped by repository
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class DevInformation {
  public static final String SERIALIZED_NAME_REPOSITORIES = "repositories";
  @SerializedName(SERIALIZED_NAME_REPOSITORIES)
  @javax.annotation.Nonnull
  private List<Repository> repositories = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREVENT_TRANSITIONS = "preventTransitions";
  @SerializedName(SERIALIZED_NAME_PREVENT_TRANSITIONS)
  @javax.annotation.Nullable
  private Boolean preventTransitions;

  /**
   * Indicates the operation being performed by the provider system when sending this data. \&quot;NORMAL\&quot; - Data received during normal operation (e.g. a user pushing a branch). \&quot;BACKFILL\&quot; - Data received while backfilling existing data (e.g. indexing a newly connected account). Default is \&quot;NORMAL\&quot;. Please note that \&quot;BACKFILL\&quot; operations have a much higher rate-limiting threshold but are also processed slower in comparison to \&quot;NORMAL\&quot; operations.
   */
  @JsonAdapter(OperationTypeEnum.Adapter.class)
  public enum OperationTypeEnum {
    NORMAL("NORMAL"),
    
    BACKFILL("BACKFILL");

    private String value;

    OperationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationTypeEnum fromValue(String value) {
      for (OperationTypeEnum b : OperationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "operationType";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  @javax.annotation.Nullable
  private OperationTypeEnum operationType;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  @javax.annotation.Nullable
  private Map<String, String> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_PROVIDER_METADATA = "providerMetadata";
  @SerializedName(SERIALIZED_NAME_PROVIDER_METADATA)
  @javax.annotation.Nullable
  private ProviderMetadata providerMetadata;

  public DevInformation() {
  }

  public DevInformation repositories(@javax.annotation.Nonnull List<Repository> repositories) {
    this.repositories = repositories;
    return this;
  }

  public DevInformation addRepositoriesItem(Repository repositoriesItem) {
    if (this.repositories == null) {
      this.repositories = new ArrayList<>();
    }
    this.repositories.add(repositoriesItem);
    return this;
  }

  /**
   * List of repositories containing development information. Must not contain duplicates. Maximum number of entities across all repositories is 1000.
   * @return repositories
   */
  @javax.annotation.Nonnull
  public List<Repository> getRepositories() {
    return repositories;
  }

  public void setRepositories(@javax.annotation.Nonnull List<Repository> repositories) {
    this.repositories = repositories;
  }


  public DevInformation preventTransitions(@javax.annotation.Nullable Boolean preventTransitions) {
    this.preventTransitions = preventTransitions;
    return this;
  }

  /**
   * Flag to prevent automatic issue transitions and smart commits being fired, default is false.
   * @return preventTransitions
   */
  @javax.annotation.Nullable
  public Boolean getPreventTransitions() {
    return preventTransitions;
  }

  public void setPreventTransitions(@javax.annotation.Nullable Boolean preventTransitions) {
    this.preventTransitions = preventTransitions;
  }


  public DevInformation operationType(@javax.annotation.Nullable OperationTypeEnum operationType) {
    this.operationType = operationType;
    return this;
  }

  /**
   * Indicates the operation being performed by the provider system when sending this data. \&quot;NORMAL\&quot; - Data received during normal operation (e.g. a user pushing a branch). \&quot;BACKFILL\&quot; - Data received while backfilling existing data (e.g. indexing a newly connected account). Default is \&quot;NORMAL\&quot;. Please note that \&quot;BACKFILL\&quot; operations have a much higher rate-limiting threshold but are also processed slower in comparison to \&quot;NORMAL\&quot; operations.
   * @return operationType
   */
  @javax.annotation.Nullable
  public OperationTypeEnum getOperationType() {
    return operationType;
  }

  public void setOperationType(@javax.annotation.Nullable OperationTypeEnum operationType) {
    this.operationType = operationType;
  }


  public DevInformation properties(@javax.annotation.Nullable Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public DevInformation putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Arbitrary properties to tag the submitted repositories with. These properties can be used for delete operations to e.g. clean up all development information associated with an account in the event that the account is removed from the provider system. Note that these properties will never be returned with repository or entity data. They are not intended for use as metadata to associate with a repository. Maximum length of each key or value is 255 characters. Maximum allowed number of properties key/value pairs is 5. Properties keys cannot start with &#39;_&#39; character. Properties keys cannot contain &#39;:&#39; character. 
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(@javax.annotation.Nullable Map<String, String> properties) {
    this.properties = properties;
  }


  public DevInformation providerMetadata(@javax.annotation.Nullable ProviderMetadata providerMetadata) {
    this.providerMetadata = providerMetadata;
    return this;
  }

  /**
   * Get providerMetadata
   * @return providerMetadata
   */
  @javax.annotation.Nullable
  public ProviderMetadata getProviderMetadata() {
    return providerMetadata;
  }

  public void setProviderMetadata(@javax.annotation.Nullable ProviderMetadata providerMetadata) {
    this.providerMetadata = providerMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DevInformation devInformation = (DevInformation) o;
    return Objects.equals(this.repositories, devInformation.repositories) &&
        Objects.equals(this.preventTransitions, devInformation.preventTransitions) &&
        Objects.equals(this.operationType, devInformation.operationType) &&
        Objects.equals(this.properties, devInformation.properties) &&
        Objects.equals(this.providerMetadata, devInformation.providerMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(repositories, preventTransitions, operationType, properties, providerMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DevInformation {\n");
    sb.append("    repositories: ").append(toIndentedString(repositories)).append("\n");
    sb.append("    preventTransitions: ").append(toIndentedString(preventTransitions)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    providerMetadata: ").append(toIndentedString(providerMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("repositories");
    openapiFields.add("preventTransitions");
    openapiFields.add("operationType");
    openapiFields.add("properties");
    openapiFields.add("providerMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("repositories");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DevInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DevInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DevInformation is not found in the empty JSON string", DevInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DevInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DevInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DevInformation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("repositories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `repositories` to be an array in the JSON string but got `%s`", jsonObj.get("repositories").toString()));
      }

      JsonArray jsonArrayrepositories = jsonObj.getAsJsonArray("repositories");
      // validate the required field `repositories` (array)
      for (int i = 0; i < jsonArrayrepositories.size(); i++) {
        Repository.validateJsonElement(jsonArrayrepositories.get(i));
      };
      if ((jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonNull()) && !jsonObj.get("operationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationType").toString()));
      }
      // validate the optional field `operationType`
      if (jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonNull()) {
        OperationTypeEnum.validateJsonElement(jsonObj.get("operationType"));
      }
      // validate the optional field `providerMetadata`
      if (jsonObj.get("providerMetadata") != null && !jsonObj.get("providerMetadata").isJsonNull()) {
        ProviderMetadata.validateJsonElement(jsonObj.get("providerMetadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DevInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DevInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DevInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DevInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<DevInformation>() {
           @Override
           public void write(JsonWriter out, DevInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DevInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DevInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DevInformation
   * @throws IOException if the JSON string is invalid with respect to DevInformation
   */
  public static DevInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DevInformation.class);
  }

  /**
   * Convert an instance of DevInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

