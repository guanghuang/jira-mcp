/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.GetAllBoards200ResponseValuesInnerAdminsAllOfGroupsInner;
import com.atlassian.jira.software.model.GetAllBoards200ResponseValuesInnerAdminsAllOfUsersInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * The users and groups who own the board.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class BoardAdminsBean {
  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  @javax.annotation.Nullable
  private List<GetAllBoards200ResponseValuesInnerAdminsAllOfGroupsInner> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  @javax.annotation.Nullable
  private List<GetAllBoards200ResponseValuesInnerAdminsAllOfUsersInner> users = new ArrayList<>();

  public BoardAdminsBean() {
  }

  public BoardAdminsBean groups(@javax.annotation.Nullable List<GetAllBoards200ResponseValuesInnerAdminsAllOfGroupsInner> groups) {
    this.groups = groups;
    return this;
  }

  public BoardAdminsBean addGroupsItem(GetAllBoards200ResponseValuesInnerAdminsAllOfGroupsInner groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * Get groups
   * @return groups
   */
  @javax.annotation.Nullable
  public List<GetAllBoards200ResponseValuesInnerAdminsAllOfGroupsInner> getGroups() {
    return groups;
  }

  public void setGroups(@javax.annotation.Nullable List<GetAllBoards200ResponseValuesInnerAdminsAllOfGroupsInner> groups) {
    this.groups = groups;
  }


  public BoardAdminsBean users(@javax.annotation.Nullable List<GetAllBoards200ResponseValuesInnerAdminsAllOfUsersInner> users) {
    this.users = users;
    return this;
  }

  public BoardAdminsBean addUsersItem(GetAllBoards200ResponseValuesInnerAdminsAllOfUsersInner usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

  /**
   * Get users
   * @return users
   */
  @javax.annotation.Nullable
  public List<GetAllBoards200ResponseValuesInnerAdminsAllOfUsersInner> getUsers() {
    return users;
  }

  public void setUsers(@javax.annotation.Nullable List<GetAllBoards200ResponseValuesInnerAdminsAllOfUsersInner> users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoardAdminsBean boardAdminsBean = (BoardAdminsBean) o;
    return Objects.equals(this.groups, boardAdminsBean.groups) &&
        Objects.equals(this.users, boardAdminsBean.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groups, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoardAdminsBean {\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("groups");
    openapiFields.add("users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BoardAdminsBean
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BoardAdminsBean.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BoardAdminsBean is not found in the empty JSON string", BoardAdminsBean.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BoardAdminsBean.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BoardAdminsBean` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull()) {
        JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
        if (jsonArraygroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
          }

          // validate the optional field `groups` (array)
          for (int i = 0; i < jsonArraygroups.size(); i++) {
            GetAllBoards200ResponseValuesInnerAdminsAllOfGroupsInner.validateJsonElement(jsonArraygroups.get(i));
          };
        }
      }
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) {
        JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
        if (jsonArrayusers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("users").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
          }

          // validate the optional field `users` (array)
          for (int i = 0; i < jsonArrayusers.size(); i++) {
            GetAllBoards200ResponseValuesInnerAdminsAllOfUsersInner.validateJsonElement(jsonArrayusers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BoardAdminsBean.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BoardAdminsBean' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BoardAdminsBean> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BoardAdminsBean.class));

       return (TypeAdapter<T>) new TypeAdapter<BoardAdminsBean>() {
           @Override
           public void write(JsonWriter out, BoardAdminsBean value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BoardAdminsBean read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BoardAdminsBean given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BoardAdminsBean
   * @throws IOException if the JSON string is invalid with respect to BoardAdminsBean
   */
  public static BoardAdminsBean fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BoardAdminsBean.class);
  }

  /**
   * Convert an instance of BoardAdminsBean to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

