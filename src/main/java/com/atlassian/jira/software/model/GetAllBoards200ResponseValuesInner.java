/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.GetAllBoards200ResponseValuesInnerAdmins;
import com.atlassian.jira.software.model.GetAllBoards200ResponseValuesInnerLocation;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * Details about a board.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class GetAllBoards200ResponseValuesInner {
  public static final String SERIALIZED_NAME_ADMINS = "admins";
  @SerializedName(SERIALIZED_NAME_ADMINS)
  @javax.annotation.Nullable
  private GetAllBoards200ResponseValuesInnerAdmins admins;

  public static final String SERIALIZED_NAME_CAN_EDIT = "canEdit";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT)
  @javax.annotation.Nullable
  private Boolean canEdit;

  public static final String SERIALIZED_NAME_FAVOURITE = "favourite";
  @SerializedName(SERIALIZED_NAME_FAVOURITE)
  @javax.annotation.Nullable
  private Boolean favourite;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Long id;

  public static final String SERIALIZED_NAME_IS_PRIVATE = "isPrivate";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE)
  @javax.annotation.Nullable
  private Boolean isPrivate;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  @javax.annotation.Nullable
  private GetAllBoards200ResponseValuesInnerLocation location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  @javax.annotation.Nullable
  private URI self;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public GetAllBoards200ResponseValuesInner() {
  }

  public GetAllBoards200ResponseValuesInner(
     Boolean canEdit, 
     Boolean favourite, 
     Boolean isPrivate, 
     URI self
  ) {
    this();
    this.canEdit = canEdit;
    this.favourite = favourite;
    this.isPrivate = isPrivate;
    this.self = self;
  }

  public GetAllBoards200ResponseValuesInner admins(@javax.annotation.Nullable GetAllBoards200ResponseValuesInnerAdmins admins) {
    this.admins = admins;
    return this;
  }

  /**
   * Get admins
   * @return admins
   */
  @javax.annotation.Nullable
  public GetAllBoards200ResponseValuesInnerAdmins getAdmins() {
    return admins;
  }

  public void setAdmins(@javax.annotation.Nullable GetAllBoards200ResponseValuesInnerAdmins admins) {
    this.admins = admins;
  }


  /**
   * Whether the board can be edited.
   * @return canEdit
   */
  @javax.annotation.Nullable
  public Boolean getCanEdit() {
    return canEdit;
  }



  /**
   * Whether the board is selected as a favorite.
   * @return favourite
   */
  @javax.annotation.Nullable
  public Boolean getFavourite() {
    return favourite;
  }



  public GetAllBoards200ResponseValuesInner id(@javax.annotation.Nullable Long id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the board.
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Long id) {
    this.id = id;
  }


  /**
   * Whether the board is private.
   * @return isPrivate
   */
  @javax.annotation.Nullable
  public Boolean getIsPrivate() {
    return isPrivate;
  }



  public GetAllBoards200ResponseValuesInner location(@javax.annotation.Nullable GetAllBoards200ResponseValuesInnerLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public GetAllBoards200ResponseValuesInnerLocation getLocation() {
    return location;
  }

  public void setLocation(@javax.annotation.Nullable GetAllBoards200ResponseValuesInnerLocation location) {
    this.location = location;
  }


  public GetAllBoards200ResponseValuesInner name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the board.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  /**
   * The URL of the board.
   * @return self
   */
  @javax.annotation.Nullable
  public URI getSelf() {
    return self;
  }



  public GetAllBoards200ResponseValuesInner type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * The type the board.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAllBoards200ResponseValuesInner getAllBoards200ResponseValuesInner = (GetAllBoards200ResponseValuesInner) o;
    return Objects.equals(this.admins, getAllBoards200ResponseValuesInner.admins) &&
        Objects.equals(this.canEdit, getAllBoards200ResponseValuesInner.canEdit) &&
        Objects.equals(this.favourite, getAllBoards200ResponseValuesInner.favourite) &&
        Objects.equals(this.id, getAllBoards200ResponseValuesInner.id) &&
        Objects.equals(this.isPrivate, getAllBoards200ResponseValuesInner.isPrivate) &&
        Objects.equals(this.location, getAllBoards200ResponseValuesInner.location) &&
        Objects.equals(this.name, getAllBoards200ResponseValuesInner.name) &&
        Objects.equals(this.self, getAllBoards200ResponseValuesInner.self) &&
        Objects.equals(this.type, getAllBoards200ResponseValuesInner.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(admins, canEdit, favourite, id, isPrivate, location, name, self, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAllBoards200ResponseValuesInner {\n");
    sb.append("    admins: ").append(toIndentedString(admins)).append("\n");
    sb.append("    canEdit: ").append(toIndentedString(canEdit)).append("\n");
    sb.append("    favourite: ").append(toIndentedString(favourite)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admins");
    openapiFields.add("canEdit");
    openapiFields.add("favourite");
    openapiFields.add("id");
    openapiFields.add("isPrivate");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("self");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetAllBoards200ResponseValuesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAllBoards200ResponseValuesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAllBoards200ResponseValuesInner is not found in the empty JSON string", GetAllBoards200ResponseValuesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetAllBoards200ResponseValuesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAllBoards200ResponseValuesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `admins`
      if (jsonObj.get("admins") != null && !jsonObj.get("admins").isJsonNull()) {
        GetAllBoards200ResponseValuesInnerAdmins.validateJsonElement(jsonObj.get("admins"));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        GetAllBoards200ResponseValuesInnerLocation.validateJsonElement(jsonObj.get("location"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) && !jsonObj.get("self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("self").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAllBoards200ResponseValuesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAllBoards200ResponseValuesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAllBoards200ResponseValuesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAllBoards200ResponseValuesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAllBoards200ResponseValuesInner>() {
           @Override
           public void write(JsonWriter out, GetAllBoards200ResponseValuesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAllBoards200ResponseValuesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetAllBoards200ResponseValuesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetAllBoards200ResponseValuesInner
   * @throws IOException if the JSON string is invalid with respect to GetAllBoards200ResponseValuesInner
   */
  public static GetAllBoards200ResponseValuesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAllBoards200ResponseValuesInner.class);
  }

  /**
   * Convert an instance of GetAllBoards200ResponseValuesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

