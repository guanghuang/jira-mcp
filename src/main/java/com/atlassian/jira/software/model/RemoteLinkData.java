/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.RemoteLinkDataAssociationsInner;
import com.atlassian.jira.software.model.RemoteLinkStatus;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * Data related to a single Remote Link. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class RemoteLinkData {
  /**
   * The schema version used for this data.  Placeholder to support potential schema changes in the future. 
   */
  @JsonAdapter(SchemaVersionEnum.Adapter.class)
  public enum SchemaVersionEnum {
    _1_0("1.0");

    private String value;

    SchemaVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SchemaVersionEnum fromValue(String value) {
      for (SchemaVersionEnum b : SchemaVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SchemaVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SchemaVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SchemaVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SchemaVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SchemaVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  @javax.annotation.Nullable
  private SchemaVersionEnum schemaVersion = SchemaVersionEnum._1_0;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_UPDATE_SEQUENCE_NUMBER = "updateSequenceNumber";
  @SerializedName(SERIALIZED_NAME_UPDATE_SEQUENCE_NUMBER)
  @javax.annotation.Nonnull
  private Long updateSequenceNumber;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  @javax.annotation.Nonnull
  private String displayName;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nonnull
  private URI url;

  /**
   * The type of the Remote Link. The current supported types are &#39;document&#39;, &#39;alert&#39;, &#39;test&#39;, &#39;security&#39;, &#39;logFile&#39;, &#39;prototype&#39;, &#39;coverage&#39;, &#39;bugReport&#39; and &#39;other&#39; 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DOCUMENT("document"),
    
    ALERT("alert"),
    
    TEST("test"),
    
    SECURITY("security"),
    
    LOG_FILE("logFile"),
    
    PROTOTYPE("prototype"),
    
    COVERAGE("coverage"),
    
    BUG_REPORT("bugReport"),
    
    OTHER("other");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private TypeEnum type;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  @javax.annotation.Nonnull
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_ASSOCIATIONS = "associations";
  @SerializedName(SERIALIZED_NAME_ASSOCIATIONS)
  @javax.annotation.Nullable
  private List<RemoteLinkDataAssociationsInner> associations = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private RemoteLinkStatus status;

  public static final String SERIALIZED_NAME_ACTION_IDS = "actionIds";
  @SerializedName(SERIALIZED_NAME_ACTION_IDS)
  @javax.annotation.Nullable
  private List<String> actionIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTRIBUTE_MAP = "attributeMap";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_MAP)
  @javax.annotation.Nullable
  private Map<String, String> attributeMap = new HashMap<>();

  public RemoteLinkData() {
  }

  public RemoteLinkData schemaVersion(@javax.annotation.Nullable SchemaVersionEnum schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

  /**
   * The schema version used for this data.  Placeholder to support potential schema changes in the future. 
   * @return schemaVersion
   */
  @javax.annotation.Nullable
  public SchemaVersionEnum getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(@javax.annotation.Nullable SchemaVersionEnum schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


  public RemoteLinkData id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * The identifier for the Remote Link. Must be unique for a given Provider. 
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public RemoteLinkData updateSequenceNumber(@javax.annotation.Nonnull Long updateSequenceNumber) {
    this.updateSequenceNumber = updateSequenceNumber;
    return this;
  }

  /**
   * An ID used to apply an ordering to updates for this Remote Link in the case of out-of-order receipt of update requests.  It must be a monotonically increasing number. For example, epoch time could be one way to generate the &#x60;updateSequenceNumber&#x60;.  Updates for a Remote Link that is received with an &#x60;updateSqeuenceNumber&#x60; less than or equal to what is currently stored will be ignored. 
   * @return updateSequenceNumber
   */
  @javax.annotation.Nonnull
  public Long getUpdateSequenceNumber() {
    return updateSequenceNumber;
  }

  public void setUpdateSequenceNumber(@javax.annotation.Nonnull Long updateSequenceNumber) {
    this.updateSequenceNumber = updateSequenceNumber;
  }


  public RemoteLinkData displayName(@javax.annotation.Nonnull String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The human-readable name for the Remote Link.  Will be shown in the UI. 
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(@javax.annotation.Nonnull String displayName) {
    this.displayName = displayName;
  }


  public RemoteLinkData url(@javax.annotation.Nonnull URI url) {
    this.url = url;
    return this;
  }

  /**
   * The URL to this Remote Link in your system. 
   * @return url
   */
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nonnull URI url) {
    this.url = url;
  }


  public RemoteLinkData type(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the Remote Link. The current supported types are &#39;document&#39;, &#39;alert&#39;, &#39;test&#39;, &#39;security&#39;, &#39;logFile&#39;, &#39;prototype&#39;, &#39;coverage&#39;, &#39;bugReport&#39; and &#39;other&#39; 
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }


  public RemoteLinkData description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * An optional description to attach to this Remote Link.  This may be anything that makes sense in your system. 
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public RemoteLinkData lastUpdated(@javax.annotation.Nonnull OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The last-updated timestamp to present to the user as a summary of when Remote Link was last updated. 
   * @return lastUpdated
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(@javax.annotation.Nonnull OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public RemoteLinkData associations(@javax.annotation.Nullable List<RemoteLinkDataAssociationsInner> associations) {
    this.associations = associations;
    return this;
  }

  public RemoteLinkData addAssociationsItem(RemoteLinkDataAssociationsInner associationsItem) {
    if (this.associations == null) {
      this.associations = new ArrayList<>();
    }
    this.associations.add(associationsItem);
    return this;
  }

  /**
   * The entities to associate the Remote Link information with. 
   * @return associations
   */
  @javax.annotation.Nullable
  public List<RemoteLinkDataAssociationsInner> getAssociations() {
    return associations;
  }

  public void setAssociations(@javax.annotation.Nullable List<RemoteLinkDataAssociationsInner> associations) {
    this.associations = associations;
  }


  public RemoteLinkData status(@javax.annotation.Nullable RemoteLinkStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public RemoteLinkStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable RemoteLinkStatus status) {
    this.status = status;
  }


  public RemoteLinkData actionIds(@javax.annotation.Nullable List<String> actionIds) {
    this.actionIds = actionIds;
    return this;
  }

  public RemoteLinkData addActionIdsItem(String actionIdsItem) {
    if (this.actionIds == null) {
      this.actionIds = new ArrayList<>();
    }
    this.actionIds.add(actionIdsItem);
    return this;
  }

  /**
   * Optional list of actionIds. They are associated with the actions the provider is able to provide when they registered. Indicates which actions this Remote Link has.  If any actions have a templateUrl that requires string substitution, then &#x60;attributeMap&#x60; must be passed in. 
   * @return actionIds
   */
  @javax.annotation.Nullable
  public List<String> getActionIds() {
    return actionIds;
  }

  public void setActionIds(@javax.annotation.Nullable List<String> actionIds) {
    this.actionIds = actionIds;
  }


  public RemoteLinkData attributeMap(@javax.annotation.Nullable Map<String, String> attributeMap) {
    this.attributeMap = attributeMap;
    return this;
  }

  public RemoteLinkData putAttributeMapItem(String key, String attributeMapItem) {
    if (this.attributeMap == null) {
      this.attributeMap = new HashMap<>();
    }
    this.attributeMap.put(key, attributeMapItem);
    return this;
  }

  /**
   * Map of key/values (string to string mapping). This is used to build the urls for actions from the templateUrl the provider registered their available actions with. 
   * @return attributeMap
   */
  @javax.annotation.Nullable
  public Map<String, String> getAttributeMap() {
    return attributeMap;
  }

  public void setAttributeMap(@javax.annotation.Nullable Map<String, String> attributeMap) {
    this.attributeMap = attributeMap;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoteLinkData remoteLinkData = (RemoteLinkData) o;
    return Objects.equals(this.schemaVersion, remoteLinkData.schemaVersion) &&
        Objects.equals(this.id, remoteLinkData.id) &&
        Objects.equals(this.updateSequenceNumber, remoteLinkData.updateSequenceNumber) &&
        Objects.equals(this.displayName, remoteLinkData.displayName) &&
        Objects.equals(this.url, remoteLinkData.url) &&
        Objects.equals(this.type, remoteLinkData.type) &&
        Objects.equals(this.description, remoteLinkData.description) &&
        Objects.equals(this.lastUpdated, remoteLinkData.lastUpdated) &&
        Objects.equals(this.associations, remoteLinkData.associations) &&
        Objects.equals(this.status, remoteLinkData.status) &&
        Objects.equals(this.actionIds, remoteLinkData.actionIds) &&
        Objects.equals(this.attributeMap, remoteLinkData.attributeMap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaVersion, id, updateSequenceNumber, displayName, url, type, description, lastUpdated, associations, status, actionIds, attributeMap);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoteLinkData {\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    updateSequenceNumber: ").append(toIndentedString(updateSequenceNumber)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    associations: ").append(toIndentedString(associations)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    actionIds: ").append(toIndentedString(actionIds)).append("\n");
    sb.append("    attributeMap: ").append(toIndentedString(attributeMap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("schemaVersion");
    openapiFields.add("id");
    openapiFields.add("updateSequenceNumber");
    openapiFields.add("displayName");
    openapiFields.add("url");
    openapiFields.add("type");
    openapiFields.add("description");
    openapiFields.add("lastUpdated");
    openapiFields.add("associations");
    openapiFields.add("status");
    openapiFields.add("actionIds");
    openapiFields.add("attributeMap");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("updateSequenceNumber");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("lastUpdated");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RemoteLinkData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RemoteLinkData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RemoteLinkData is not found in the empty JSON string", RemoteLinkData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RemoteLinkData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RemoteLinkData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RemoteLinkData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("schemaVersion") != null && !jsonObj.get("schemaVersion").isJsonNull()) && !jsonObj.get("schemaVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaVersion").toString()));
      }
      // validate the optional field `schemaVersion`
      if (jsonObj.get("schemaVersion") != null && !jsonObj.get("schemaVersion").isJsonNull()) {
        SchemaVersionEnum.validateJsonElement(jsonObj.get("schemaVersion"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("associations") != null && !jsonObj.get("associations").isJsonNull()) {
        JsonArray jsonArrayassociations = jsonObj.getAsJsonArray("associations");
        if (jsonArrayassociations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("associations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `associations` to be an array in the JSON string but got `%s`", jsonObj.get("associations").toString()));
          }

          // validate the optional field `associations` (array)
          for (int i = 0; i < jsonArrayassociations.size(); i++) {
            RemoteLinkDataAssociationsInner.validateJsonElement(jsonArrayassociations.get(i));
          };
        }
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        RemoteLinkStatus.validateJsonElement(jsonObj.get("status"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("actionIds") != null && !jsonObj.get("actionIds").isJsonNull() && !jsonObj.get("actionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionIds` to be an array in the JSON string but got `%s`", jsonObj.get("actionIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RemoteLinkData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RemoteLinkData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RemoteLinkData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RemoteLinkData.class));

       return (TypeAdapter<T>) new TypeAdapter<RemoteLinkData>() {
           @Override
           public void write(JsonWriter out, RemoteLinkData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RemoteLinkData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RemoteLinkData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RemoteLinkData
   * @throws IOException if the JSON string is invalid with respect to RemoteLinkData
   */
  public static RemoteLinkData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RemoteLinkData.class);
  }

  /**
   * Convert an instance of RemoteLinkData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

