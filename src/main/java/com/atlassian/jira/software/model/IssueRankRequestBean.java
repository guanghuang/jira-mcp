/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * IssueRankRequestBean
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class IssueRankRequestBean {
  public static final String SERIALIZED_NAME_ISSUES = "issues";
  @SerializedName(SERIALIZED_NAME_ISSUES)
  @javax.annotation.Nullable
  private List<String> issues = new ArrayList<>();

  public static final String SERIALIZED_NAME_RANK_AFTER_ISSUE = "rankAfterIssue";
  @SerializedName(SERIALIZED_NAME_RANK_AFTER_ISSUE)
  @javax.annotation.Nullable
  private String rankAfterIssue;

  public static final String SERIALIZED_NAME_RANK_BEFORE_ISSUE = "rankBeforeIssue";
  @SerializedName(SERIALIZED_NAME_RANK_BEFORE_ISSUE)
  @javax.annotation.Nullable
  private String rankBeforeIssue;

  public static final String SERIALIZED_NAME_RANK_CUSTOM_FIELD_ID = "rankCustomFieldId";
  @SerializedName(SERIALIZED_NAME_RANK_CUSTOM_FIELD_ID)
  @javax.annotation.Nullable
  private Long rankCustomFieldId;

  public IssueRankRequestBean() {
  }

  public IssueRankRequestBean issues(@javax.annotation.Nullable List<String> issues) {
    this.issues = issues;
    return this;
  }

  public IssueRankRequestBean addIssuesItem(String issuesItem) {
    if (this.issues == null) {
      this.issues = new ArrayList<>();
    }
    this.issues.add(issuesItem);
    return this;
  }

  /**
   * Get issues
   * @return issues
   */
  @javax.annotation.Nullable
  public List<String> getIssues() {
    return issues;
  }

  public void setIssues(@javax.annotation.Nullable List<String> issues) {
    this.issues = issues;
  }


  public IssueRankRequestBean rankAfterIssue(@javax.annotation.Nullable String rankAfterIssue) {
    this.rankAfterIssue = rankAfterIssue;
    return this;
  }

  /**
   * Get rankAfterIssue
   * @return rankAfterIssue
   */
  @javax.annotation.Nullable
  public String getRankAfterIssue() {
    return rankAfterIssue;
  }

  public void setRankAfterIssue(@javax.annotation.Nullable String rankAfterIssue) {
    this.rankAfterIssue = rankAfterIssue;
  }


  public IssueRankRequestBean rankBeforeIssue(@javax.annotation.Nullable String rankBeforeIssue) {
    this.rankBeforeIssue = rankBeforeIssue;
    return this;
  }

  /**
   * Get rankBeforeIssue
   * @return rankBeforeIssue
   */
  @javax.annotation.Nullable
  public String getRankBeforeIssue() {
    return rankBeforeIssue;
  }

  public void setRankBeforeIssue(@javax.annotation.Nullable String rankBeforeIssue) {
    this.rankBeforeIssue = rankBeforeIssue;
  }


  public IssueRankRequestBean rankCustomFieldId(@javax.annotation.Nullable Long rankCustomFieldId) {
    this.rankCustomFieldId = rankCustomFieldId;
    return this;
  }

  /**
   * Get rankCustomFieldId
   * @return rankCustomFieldId
   */
  @javax.annotation.Nullable
  public Long getRankCustomFieldId() {
    return rankCustomFieldId;
  }

  public void setRankCustomFieldId(@javax.annotation.Nullable Long rankCustomFieldId) {
    this.rankCustomFieldId = rankCustomFieldId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueRankRequestBean issueRankRequestBean = (IssueRankRequestBean) o;
    return Objects.equals(this.issues, issueRankRequestBean.issues) &&
        Objects.equals(this.rankAfterIssue, issueRankRequestBean.rankAfterIssue) &&
        Objects.equals(this.rankBeforeIssue, issueRankRequestBean.rankBeforeIssue) &&
        Objects.equals(this.rankCustomFieldId, issueRankRequestBean.rankCustomFieldId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issues, rankAfterIssue, rankBeforeIssue, rankCustomFieldId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueRankRequestBean {\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("    rankAfterIssue: ").append(toIndentedString(rankAfterIssue)).append("\n");
    sb.append("    rankBeforeIssue: ").append(toIndentedString(rankBeforeIssue)).append("\n");
    sb.append("    rankCustomFieldId: ").append(toIndentedString(rankCustomFieldId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("issues");
    openapiFields.add("rankAfterIssue");
    openapiFields.add("rankBeforeIssue");
    openapiFields.add("rankCustomFieldId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IssueRankRequestBean
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IssueRankRequestBean.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssueRankRequestBean is not found in the empty JSON string", IssueRankRequestBean.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IssueRankRequestBean.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IssueRankRequestBean` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("issues") != null && !jsonObj.get("issues").isJsonNull() && !jsonObj.get("issues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `issues` to be an array in the JSON string but got `%s`", jsonObj.get("issues").toString()));
      }
      if ((jsonObj.get("rankAfterIssue") != null && !jsonObj.get("rankAfterIssue").isJsonNull()) && !jsonObj.get("rankAfterIssue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rankAfterIssue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rankAfterIssue").toString()));
      }
      if ((jsonObj.get("rankBeforeIssue") != null && !jsonObj.get("rankBeforeIssue").isJsonNull()) && !jsonObj.get("rankBeforeIssue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rankBeforeIssue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rankBeforeIssue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssueRankRequestBean.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssueRankRequestBean' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssueRankRequestBean> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssueRankRequestBean.class));

       return (TypeAdapter<T>) new TypeAdapter<IssueRankRequestBean>() {
           @Override
           public void write(JsonWriter out, IssueRankRequestBean value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IssueRankRequestBean read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IssueRankRequestBean given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IssueRankRequestBean
   * @throws IOException if the JSON string is invalid with respect to IssueRankRequestBean
   */
  public static IssueRankRequestBean fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssueRankRequestBean.class);
  }

  /**
   * Convert an instance of IssueRankRequestBean to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

