/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.IssueBeanChangelog;
import com.atlassian.jira.software.model.IssueBeanEditmeta;
import com.atlassian.jira.software.model.IssueBeanFieldsToInclude;
import com.atlassian.jira.software.model.IssueBeanSchemaValue;
import com.atlassian.jira.software.model.IssueBeanTransitionsInner;
import com.atlassian.jira.software.model.Operations;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * Details about an issue.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class IssueBean {
  public static final String SERIALIZED_NAME_CHANGELOG = "changelog";
  @SerializedName(SERIALIZED_NAME_CHANGELOG)
  @javax.annotation.Nullable
  private IssueBeanChangelog changelog;

  public static final String SERIALIZED_NAME_EDITMETA = "editmeta";
  @SerializedName(SERIALIZED_NAME_EDITMETA)
  @javax.annotation.Nullable
  private IssueBeanEditmeta editmeta;

  public static final String SERIALIZED_NAME_EXPAND = "expand";
  @SerializedName(SERIALIZED_NAME_EXPAND)
  @javax.annotation.Nullable
  private String expand;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  @javax.annotation.Nullable
  private Map<String, Object> fields = new HashMap<>();

  public static final String SERIALIZED_NAME_FIELDS_TO_INCLUDE = "fieldsToInclude";
  @SerializedName(SERIALIZED_NAME_FIELDS_TO_INCLUDE)
  @javax.annotation.Nullable
  private IssueBeanFieldsToInclude fieldsToInclude;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nullable
  private String key;

  public static final String SERIALIZED_NAME_NAMES = "names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  @javax.annotation.Nullable
  private Map<String, String> names = new HashMap<>();

  public static final String SERIALIZED_NAME_OPERATIONS = "operations";
  @SerializedName(SERIALIZED_NAME_OPERATIONS)
  @javax.annotation.Nullable
  private Operations operations;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  @javax.annotation.Nullable
  private Map<String, Object> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_RENDERED_FIELDS = "renderedFields";
  @SerializedName(SERIALIZED_NAME_RENDERED_FIELDS)
  @javax.annotation.Nullable
  private Map<String, Object> renderedFields = new HashMap<>();

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  @javax.annotation.Nullable
  private Map<String, IssueBeanSchemaValue> schema = new HashMap<>();

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  @javax.annotation.Nullable
  private URI self;

  public static final String SERIALIZED_NAME_TRANSITIONS = "transitions";
  @SerializedName(SERIALIZED_NAME_TRANSITIONS)
  @javax.annotation.Nullable
  private List<IssueBeanTransitionsInner> transitions = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSIONED_REPRESENTATIONS = "versionedRepresentations";
  @SerializedName(SERIALIZED_NAME_VERSIONED_REPRESENTATIONS)
  @javax.annotation.Nullable
  private Map<String, Map<String, Object>> versionedRepresentations = new HashMap<>();

  public IssueBean() {
  }

  public IssueBean(
     String expand, 
     String id, 
     String key, 
     Map<String, String> names, 
     Operations operations, 
     Map<String, Object> properties, 
     Map<String, Object> renderedFields, 
     Map<String, IssueBeanSchemaValue> schema, 
     URI self, 
     List<IssueBeanTransitionsInner> transitions, 
     Map<String, Map<String, Object>> versionedRepresentations
  ) {
    this();
    this.expand = expand;
    this.id = id;
    this.key = key;
    this.names = names;
    this.operations = operations;
    this.properties = properties;
    this.renderedFields = renderedFields;
    this.schema = schema;
    this.self = self;
    this.transitions = transitions;
    this.versionedRepresentations = versionedRepresentations;
  }

  public IssueBean changelog(@javax.annotation.Nullable IssueBeanChangelog changelog) {
    this.changelog = changelog;
    return this;
  }

  /**
   * Get changelog
   * @return changelog
   */
  @javax.annotation.Nullable
  public IssueBeanChangelog getChangelog() {
    return changelog;
  }

  public void setChangelog(@javax.annotation.Nullable IssueBeanChangelog changelog) {
    this.changelog = changelog;
  }


  public IssueBean editmeta(@javax.annotation.Nullable IssueBeanEditmeta editmeta) {
    this.editmeta = editmeta;
    return this;
  }

  /**
   * Get editmeta
   * @return editmeta
   */
  @javax.annotation.Nullable
  public IssueBeanEditmeta getEditmeta() {
    return editmeta;
  }

  public void setEditmeta(@javax.annotation.Nullable IssueBeanEditmeta editmeta) {
    this.editmeta = editmeta;
  }


  /**
   * Expand options that include additional issue details in the response.
   * @return expand
   */
  @javax.annotation.Nullable
  public String getExpand() {
    return expand;
  }



  public IssueBean fields(@javax.annotation.Nullable Map<String, Object> fields) {
    this.fields = fields;
    return this;
  }

  public IssueBean putFieldsItem(String key, Object fieldsItem) {
    if (this.fields == null) {
      this.fields = new HashMap<>();
    }
    this.fields.put(key, fieldsItem);
    return this;
  }

  /**
   * Get fields
   * @return fields
   */
  @javax.annotation.Nullable
  public Map<String, Object> getFields() {
    return fields;
  }

  public void setFields(@javax.annotation.Nullable Map<String, Object> fields) {
    this.fields = fields;
  }


  public IssueBean fieldsToInclude(@javax.annotation.Nullable IssueBeanFieldsToInclude fieldsToInclude) {
    this.fieldsToInclude = fieldsToInclude;
    return this;
  }

  /**
   * Get fieldsToInclude
   * @return fieldsToInclude
   */
  @javax.annotation.Nullable
  public IssueBeanFieldsToInclude getFieldsToInclude() {
    return fieldsToInclude;
  }

  public void setFieldsToInclude(@javax.annotation.Nullable IssueBeanFieldsToInclude fieldsToInclude) {
    this.fieldsToInclude = fieldsToInclude;
  }


  /**
   * The ID of the issue.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * The key of the issue.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }



  /**
   * The ID and name of each field present on the issue.
   * @return names
   */
  @javax.annotation.Nullable
  public Map<String, String> getNames() {
    return names;
  }



  /**
   * The operations that can be performed on the issue.
   * @return operations
   */
  @javax.annotation.Nullable
  public Operations getOperations() {
    return operations;
  }



  /**
   * Details of the issue properties identified in the request.
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, Object> getProperties() {
    return properties;
  }



  /**
   * The rendered value of each field present on the issue.
   * @return renderedFields
   */
  @javax.annotation.Nullable
  public Map<String, Object> getRenderedFields() {
    return renderedFields;
  }



  /**
   * The schema describing each field present on the issue.
   * @return schema
   */
  @javax.annotation.Nullable
  public Map<String, IssueBeanSchemaValue> getSchema() {
    return schema;
  }



  /**
   * The URL of the issue details.
   * @return self
   */
  @javax.annotation.Nullable
  public URI getSelf() {
    return self;
  }



  /**
   * The transitions that can be performed on the issue.
   * @return transitions
   */
  @javax.annotation.Nullable
  public List<IssueBeanTransitionsInner> getTransitions() {
    return transitions;
  }



  /**
   * The versions of each field on the issue.
   * @return versionedRepresentations
   */
  @javax.annotation.Nullable
  public Map<String, Map<String, Object>> getVersionedRepresentations() {
    return versionedRepresentations;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueBean issueBean = (IssueBean) o;
    return Objects.equals(this.changelog, issueBean.changelog) &&
        Objects.equals(this.editmeta, issueBean.editmeta) &&
        Objects.equals(this.expand, issueBean.expand) &&
        Objects.equals(this.fields, issueBean.fields) &&
        Objects.equals(this.fieldsToInclude, issueBean.fieldsToInclude) &&
        Objects.equals(this.id, issueBean.id) &&
        Objects.equals(this.key, issueBean.key) &&
        Objects.equals(this.names, issueBean.names) &&
        Objects.equals(this.operations, issueBean.operations) &&
        Objects.equals(this.properties, issueBean.properties) &&
        Objects.equals(this.renderedFields, issueBean.renderedFields) &&
        Objects.equals(this.schema, issueBean.schema) &&
        Objects.equals(this.self, issueBean.self) &&
        Objects.equals(this.transitions, issueBean.transitions) &&
        Objects.equals(this.versionedRepresentations, issueBean.versionedRepresentations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changelog, editmeta, expand, fields, fieldsToInclude, id, key, names, operations, properties, renderedFields, schema, self, transitions, versionedRepresentations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueBean {\n");
    sb.append("    changelog: ").append(toIndentedString(changelog)).append("\n");
    sb.append("    editmeta: ").append(toIndentedString(editmeta)).append("\n");
    sb.append("    expand: ").append(toIndentedString(expand)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    fieldsToInclude: ").append(toIndentedString(fieldsToInclude)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    renderedFields: ").append(toIndentedString(renderedFields)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    transitions: ").append(toIndentedString(transitions)).append("\n");
    sb.append("    versionedRepresentations: ").append(toIndentedString(versionedRepresentations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changelog");
    openapiFields.add("editmeta");
    openapiFields.add("expand");
    openapiFields.add("fields");
    openapiFields.add("fieldsToInclude");
    openapiFields.add("id");
    openapiFields.add("key");
    openapiFields.add("names");
    openapiFields.add("operations");
    openapiFields.add("properties");
    openapiFields.add("renderedFields");
    openapiFields.add("schema");
    openapiFields.add("self");
    openapiFields.add("transitions");
    openapiFields.add("versionedRepresentations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IssueBean
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IssueBean.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssueBean is not found in the empty JSON string", IssueBean.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IssueBean.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IssueBean` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `changelog`
      if (jsonObj.get("changelog") != null && !jsonObj.get("changelog").isJsonNull()) {
        IssueBeanChangelog.validateJsonElement(jsonObj.get("changelog"));
      }
      // validate the optional field `editmeta`
      if (jsonObj.get("editmeta") != null && !jsonObj.get("editmeta").isJsonNull()) {
        IssueBeanEditmeta.validateJsonElement(jsonObj.get("editmeta"));
      }
      if ((jsonObj.get("expand") != null && !jsonObj.get("expand").isJsonNull()) && !jsonObj.get("expand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expand").toString()));
      }
      // validate the optional field `fieldsToInclude`
      if (jsonObj.get("fieldsToInclude") != null && !jsonObj.get("fieldsToInclude").isJsonNull()) {
        IssueBeanFieldsToInclude.validateJsonElement(jsonObj.get("fieldsToInclude"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) && !jsonObj.get("self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("self").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("transitions") != null && !jsonObj.get("transitions").isJsonNull() && !jsonObj.get("transitions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transitions` to be an array in the JSON string but got `%s`", jsonObj.get("transitions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssueBean.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssueBean' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssueBean> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssueBean.class));

       return (TypeAdapter<T>) new TypeAdapter<IssueBean>() {
           @Override
           public void write(JsonWriter out, IssueBean value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IssueBean read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IssueBean given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IssueBean
   * @throws IOException if the JSON string is invalid with respect to IssueBean
   */
  public static IssueBean fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssueBean.class);
  }

  /**
   * Convert an instance of IssueBean to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

