/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.RemoteLinkDataAssociationsInner;
import com.atlassian.jira.software.model.SubmitRemoteLinks202ResponseRejectedRemoteLinksValueInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * The result of a successful &#x60;submitRemoteLinks&#x60; request. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class SubmitRemoteLinks202Response {
  public static final String SERIALIZED_NAME_ACCEPTED_REMOTE_LINKS = "acceptedRemoteLinks";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_REMOTE_LINKS)
  @javax.annotation.Nullable
  private List<String> acceptedRemoteLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_REJECTED_REMOTE_LINKS = "rejectedRemoteLinks";
  @SerializedName(SERIALIZED_NAME_REJECTED_REMOTE_LINKS)
  @javax.annotation.Nullable
  private Map<String, List<SubmitRemoteLinks202ResponseRejectedRemoteLinksValueInner>> rejectedRemoteLinks = new HashMap<>();

  public static final String SERIALIZED_NAME_UNKNOWN_ASSOCIATIONS = "unknownAssociations";
  @SerializedName(SERIALIZED_NAME_UNKNOWN_ASSOCIATIONS)
  @javax.annotation.Nullable
  private List<RemoteLinkDataAssociationsInner> unknownAssociations = new ArrayList<>();

  public SubmitRemoteLinks202Response() {
  }

  public SubmitRemoteLinks202Response acceptedRemoteLinks(@javax.annotation.Nullable List<String> acceptedRemoteLinks) {
    this.acceptedRemoteLinks = acceptedRemoteLinks;
    return this;
  }

  public SubmitRemoteLinks202Response addAcceptedRemoteLinksItem(String acceptedRemoteLinksItem) {
    if (this.acceptedRemoteLinks == null) {
      this.acceptedRemoteLinks = new ArrayList<>();
    }
    this.acceptedRemoteLinks.add(acceptedRemoteLinksItem);
    return this;
  }

  /**
   * The IDs of Remote Links that have been accepted for submission.  A Remote Link may be rejected if it was only associated with unknown issue keys, unknown service IDs, or if the submitted data for that Remote Link does not match the required schema.  Note that a Remote Link that isn&#39;t updated due to it&#39;s &#x60;updateSequenceNumber&#x60; being out of order is not considered a failed submission. 
   * @return acceptedRemoteLinks
   */
  @javax.annotation.Nullable
  public List<String> getAcceptedRemoteLinks() {
    return acceptedRemoteLinks;
  }

  public void setAcceptedRemoteLinks(@javax.annotation.Nullable List<String> acceptedRemoteLinks) {
    this.acceptedRemoteLinks = acceptedRemoteLinks;
  }


  public SubmitRemoteLinks202Response rejectedRemoteLinks(@javax.annotation.Nullable Map<String, List<SubmitRemoteLinks202ResponseRejectedRemoteLinksValueInner>> rejectedRemoteLinks) {
    this.rejectedRemoteLinks = rejectedRemoteLinks;
    return this;
  }

  public SubmitRemoteLinks202Response putRejectedRemoteLinksItem(String key, List<SubmitRemoteLinks202ResponseRejectedRemoteLinksValueInner> rejectedRemoteLinksItem) {
    if (this.rejectedRemoteLinks == null) {
      this.rejectedRemoteLinks = new HashMap<>();
    }
    this.rejectedRemoteLinks.put(key, rejectedRemoteLinksItem);
    return this;
  }

  /**
   * Details of Remote Links that have not been accepted for submission, usually due to a problem with the request data.  A Remote Link may be rejected if it was only associated with unknown issue keys, unknown service IDs, or if the submitted data for the Remote Link does not match the required schema.  The object (if present) will be keyed by Remote Link ID and include any errors associated with that Remote Link that have prevented it being submitted. 
   * @return rejectedRemoteLinks
   */
  @javax.annotation.Nullable
  public Map<String, List<SubmitRemoteLinks202ResponseRejectedRemoteLinksValueInner>> getRejectedRemoteLinks() {
    return rejectedRemoteLinks;
  }

  public void setRejectedRemoteLinks(@javax.annotation.Nullable Map<String, List<SubmitRemoteLinks202ResponseRejectedRemoteLinksValueInner>> rejectedRemoteLinks) {
    this.rejectedRemoteLinks = rejectedRemoteLinks;
  }


  public SubmitRemoteLinks202Response unknownAssociations(@javax.annotation.Nullable List<RemoteLinkDataAssociationsInner> unknownAssociations) {
    this.unknownAssociations = unknownAssociations;
    return this;
  }

  public SubmitRemoteLinks202Response addUnknownAssociationsItem(RemoteLinkDataAssociationsInner unknownAssociationsItem) {
    if (this.unknownAssociations == null) {
      this.unknownAssociations = new ArrayList<>();
    }
    this.unknownAssociations.add(unknownAssociationsItem);
    return this;
  }

  /**
   * Issue keys or services IDs or keys that are not known on this Jira instance (if any). 
   * @return unknownAssociations
   */
  @javax.annotation.Nullable
  public List<RemoteLinkDataAssociationsInner> getUnknownAssociations() {
    return unknownAssociations;
  }

  public void setUnknownAssociations(@javax.annotation.Nullable List<RemoteLinkDataAssociationsInner> unknownAssociations) {
    this.unknownAssociations = unknownAssociations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubmitRemoteLinks202Response submitRemoteLinks202Response = (SubmitRemoteLinks202Response) o;
    return Objects.equals(this.acceptedRemoteLinks, submitRemoteLinks202Response.acceptedRemoteLinks) &&
        Objects.equals(this.rejectedRemoteLinks, submitRemoteLinks202Response.rejectedRemoteLinks) &&
        Objects.equals(this.unknownAssociations, submitRemoteLinks202Response.unknownAssociations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptedRemoteLinks, rejectedRemoteLinks, unknownAssociations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubmitRemoteLinks202Response {\n");
    sb.append("    acceptedRemoteLinks: ").append(toIndentedString(acceptedRemoteLinks)).append("\n");
    sb.append("    rejectedRemoteLinks: ").append(toIndentedString(rejectedRemoteLinks)).append("\n");
    sb.append("    unknownAssociations: ").append(toIndentedString(unknownAssociations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceptedRemoteLinks");
    openapiFields.add("rejectedRemoteLinks");
    openapiFields.add("unknownAssociations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubmitRemoteLinks202Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubmitRemoteLinks202Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubmitRemoteLinks202Response is not found in the empty JSON string", SubmitRemoteLinks202Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubmitRemoteLinks202Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubmitRemoteLinks202Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("acceptedRemoteLinks") != null && !jsonObj.get("acceptedRemoteLinks").isJsonNull() && !jsonObj.get("acceptedRemoteLinks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `acceptedRemoteLinks` to be an array in the JSON string but got `%s`", jsonObj.get("acceptedRemoteLinks").toString()));
      }
      if (jsonObj.get("unknownAssociations") != null && !jsonObj.get("unknownAssociations").isJsonNull()) {
        JsonArray jsonArrayunknownAssociations = jsonObj.getAsJsonArray("unknownAssociations");
        if (jsonArrayunknownAssociations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unknownAssociations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unknownAssociations` to be an array in the JSON string but got `%s`", jsonObj.get("unknownAssociations").toString()));
          }

          // validate the optional field `unknownAssociations` (array)
          for (int i = 0; i < jsonArrayunknownAssociations.size(); i++) {
            RemoteLinkDataAssociationsInner.validateJsonElement(jsonArrayunknownAssociations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubmitRemoteLinks202Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubmitRemoteLinks202Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubmitRemoteLinks202Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubmitRemoteLinks202Response.class));

       return (TypeAdapter<T>) new TypeAdapter<SubmitRemoteLinks202Response>() {
           @Override
           public void write(JsonWriter out, SubmitRemoteLinks202Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubmitRemoteLinks202Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubmitRemoteLinks202Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubmitRemoteLinks202Response
   * @throws IOException if the JSON string is invalid with respect to SubmitRemoteLinks202Response
   */
  public static SubmitRemoteLinks202Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubmitRemoteLinks202Response.class);
  }

  /**
   * Convert an instance of SubmitRemoteLinks202Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

