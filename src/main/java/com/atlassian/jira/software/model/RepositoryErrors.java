/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.EntityError;
import com.atlassian.jira.software.model.ErrorMessage;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * Represents errors related to a particular repository and its entities
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class RepositoryErrors {
  public static final String SERIALIZED_NAME_ERROR_MESSAGES = "errorMessages";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGES)
  @javax.annotation.Nullable
  private List<ErrorMessage> errorMessages = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMITS = "commits";
  @SerializedName(SERIALIZED_NAME_COMMITS)
  @javax.annotation.Nullable
  private List<EntityError> commits = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRANCHES = "branches";
  @SerializedName(SERIALIZED_NAME_BRANCHES)
  @javax.annotation.Nullable
  private List<EntityError> branches = new ArrayList<>();

  public static final String SERIALIZED_NAME_PULL_REQUESTS = "pullRequests";
  @SerializedName(SERIALIZED_NAME_PULL_REQUESTS)
  @javax.annotation.Nullable
  private List<EntityError> pullRequests = new ArrayList<>();

  public RepositoryErrors() {
  }

  public RepositoryErrors errorMessages(@javax.annotation.Nullable List<ErrorMessage> errorMessages) {
    this.errorMessages = errorMessages;
    return this;
  }

  public RepositoryErrors addErrorMessagesItem(ErrorMessage errorMessagesItem) {
    if (this.errorMessages == null) {
      this.errorMessages = new ArrayList<>();
    }
    this.errorMessages.add(errorMessagesItem);
    return this;
  }

  /**
   * Repository errors
   * @return errorMessages
   */
  @javax.annotation.Nullable
  public List<ErrorMessage> getErrorMessages() {
    return errorMessages;
  }

  public void setErrorMessages(@javax.annotation.Nullable List<ErrorMessage> errorMessages) {
    this.errorMessages = errorMessages;
  }


  public RepositoryErrors commits(@javax.annotation.Nullable List<EntityError> commits) {
    this.commits = commits;
    return this;
  }

  public RepositoryErrors addCommitsItem(EntityError commitsItem) {
    if (this.commits == null) {
      this.commits = new ArrayList<>();
    }
    this.commits.add(commitsItem);
    return this;
  }

  /**
   * Commits errors
   * @return commits
   */
  @javax.annotation.Nullable
  public List<EntityError> getCommits() {
    return commits;
  }

  public void setCommits(@javax.annotation.Nullable List<EntityError> commits) {
    this.commits = commits;
  }


  public RepositoryErrors branches(@javax.annotation.Nullable List<EntityError> branches) {
    this.branches = branches;
    return this;
  }

  public RepositoryErrors addBranchesItem(EntityError branchesItem) {
    if (this.branches == null) {
      this.branches = new ArrayList<>();
    }
    this.branches.add(branchesItem);
    return this;
  }

  /**
   * Branches errors
   * @return branches
   */
  @javax.annotation.Nullable
  public List<EntityError> getBranches() {
    return branches;
  }

  public void setBranches(@javax.annotation.Nullable List<EntityError> branches) {
    this.branches = branches;
  }


  public RepositoryErrors pullRequests(@javax.annotation.Nullable List<EntityError> pullRequests) {
    this.pullRequests = pullRequests;
    return this;
  }

  public RepositoryErrors addPullRequestsItem(EntityError pullRequestsItem) {
    if (this.pullRequests == null) {
      this.pullRequests = new ArrayList<>();
    }
    this.pullRequests.add(pullRequestsItem);
    return this;
  }

  /**
   * Pull requests errors
   * @return pullRequests
   */
  @javax.annotation.Nullable
  public List<EntityError> getPullRequests() {
    return pullRequests;
  }

  public void setPullRequests(@javax.annotation.Nullable List<EntityError> pullRequests) {
    this.pullRequests = pullRequests;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepositoryErrors repositoryErrors = (RepositoryErrors) o;
    return Objects.equals(this.errorMessages, repositoryErrors.errorMessages) &&
        Objects.equals(this.commits, repositoryErrors.commits) &&
        Objects.equals(this.branches, repositoryErrors.branches) &&
        Objects.equals(this.pullRequests, repositoryErrors.pullRequests);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorMessages, commits, branches, pullRequests);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepositoryErrors {\n");
    sb.append("    errorMessages: ").append(toIndentedString(errorMessages)).append("\n");
    sb.append("    commits: ").append(toIndentedString(commits)).append("\n");
    sb.append("    branches: ").append(toIndentedString(branches)).append("\n");
    sb.append("    pullRequests: ").append(toIndentedString(pullRequests)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errorMessages");
    openapiFields.add("commits");
    openapiFields.add("branches");
    openapiFields.add("pullRequests");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RepositoryErrors
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RepositoryErrors.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepositoryErrors is not found in the empty JSON string", RepositoryErrors.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RepositoryErrors.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepositoryErrors` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("errorMessages") != null && !jsonObj.get("errorMessages").isJsonNull()) {
        JsonArray jsonArrayerrorMessages = jsonObj.getAsJsonArray("errorMessages");
        if (jsonArrayerrorMessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errorMessages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errorMessages` to be an array in the JSON string but got `%s`", jsonObj.get("errorMessages").toString()));
          }

          // validate the optional field `errorMessages` (array)
          for (int i = 0; i < jsonArrayerrorMessages.size(); i++) {
            ErrorMessage.validateJsonElement(jsonArrayerrorMessages.get(i));
          };
        }
      }
      if (jsonObj.get("commits") != null && !jsonObj.get("commits").isJsonNull()) {
        JsonArray jsonArraycommits = jsonObj.getAsJsonArray("commits");
        if (jsonArraycommits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("commits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `commits` to be an array in the JSON string but got `%s`", jsonObj.get("commits").toString()));
          }

          // validate the optional field `commits` (array)
          for (int i = 0; i < jsonArraycommits.size(); i++) {
            EntityError.validateJsonElement(jsonArraycommits.get(i));
          };
        }
      }
      if (jsonObj.get("branches") != null && !jsonObj.get("branches").isJsonNull()) {
        JsonArray jsonArraybranches = jsonObj.getAsJsonArray("branches");
        if (jsonArraybranches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("branches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `branches` to be an array in the JSON string but got `%s`", jsonObj.get("branches").toString()));
          }

          // validate the optional field `branches` (array)
          for (int i = 0; i < jsonArraybranches.size(); i++) {
            EntityError.validateJsonElement(jsonArraybranches.get(i));
          };
        }
      }
      if (jsonObj.get("pullRequests") != null && !jsonObj.get("pullRequests").isJsonNull()) {
        JsonArray jsonArraypullRequests = jsonObj.getAsJsonArray("pullRequests");
        if (jsonArraypullRequests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pullRequests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pullRequests` to be an array in the JSON string but got `%s`", jsonObj.get("pullRequests").toString()));
          }

          // validate the optional field `pullRequests` (array)
          for (int i = 0; i < jsonArraypullRequests.size(); i++) {
            EntityError.validateJsonElement(jsonArraypullRequests.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepositoryErrors.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepositoryErrors' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepositoryErrors> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepositoryErrors.class));

       return (TypeAdapter<T>) new TypeAdapter<RepositoryErrors>() {
           @Override
           public void write(JsonWriter out, RepositoryErrors value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepositoryErrors read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RepositoryErrors given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RepositoryErrors
   * @throws IOException if the JSON string is invalid with respect to RepositoryErrors
   */
  public static RepositoryErrors fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepositoryErrors.class);
  }

  /**
   * Convert an instance of RepositoryErrors to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

