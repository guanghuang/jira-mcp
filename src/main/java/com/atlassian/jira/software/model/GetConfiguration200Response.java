/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.CreateBoardRequestLocation;
import com.atlassian.jira.software.model.GetConfiguration200ResponseColumnConfig;
import com.atlassian.jira.software.model.GetConfiguration200ResponseColumnConfigColumnsInnerStatusesInner;
import com.atlassian.jira.software.model.GetConfiguration200ResponseEstimation;
import com.atlassian.jira.software.model.GetConfiguration200ResponseRanking;
import com.atlassian.jira.software.model.GetConfiguration200ResponseSubQuery;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * GetConfiguration200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class GetConfiguration200Response {
  public static final String SERIALIZED_NAME_COLUMN_CONFIG = "columnConfig";
  @SerializedName(SERIALIZED_NAME_COLUMN_CONFIG)
  @javax.annotation.Nullable
  private GetConfiguration200ResponseColumnConfig columnConfig;

  public static final String SERIALIZED_NAME_ESTIMATION = "estimation";
  @SerializedName(SERIALIZED_NAME_ESTIMATION)
  @javax.annotation.Nullable
  private GetConfiguration200ResponseEstimation estimation;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  @javax.annotation.Nullable
  private GetConfiguration200ResponseColumnConfigColumnsInnerStatusesInner filter;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Long id;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  @javax.annotation.Nullable
  private CreateBoardRequestLocation location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_RANKING = "ranking";
  @SerializedName(SERIALIZED_NAME_RANKING)
  @javax.annotation.Nullable
  private GetConfiguration200ResponseRanking ranking;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  @javax.annotation.Nullable
  private URI self;

  public static final String SERIALIZED_NAME_SUB_QUERY = "subQuery";
  @SerializedName(SERIALIZED_NAME_SUB_QUERY)
  @javax.annotation.Nullable
  private GetConfiguration200ResponseSubQuery subQuery;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public GetConfiguration200Response() {
  }

  public GetConfiguration200Response columnConfig(@javax.annotation.Nullable GetConfiguration200ResponseColumnConfig columnConfig) {
    this.columnConfig = columnConfig;
    return this;
  }

  /**
   * Get columnConfig
   * @return columnConfig
   */
  @javax.annotation.Nullable
  public GetConfiguration200ResponseColumnConfig getColumnConfig() {
    return columnConfig;
  }

  public void setColumnConfig(@javax.annotation.Nullable GetConfiguration200ResponseColumnConfig columnConfig) {
    this.columnConfig = columnConfig;
  }


  public GetConfiguration200Response estimation(@javax.annotation.Nullable GetConfiguration200ResponseEstimation estimation) {
    this.estimation = estimation;
    return this;
  }

  /**
   * Get estimation
   * @return estimation
   */
  @javax.annotation.Nullable
  public GetConfiguration200ResponseEstimation getEstimation() {
    return estimation;
  }

  public void setEstimation(@javax.annotation.Nullable GetConfiguration200ResponseEstimation estimation) {
    this.estimation = estimation;
  }


  public GetConfiguration200Response filter(@javax.annotation.Nullable GetConfiguration200ResponseColumnConfigColumnsInnerStatusesInner filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public GetConfiguration200ResponseColumnConfigColumnsInnerStatusesInner getFilter() {
    return filter;
  }

  public void setFilter(@javax.annotation.Nullable GetConfiguration200ResponseColumnConfigColumnsInnerStatusesInner filter) {
    this.filter = filter;
  }


  public GetConfiguration200Response id(@javax.annotation.Nullable Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Long id) {
    this.id = id;
  }


  public GetConfiguration200Response location(@javax.annotation.Nullable CreateBoardRequestLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public CreateBoardRequestLocation getLocation() {
    return location;
  }

  public void setLocation(@javax.annotation.Nullable CreateBoardRequestLocation location) {
    this.location = location;
  }


  public GetConfiguration200Response name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public GetConfiguration200Response ranking(@javax.annotation.Nullable GetConfiguration200ResponseRanking ranking) {
    this.ranking = ranking;
    return this;
  }

  /**
   * Get ranking
   * @return ranking
   */
  @javax.annotation.Nullable
  public GetConfiguration200ResponseRanking getRanking() {
    return ranking;
  }

  public void setRanking(@javax.annotation.Nullable GetConfiguration200ResponseRanking ranking) {
    this.ranking = ranking;
  }


  public GetConfiguration200Response self(@javax.annotation.Nullable URI self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public URI getSelf() {
    return self;
  }

  public void setSelf(@javax.annotation.Nullable URI self) {
    this.self = self;
  }


  public GetConfiguration200Response subQuery(@javax.annotation.Nullable GetConfiguration200ResponseSubQuery subQuery) {
    this.subQuery = subQuery;
    return this;
  }

  /**
   * Get subQuery
   * @return subQuery
   */
  @javax.annotation.Nullable
  public GetConfiguration200ResponseSubQuery getSubQuery() {
    return subQuery;
  }

  public void setSubQuery(@javax.annotation.Nullable GetConfiguration200ResponseSubQuery subQuery) {
    this.subQuery = subQuery;
  }


  public GetConfiguration200Response type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetConfiguration200Response getConfiguration200Response = (GetConfiguration200Response) o;
    return Objects.equals(this.columnConfig, getConfiguration200Response.columnConfig) &&
        Objects.equals(this.estimation, getConfiguration200Response.estimation) &&
        Objects.equals(this.filter, getConfiguration200Response.filter) &&
        Objects.equals(this.id, getConfiguration200Response.id) &&
        Objects.equals(this.location, getConfiguration200Response.location) &&
        Objects.equals(this.name, getConfiguration200Response.name) &&
        Objects.equals(this.ranking, getConfiguration200Response.ranking) &&
        Objects.equals(this.self, getConfiguration200Response.self) &&
        Objects.equals(this.subQuery, getConfiguration200Response.subQuery) &&
        Objects.equals(this.type, getConfiguration200Response.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnConfig, estimation, filter, id, location, name, ranking, self, subQuery, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetConfiguration200Response {\n");
    sb.append("    columnConfig: ").append(toIndentedString(columnConfig)).append("\n");
    sb.append("    estimation: ").append(toIndentedString(estimation)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ranking: ").append(toIndentedString(ranking)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    subQuery: ").append(toIndentedString(subQuery)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columnConfig");
    openapiFields.add("estimation");
    openapiFields.add("filter");
    openapiFields.add("id");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("ranking");
    openapiFields.add("self");
    openapiFields.add("subQuery");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetConfiguration200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetConfiguration200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetConfiguration200Response is not found in the empty JSON string", GetConfiguration200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetConfiguration200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetConfiguration200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `columnConfig`
      if (jsonObj.get("columnConfig") != null && !jsonObj.get("columnConfig").isJsonNull()) {
        GetConfiguration200ResponseColumnConfig.validateJsonElement(jsonObj.get("columnConfig"));
      }
      // validate the optional field `estimation`
      if (jsonObj.get("estimation") != null && !jsonObj.get("estimation").isJsonNull()) {
        GetConfiguration200ResponseEstimation.validateJsonElement(jsonObj.get("estimation"));
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        GetConfiguration200ResponseColumnConfigColumnsInnerStatusesInner.validateJsonElement(jsonObj.get("filter"));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        CreateBoardRequestLocation.validateJsonElement(jsonObj.get("location"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `ranking`
      if (jsonObj.get("ranking") != null && !jsonObj.get("ranking").isJsonNull()) {
        GetConfiguration200ResponseRanking.validateJsonElement(jsonObj.get("ranking"));
      }
      if ((jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) && !jsonObj.get("self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("self").toString()));
      }
      // validate the optional field `subQuery`
      if (jsonObj.get("subQuery") != null && !jsonObj.get("subQuery").isJsonNull()) {
        GetConfiguration200ResponseSubQuery.validateJsonElement(jsonObj.get("subQuery"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetConfiguration200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetConfiguration200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetConfiguration200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetConfiguration200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetConfiguration200Response>() {
           @Override
           public void write(JsonWriter out, GetConfiguration200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetConfiguration200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetConfiguration200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetConfiguration200Response
   * @throws IOException if the JSON string is invalid with respect to GetConfiguration200Response
   */
  public static GetConfiguration200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetConfiguration200Response.class);
  }

  /**
   * Convert an instance of GetConfiguration200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

