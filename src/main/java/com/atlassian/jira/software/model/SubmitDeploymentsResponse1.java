/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.SubmitDeploymentsResponse1DetailsInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * The current gating status for the given Deployment. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class SubmitDeploymentsResponse1 {
  public static final String SERIALIZED_NAME_DEPLOYMENT_SEQUENCE_NUMBER = "deploymentSequenceNumber";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_SEQUENCE_NUMBER)
  @javax.annotation.Nullable
  private Long deploymentSequenceNumber;

  public static final String SERIALIZED_NAME_PIPELINE_ID = "pipelineId";
  @SerializedName(SERIALIZED_NAME_PIPELINE_ID)
  @javax.annotation.Nullable
  private String pipelineId;

  public static final String SERIALIZED_NAME_ENVIRONMENT_ID = "environmentId";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_ID)
  @javax.annotation.Nullable
  private String environmentId;

  public static final String SERIALIZED_NAME_UPDATED_TIMESTAMP = "updatedTimestamp";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIMESTAMP)
  @javax.annotation.Nullable
  private OffsetDateTime updatedTimestamp;

  /**
   * The gating status 
   */
  @JsonAdapter(GatingStatusEnum.Adapter.class)
  public enum GatingStatusEnum {
    ALLOWED("allowed"),
    
    PREVENTED("prevented"),
    
    AWAITING("awaiting"),
    
    INVALID("invalid");

    private String value;

    GatingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GatingStatusEnum fromValue(String value) {
      for (GatingStatusEnum b : GatingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GatingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GatingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GatingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GatingStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GatingStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GATING_STATUS = "gatingStatus";
  @SerializedName(SERIALIZED_NAME_GATING_STATUS)
  @javax.annotation.Nullable
  private GatingStatusEnum gatingStatus;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  @javax.annotation.Nullable
  private List<SubmitDeploymentsResponse1DetailsInner> details = new ArrayList<>();

  public SubmitDeploymentsResponse1() {
  }

  public SubmitDeploymentsResponse1 deploymentSequenceNumber(@javax.annotation.Nullable Long deploymentSequenceNumber) {
    this.deploymentSequenceNumber = deploymentSequenceNumber;
    return this;
  }

  /**
   * This is the identifier for the Deployment. 
   * @return deploymentSequenceNumber
   */
  @javax.annotation.Nullable
  public Long getDeploymentSequenceNumber() {
    return deploymentSequenceNumber;
  }

  public void setDeploymentSequenceNumber(@javax.annotation.Nullable Long deploymentSequenceNumber) {
    this.deploymentSequenceNumber = deploymentSequenceNumber;
  }


  public SubmitDeploymentsResponse1 pipelineId(@javax.annotation.Nullable String pipelineId) {
    this.pipelineId = pipelineId;
    return this;
  }

  /**
   * The ID of the Deployment&#39;s pipeline. 
   * @return pipelineId
   */
  @javax.annotation.Nullable
  public String getPipelineId() {
    return pipelineId;
  }

  public void setPipelineId(@javax.annotation.Nullable String pipelineId) {
    this.pipelineId = pipelineId;
  }


  public SubmitDeploymentsResponse1 environmentId(@javax.annotation.Nullable String environmentId) {
    this.environmentId = environmentId;
    return this;
  }

  /**
   * The ID of the Deployment&#39;s environment. 
   * @return environmentId
   */
  @javax.annotation.Nullable
  public String getEnvironmentId() {
    return environmentId;
  }

  public void setEnvironmentId(@javax.annotation.Nullable String environmentId) {
    this.environmentId = environmentId;
  }


  public SubmitDeploymentsResponse1 updatedTimestamp(@javax.annotation.Nullable OffsetDateTime updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
    return this;
  }

  /**
   * Time the deployment gating status was updated. 
   * @return updatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedTimestamp() {
    return updatedTimestamp;
  }

  public void setUpdatedTimestamp(@javax.annotation.Nullable OffsetDateTime updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
  }


  public SubmitDeploymentsResponse1 gatingStatus(@javax.annotation.Nullable GatingStatusEnum gatingStatus) {
    this.gatingStatus = gatingStatus;
    return this;
  }

  /**
   * The gating status 
   * @return gatingStatus
   */
  @javax.annotation.Nullable
  public GatingStatusEnum getGatingStatus() {
    return gatingStatus;
  }

  public void setGatingStatus(@javax.annotation.Nullable GatingStatusEnum gatingStatus) {
    this.gatingStatus = gatingStatus;
  }


  public SubmitDeploymentsResponse1 details(@javax.annotation.Nullable List<SubmitDeploymentsResponse1DetailsInner> details) {
    this.details = details;
    return this;
  }

  public SubmitDeploymentsResponse1 addDetailsItem(SubmitDeploymentsResponse1DetailsInner detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<>();
    }
    this.details.add(detailsItem);
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public List<SubmitDeploymentsResponse1DetailsInner> getDetails() {
    return details;
  }

  public void setDetails(@javax.annotation.Nullable List<SubmitDeploymentsResponse1DetailsInner> details) {
    this.details = details;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubmitDeploymentsResponse1 submitDeploymentsResponse1 = (SubmitDeploymentsResponse1) o;
    return Objects.equals(this.deploymentSequenceNumber, submitDeploymentsResponse1.deploymentSequenceNumber) &&
        Objects.equals(this.pipelineId, submitDeploymentsResponse1.pipelineId) &&
        Objects.equals(this.environmentId, submitDeploymentsResponse1.environmentId) &&
        Objects.equals(this.updatedTimestamp, submitDeploymentsResponse1.updatedTimestamp) &&
        Objects.equals(this.gatingStatus, submitDeploymentsResponse1.gatingStatus) &&
        Objects.equals(this.details, submitDeploymentsResponse1.details);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deploymentSequenceNumber, pipelineId, environmentId, updatedTimestamp, gatingStatus, details);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubmitDeploymentsResponse1 {\n");
    sb.append("    deploymentSequenceNumber: ").append(toIndentedString(deploymentSequenceNumber)).append("\n");
    sb.append("    pipelineId: ").append(toIndentedString(pipelineId)).append("\n");
    sb.append("    environmentId: ").append(toIndentedString(environmentId)).append("\n");
    sb.append("    updatedTimestamp: ").append(toIndentedString(updatedTimestamp)).append("\n");
    sb.append("    gatingStatus: ").append(toIndentedString(gatingStatus)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deploymentSequenceNumber");
    openapiFields.add("pipelineId");
    openapiFields.add("environmentId");
    openapiFields.add("updatedTimestamp");
    openapiFields.add("gatingStatus");
    openapiFields.add("details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubmitDeploymentsResponse1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubmitDeploymentsResponse1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubmitDeploymentsResponse1 is not found in the empty JSON string", SubmitDeploymentsResponse1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubmitDeploymentsResponse1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubmitDeploymentsResponse1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pipelineId") != null && !jsonObj.get("pipelineId").isJsonNull()) && !jsonObj.get("pipelineId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pipelineId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pipelineId").toString()));
      }
      if ((jsonObj.get("environmentId") != null && !jsonObj.get("environmentId").isJsonNull()) && !jsonObj.get("environmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environmentId").toString()));
      }
      if ((jsonObj.get("gatingStatus") != null && !jsonObj.get("gatingStatus").isJsonNull()) && !jsonObj.get("gatingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatingStatus").toString()));
      }
      // validate the optional field `gatingStatus`
      if (jsonObj.get("gatingStatus") != null && !jsonObj.get("gatingStatus").isJsonNull()) {
        GatingStatusEnum.validateJsonElement(jsonObj.get("gatingStatus"));
      }
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        JsonArray jsonArraydetails = jsonObj.getAsJsonArray("details");
        if (jsonArraydetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("details").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `details` to be an array in the JSON string but got `%s`", jsonObj.get("details").toString()));
          }

          // validate the optional field `details` (array)
          for (int i = 0; i < jsonArraydetails.size(); i++) {
            SubmitDeploymentsResponse1DetailsInner.validateJsonElement(jsonArraydetails.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubmitDeploymentsResponse1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubmitDeploymentsResponse1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubmitDeploymentsResponse1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubmitDeploymentsResponse1.class));

       return (TypeAdapter<T>) new TypeAdapter<SubmitDeploymentsResponse1>() {
           @Override
           public void write(JsonWriter out, SubmitDeploymentsResponse1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubmitDeploymentsResponse1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubmitDeploymentsResponse1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubmitDeploymentsResponse1
   * @throws IOException if the JSON string is invalid with respect to SubmitDeploymentsResponse1
   */
  public static SubmitDeploymentsResponse1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubmitDeploymentsResponse1.class);
  }

  /**
   * Convert an instance of SubmitDeploymentsResponse1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

