/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.Associations;
import com.atlassian.jira.software.model.IncidentSeverity;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * Data related to a specific incident in a specific container that the incident is present in. Must specify at least one association to a component. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class GetIncidentById200Response {
  /**
   * The IncidentData schema version used for this incident data.  Placeholder to support potential schema changes in the future. 
   */
  @JsonAdapter(SchemaVersionEnum.Adapter.class)
  public enum SchemaVersionEnum {
    _1_0("1.0");

    private String value;

    SchemaVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SchemaVersionEnum fromValue(String value) {
      for (SchemaVersionEnum b : SchemaVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SchemaVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SchemaVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SchemaVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SchemaVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SchemaVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  @javax.annotation.Nonnull
  private SchemaVersionEnum schemaVersion = SchemaVersionEnum._1_0;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_UPDATE_SEQUENCE_NUMBER = "updateSequenceNumber";
  @SerializedName(SERIALIZED_NAME_UPDATE_SEQUENCE_NUMBER)
  @javax.annotation.Nonnull
  private Long updateSequenceNumber;

  public static final String SERIALIZED_NAME_AFFECTED_COMPONENTS = "affectedComponents";
  @SerializedName(SERIALIZED_NAME_AFFECTED_COMPONENTS)
  @javax.annotation.Nonnull
  private List<String> affectedComponents = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  @javax.annotation.Nonnull
  private String summary;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nonnull
  private String description;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nonnull
  private URI url;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  @javax.annotation.Nonnull
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  @javax.annotation.Nonnull
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  @javax.annotation.Nullable
  private IncidentSeverity severity;

  /**
   * The current status of the Incident. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    OPEN("open"),
    
    RESOLVED("resolved"),
    
    UNKNOWN("unknown");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private StatusEnum status;

  public static final String SERIALIZED_NAME_ASSOCIATIONS = "associations";
  @SerializedName(SERIALIZED_NAME_ASSOCIATIONS)
  @javax.annotation.Nullable
  private List<Associations> associations = new ArrayList<>();

  public GetIncidentById200Response() {
  }

  public GetIncidentById200Response schemaVersion(@javax.annotation.Nonnull SchemaVersionEnum schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

  /**
   * The IncidentData schema version used for this incident data.  Placeholder to support potential schema changes in the future. 
   * @return schemaVersion
   */
  @javax.annotation.Nonnull
  public SchemaVersionEnum getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(@javax.annotation.Nonnull SchemaVersionEnum schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


  public GetIncidentById200Response id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * The identifier for the Incident. Must be unique for a given Provider. 
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public GetIncidentById200Response updateSequenceNumber(@javax.annotation.Nonnull Long updateSequenceNumber) {
    this.updateSequenceNumber = updateSequenceNumber;
    return this;
  }

  /**
   * An ID used to apply an ordering to updates for this Incident in the case of out-of-order receipt of update requests.  This can be any monotonically increasing number. A suggested implementation is to use epoch millis from the Provider system, but other alternatives are valid (e.g. a Provider could store a counter against each Incident and increment that on each update to Jira).  Updates for a Incident that are received with an updateSqeuenceId lower than what is currently stored will be ignored. 
   * @return updateSequenceNumber
   */
  @javax.annotation.Nonnull
  public Long getUpdateSequenceNumber() {
    return updateSequenceNumber;
  }

  public void setUpdateSequenceNumber(@javax.annotation.Nonnull Long updateSequenceNumber) {
    this.updateSequenceNumber = updateSequenceNumber;
  }


  public GetIncidentById200Response affectedComponents(@javax.annotation.Nonnull List<String> affectedComponents) {
    this.affectedComponents = affectedComponents;
    return this;
  }

  public GetIncidentById200Response addAffectedComponentsItem(String affectedComponentsItem) {
    if (this.affectedComponents == null) {
      this.affectedComponents = new ArrayList<>();
    }
    this.affectedComponents.add(affectedComponentsItem);
    return this;
  }

  /**
   * The IDs of the Components impacted by this Incident. Must be unique for a given Provider. 
   * @return affectedComponents
   */
  @javax.annotation.Nonnull
  public List<String> getAffectedComponents() {
    return affectedComponents;
  }

  public void setAffectedComponents(@javax.annotation.Nonnull List<String> affectedComponents) {
    this.affectedComponents = affectedComponents;
  }


  public GetIncidentById200Response summary(@javax.annotation.Nonnull String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * The human-readable summary for the Incident. Will be shown in the UI.  If not provided, will use the ID for display. 
   * @return summary
   */
  @javax.annotation.Nonnull
  public String getSummary() {
    return summary;
  }

  public void setSummary(@javax.annotation.Nonnull String summary) {
    this.summary = summary;
  }


  public GetIncidentById200Response description(@javax.annotation.Nonnull String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the issue in Markdown format. Will be shown in the UI and used when creating Jira Issues. 
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nonnull String description) {
    this.description = description;
  }


  public GetIncidentById200Response url(@javax.annotation.Nonnull URI url) {
    this.url = url;
    return this;
  }

  /**
   * A URL users can use to link to a summary view of this incident, if appropriate.  This could be any location that makes sense in the Provider system (e.g. if the summary information comes from a specific project, it might make sense to link the user to the incident in that project). 
   * @return url
   */
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nonnull URI url) {
    this.url = url;
  }


  public GetIncidentById200Response createdDate(@javax.annotation.Nonnull OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The timestamp to present to the user that shows when the Incident was raised.  Expected format is an RFC3339 formatted string. 
   * @return createdDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(@javax.annotation.Nonnull OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public GetIncidentById200Response lastUpdated(@javax.annotation.Nonnull OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The last-updated timestamp to present to the user the last time the Incident was updated.  Expected format is an RFC3339 formatted string. 
   * @return lastUpdated
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(@javax.annotation.Nonnull OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public GetIncidentById200Response severity(@javax.annotation.Nullable IncidentSeverity severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nullable
  public IncidentSeverity getSeverity() {
    return severity;
  }

  public void setSeverity(@javax.annotation.Nullable IncidentSeverity severity) {
    this.severity = severity;
  }


  public GetIncidentById200Response status(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The current status of the Incident. 
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
  }


  public GetIncidentById200Response associations(@javax.annotation.Nullable List<Associations> associations) {
    this.associations = associations;
    return this;
  }

  public GetIncidentById200Response addAssociationsItem(Associations associationsItem) {
    if (this.associations == null) {
      this.associations = new ArrayList<>();
    }
    this.associations.add(associationsItem);
    return this;
  }

  /**
   * The IDs of the Jira issues related to this Incident. Must be unique for a given Provider. 
   * @return associations
   */
  @javax.annotation.Nullable
  public List<Associations> getAssociations() {
    return associations;
  }

  public void setAssociations(@javax.annotation.Nullable List<Associations> associations) {
    this.associations = associations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetIncidentById200Response getIncidentById200Response = (GetIncidentById200Response) o;
    return Objects.equals(this.schemaVersion, getIncidentById200Response.schemaVersion) &&
        Objects.equals(this.id, getIncidentById200Response.id) &&
        Objects.equals(this.updateSequenceNumber, getIncidentById200Response.updateSequenceNumber) &&
        Objects.equals(this.affectedComponents, getIncidentById200Response.affectedComponents) &&
        Objects.equals(this.summary, getIncidentById200Response.summary) &&
        Objects.equals(this.description, getIncidentById200Response.description) &&
        Objects.equals(this.url, getIncidentById200Response.url) &&
        Objects.equals(this.createdDate, getIncidentById200Response.createdDate) &&
        Objects.equals(this.lastUpdated, getIncidentById200Response.lastUpdated) &&
        Objects.equals(this.severity, getIncidentById200Response.severity) &&
        Objects.equals(this.status, getIncidentById200Response.status) &&
        Objects.equals(this.associations, getIncidentById200Response.associations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaVersion, id, updateSequenceNumber, affectedComponents, summary, description, url, createdDate, lastUpdated, severity, status, associations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetIncidentById200Response {\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    updateSequenceNumber: ").append(toIndentedString(updateSequenceNumber)).append("\n");
    sb.append("    affectedComponents: ").append(toIndentedString(affectedComponents)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    associations: ").append(toIndentedString(associations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("schemaVersion");
    openapiFields.add("id");
    openapiFields.add("updateSequenceNumber");
    openapiFields.add("affectedComponents");
    openapiFields.add("summary");
    openapiFields.add("description");
    openapiFields.add("url");
    openapiFields.add("createdDate");
    openapiFields.add("lastUpdated");
    openapiFields.add("severity");
    openapiFields.add("status");
    openapiFields.add("associations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemaVersion");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("updateSequenceNumber");
    openapiRequiredFields.add("affectedComponents");
    openapiRequiredFields.add("summary");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("createdDate");
    openapiRequiredFields.add("lastUpdated");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetIncidentById200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetIncidentById200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetIncidentById200Response is not found in the empty JSON string", GetIncidentById200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetIncidentById200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetIncidentById200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetIncidentById200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("schemaVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaVersion").toString()));
      }
      // validate the required field `schemaVersion`
      SchemaVersionEnum.validateJsonElement(jsonObj.get("schemaVersion"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("affectedComponents") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("affectedComponents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `affectedComponents` to be an array in the JSON string but got `%s`", jsonObj.get("affectedComponents").toString()));
      }
      if (!jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        IncidentSeverity.validateJsonElement(jsonObj.get("severity"));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (jsonObj.get("associations") != null && !jsonObj.get("associations").isJsonNull()) {
        JsonArray jsonArrayassociations = jsonObj.getAsJsonArray("associations");
        if (jsonArrayassociations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("associations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `associations` to be an array in the JSON string but got `%s`", jsonObj.get("associations").toString()));
          }

          // validate the optional field `associations` (array)
          for (int i = 0; i < jsonArrayassociations.size(); i++) {
            Associations.validateJsonElement(jsonArrayassociations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetIncidentById200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetIncidentById200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetIncidentById200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetIncidentById200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetIncidentById200Response>() {
           @Override
           public void write(JsonWriter out, GetIncidentById200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetIncidentById200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetIncidentById200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetIncidentById200Response
   * @throws IOException if the JSON string is invalid with respect to GetIncidentById200Response
   */
  public static GetIncidentById200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetIncidentById200Response.class);
  }

  /**
   * Convert an instance of GetIncidentById200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

