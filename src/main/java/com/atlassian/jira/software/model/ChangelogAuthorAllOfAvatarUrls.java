/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * The avatars of the user.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class ChangelogAuthorAllOfAvatarUrls {
  public static final String SERIALIZED_NAME_16X16 = "16x16";
  @SerializedName(SERIALIZED_NAME_16X16)
  @javax.annotation.Nullable
  private URI _16x16;

  public static final String SERIALIZED_NAME_24X24 = "24x24";
  @SerializedName(SERIALIZED_NAME_24X24)
  @javax.annotation.Nullable
  private URI _24x24;

  public static final String SERIALIZED_NAME_32X32 = "32x32";
  @SerializedName(SERIALIZED_NAME_32X32)
  @javax.annotation.Nullable
  private URI _32x32;

  public static final String SERIALIZED_NAME_48X48 = "48x48";
  @SerializedName(SERIALIZED_NAME_48X48)
  @javax.annotation.Nullable
  private URI _48x48;

  public ChangelogAuthorAllOfAvatarUrls() {
  }

  public ChangelogAuthorAllOfAvatarUrls _16x16(@javax.annotation.Nullable URI _16x16) {
    this._16x16 = _16x16;
    return this;
  }

  /**
   * The URL of the item&#39;s 16x16 pixel avatar.
   * @return _16x16
   */
  @javax.annotation.Nullable
  public URI get16x16() {
    return _16x16;
  }

  public void set16x16(@javax.annotation.Nullable URI _16x16) {
    this._16x16 = _16x16;
  }


  public ChangelogAuthorAllOfAvatarUrls _24x24(@javax.annotation.Nullable URI _24x24) {
    this._24x24 = _24x24;
    return this;
  }

  /**
   * The URL of the item&#39;s 24x24 pixel avatar.
   * @return _24x24
   */
  @javax.annotation.Nullable
  public URI get24x24() {
    return _24x24;
  }

  public void set24x24(@javax.annotation.Nullable URI _24x24) {
    this._24x24 = _24x24;
  }


  public ChangelogAuthorAllOfAvatarUrls _32x32(@javax.annotation.Nullable URI _32x32) {
    this._32x32 = _32x32;
    return this;
  }

  /**
   * The URL of the item&#39;s 32x32 pixel avatar.
   * @return _32x32
   */
  @javax.annotation.Nullable
  public URI get32x32() {
    return _32x32;
  }

  public void set32x32(@javax.annotation.Nullable URI _32x32) {
    this._32x32 = _32x32;
  }


  public ChangelogAuthorAllOfAvatarUrls _48x48(@javax.annotation.Nullable URI _48x48) {
    this._48x48 = _48x48;
    return this;
  }

  /**
   * The URL of the item&#39;s 48x48 pixel avatar.
   * @return _48x48
   */
  @javax.annotation.Nullable
  public URI get48x48() {
    return _48x48;
  }

  public void set48x48(@javax.annotation.Nullable URI _48x48) {
    this._48x48 = _48x48;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangelogAuthorAllOfAvatarUrls changelogAuthorAllOfAvatarUrls = (ChangelogAuthorAllOfAvatarUrls) o;
    return Objects.equals(this._16x16, changelogAuthorAllOfAvatarUrls._16x16) &&
        Objects.equals(this._24x24, changelogAuthorAllOfAvatarUrls._24x24) &&
        Objects.equals(this._32x32, changelogAuthorAllOfAvatarUrls._32x32) &&
        Objects.equals(this._48x48, changelogAuthorAllOfAvatarUrls._48x48);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_16x16, _24x24, _32x32, _48x48);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangelogAuthorAllOfAvatarUrls {\n");
    sb.append("    _16x16: ").append(toIndentedString(_16x16)).append("\n");
    sb.append("    _24x24: ").append(toIndentedString(_24x24)).append("\n");
    sb.append("    _32x32: ").append(toIndentedString(_32x32)).append("\n");
    sb.append("    _48x48: ").append(toIndentedString(_48x48)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("16x16");
    openapiFields.add("24x24");
    openapiFields.add("32x32");
    openapiFields.add("48x48");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChangelogAuthorAllOfAvatarUrls
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChangelogAuthorAllOfAvatarUrls.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChangelogAuthorAllOfAvatarUrls is not found in the empty JSON string", ChangelogAuthorAllOfAvatarUrls.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChangelogAuthorAllOfAvatarUrls.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChangelogAuthorAllOfAvatarUrls` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("16x16") != null && !jsonObj.get("16x16").isJsonNull()) && !jsonObj.get("16x16").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `16x16` to be a primitive type in the JSON string but got `%s`", jsonObj.get("16x16").toString()));
      }
      if ((jsonObj.get("24x24") != null && !jsonObj.get("24x24").isJsonNull()) && !jsonObj.get("24x24").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `24x24` to be a primitive type in the JSON string but got `%s`", jsonObj.get("24x24").toString()));
      }
      if ((jsonObj.get("32x32") != null && !jsonObj.get("32x32").isJsonNull()) && !jsonObj.get("32x32").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `32x32` to be a primitive type in the JSON string but got `%s`", jsonObj.get("32x32").toString()));
      }
      if ((jsonObj.get("48x48") != null && !jsonObj.get("48x48").isJsonNull()) && !jsonObj.get("48x48").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `48x48` to be a primitive type in the JSON string but got `%s`", jsonObj.get("48x48").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChangelogAuthorAllOfAvatarUrls.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChangelogAuthorAllOfAvatarUrls' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChangelogAuthorAllOfAvatarUrls> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChangelogAuthorAllOfAvatarUrls.class));

       return (TypeAdapter<T>) new TypeAdapter<ChangelogAuthorAllOfAvatarUrls>() {
           @Override
           public void write(JsonWriter out, ChangelogAuthorAllOfAvatarUrls value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChangelogAuthorAllOfAvatarUrls read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChangelogAuthorAllOfAvatarUrls given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChangelogAuthorAllOfAvatarUrls
   * @throws IOException if the JSON string is invalid with respect to ChangelogAuthorAllOfAvatarUrls
   */
  public static ChangelogAuthorAllOfAvatarUrls fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChangelogAuthorAllOfAvatarUrls.class);
  }

  /**
   * Convert an instance of ChangelogAuthorAllOfAvatarUrls to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

