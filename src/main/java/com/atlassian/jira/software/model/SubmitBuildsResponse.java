/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.BuildKey;
import com.atlassian.jira.software.model.RejectedBuild;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * The result of a successful &#x60;submitBuilds&#x60; request. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class SubmitBuildsResponse {
  public static final String SERIALIZED_NAME_ACCEPTED_BUILDS = "acceptedBuilds";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_BUILDS)
  @javax.annotation.Nullable
  private List<BuildKey> acceptedBuilds = new ArrayList<>();

  public static final String SERIALIZED_NAME_REJECTED_BUILDS = "rejectedBuilds";
  @SerializedName(SERIALIZED_NAME_REJECTED_BUILDS)
  @javax.annotation.Nullable
  private List<RejectedBuild> rejectedBuilds = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNKNOWN_ISSUE_KEYS = "unknownIssueKeys";
  @SerializedName(SERIALIZED_NAME_UNKNOWN_ISSUE_KEYS)
  @javax.annotation.Nullable
  private List<String> unknownIssueKeys = new ArrayList<>();

  public SubmitBuildsResponse() {
  }

  public SubmitBuildsResponse acceptedBuilds(@javax.annotation.Nullable List<BuildKey> acceptedBuilds) {
    this.acceptedBuilds = acceptedBuilds;
    return this;
  }

  public SubmitBuildsResponse addAcceptedBuildsItem(BuildKey acceptedBuildsItem) {
    if (this.acceptedBuilds == null) {
      this.acceptedBuilds = new ArrayList<>();
    }
    this.acceptedBuilds.add(acceptedBuildsItem);
    return this;
  }

  /**
   * The keys of builds that have been accepted for submission. A build key is a composite key that consists of &#x60;pipelineId&#x60; and &#x60;buildNumber&#x60;.  A build may be rejected if it was only associated with unknown issue keys, or if the submitted data for that build does not match the required schema.  Note that a build that isn&#39;t updated due to it&#39;s &#x60;updateSequenceNumber&#x60; being out of order is not considered a failed submission. 
   * @return acceptedBuilds
   */
  @javax.annotation.Nullable
  public List<BuildKey> getAcceptedBuilds() {
    return acceptedBuilds;
  }

  public void setAcceptedBuilds(@javax.annotation.Nullable List<BuildKey> acceptedBuilds) {
    this.acceptedBuilds = acceptedBuilds;
  }


  public SubmitBuildsResponse rejectedBuilds(@javax.annotation.Nullable List<RejectedBuild> rejectedBuilds) {
    this.rejectedBuilds = rejectedBuilds;
    return this;
  }

  public SubmitBuildsResponse addRejectedBuildsItem(RejectedBuild rejectedBuildsItem) {
    if (this.rejectedBuilds == null) {
      this.rejectedBuilds = new ArrayList<>();
    }
    this.rejectedBuilds.add(rejectedBuildsItem);
    return this;
  }

  /**
   * Details of builds that have not been accepted for submission.  A build may be rejected if it was only associated with unknown issue keys, or if the submitted data for the build does not match the required schema. 
   * @return rejectedBuilds
   */
  @javax.annotation.Nullable
  public List<RejectedBuild> getRejectedBuilds() {
    return rejectedBuilds;
  }

  public void setRejectedBuilds(@javax.annotation.Nullable List<RejectedBuild> rejectedBuilds) {
    this.rejectedBuilds = rejectedBuilds;
  }


  public SubmitBuildsResponse unknownIssueKeys(@javax.annotation.Nullable List<String> unknownIssueKeys) {
    this.unknownIssueKeys = unknownIssueKeys;
    return this;
  }

  public SubmitBuildsResponse addUnknownIssueKeysItem(String unknownIssueKeysItem) {
    if (this.unknownIssueKeys == null) {
      this.unknownIssueKeys = new ArrayList<>();
    }
    this.unknownIssueKeys.add(unknownIssueKeysItem);
    return this;
  }

  /**
   * Issue keys that are not known on this Jira instance (if any).  These may be invalid keys (e.g. &#x60;UTF-8&#x60; is sometimes incorrectly identified as a Jira issue key), or they may be for projects that no longer exist.  If a build has been associated with issue keys other than those in this array it will still be stored against those valid keys. If a build was only associated with issue keys deemed to be invalid it won&#39;t be persisted. 
   * @return unknownIssueKeys
   */
  @javax.annotation.Nullable
  public List<String> getUnknownIssueKeys() {
    return unknownIssueKeys;
  }

  public void setUnknownIssueKeys(@javax.annotation.Nullable List<String> unknownIssueKeys) {
    this.unknownIssueKeys = unknownIssueKeys;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubmitBuildsResponse submitBuildsResponse = (SubmitBuildsResponse) o;
    return Objects.equals(this.acceptedBuilds, submitBuildsResponse.acceptedBuilds) &&
        Objects.equals(this.rejectedBuilds, submitBuildsResponse.rejectedBuilds) &&
        Objects.equals(this.unknownIssueKeys, submitBuildsResponse.unknownIssueKeys);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptedBuilds, rejectedBuilds, unknownIssueKeys);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubmitBuildsResponse {\n");
    sb.append("    acceptedBuilds: ").append(toIndentedString(acceptedBuilds)).append("\n");
    sb.append("    rejectedBuilds: ").append(toIndentedString(rejectedBuilds)).append("\n");
    sb.append("    unknownIssueKeys: ").append(toIndentedString(unknownIssueKeys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceptedBuilds");
    openapiFields.add("rejectedBuilds");
    openapiFields.add("unknownIssueKeys");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubmitBuildsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubmitBuildsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubmitBuildsResponse is not found in the empty JSON string", SubmitBuildsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubmitBuildsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubmitBuildsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("acceptedBuilds") != null && !jsonObj.get("acceptedBuilds").isJsonNull()) {
        JsonArray jsonArrayacceptedBuilds = jsonObj.getAsJsonArray("acceptedBuilds");
        if (jsonArrayacceptedBuilds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("acceptedBuilds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `acceptedBuilds` to be an array in the JSON string but got `%s`", jsonObj.get("acceptedBuilds").toString()));
          }

          // validate the optional field `acceptedBuilds` (array)
          for (int i = 0; i < jsonArrayacceptedBuilds.size(); i++) {
            BuildKey.validateJsonElement(jsonArrayacceptedBuilds.get(i));
          };
        }
      }
      if (jsonObj.get("rejectedBuilds") != null && !jsonObj.get("rejectedBuilds").isJsonNull()) {
        JsonArray jsonArrayrejectedBuilds = jsonObj.getAsJsonArray("rejectedBuilds");
        if (jsonArrayrejectedBuilds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rejectedBuilds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rejectedBuilds` to be an array in the JSON string but got `%s`", jsonObj.get("rejectedBuilds").toString()));
          }

          // validate the optional field `rejectedBuilds` (array)
          for (int i = 0; i < jsonArrayrejectedBuilds.size(); i++) {
            RejectedBuild.validateJsonElement(jsonArrayrejectedBuilds.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("unknownIssueKeys") != null && !jsonObj.get("unknownIssueKeys").isJsonNull() && !jsonObj.get("unknownIssueKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `unknownIssueKeys` to be an array in the JSON string but got `%s`", jsonObj.get("unknownIssueKeys").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubmitBuildsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubmitBuildsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubmitBuildsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubmitBuildsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SubmitBuildsResponse>() {
           @Override
           public void write(JsonWriter out, SubmitBuildsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubmitBuildsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubmitBuildsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubmitBuildsResponse
   * @throws IOException if the JSON string is invalid with respect to SubmitBuildsResponse
   */
  public static SubmitBuildsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubmitBuildsResponse.class);
  }

  /**
   * Convert an instance of SubmitBuildsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

