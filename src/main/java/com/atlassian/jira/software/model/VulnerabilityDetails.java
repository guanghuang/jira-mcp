/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.Identifier;
import com.atlassian.jira.software.model.IssueIdOrKeysAssociation;
import com.atlassian.jira.software.model.VulnerabilityAdditionalInfo;
import com.atlassian.jira.software.model.VulnerabilitySeverity;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * Data related to a specific vulnerability in a specific workspace that the vulnerability is present in. Must specify at least one association. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class VulnerabilityDetails {
  /**
   * The VulnerabilityData schema version used for this vulnerability data.  Placeholder to support potential schema changes in the future. 
   */
  @JsonAdapter(SchemaVersionEnum.Adapter.class)
  public enum SchemaVersionEnum {
    _1_0("1.0");

    private String value;

    SchemaVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SchemaVersionEnum fromValue(String value) {
      for (SchemaVersionEnum b : SchemaVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SchemaVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SchemaVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SchemaVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SchemaVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SchemaVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  @javax.annotation.Nonnull
  private SchemaVersionEnum schemaVersion = SchemaVersionEnum._1_0;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_UPDATE_SEQUENCE_NUMBER = "updateSequenceNumber";
  @SerializedName(SERIALIZED_NAME_UPDATE_SEQUENCE_NUMBER)
  @javax.annotation.Nonnull
  private Long updateSequenceNumber;

  public static final String SERIALIZED_NAME_CONTAINER_ID = "containerId";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ID)
  @javax.annotation.Nonnull
  private String containerId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  @javax.annotation.Nonnull
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nonnull
  private String description;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nonnull
  private URI url;

  /**
   * The type of Vulnerability detected.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SCA("sca"),
    
    SAST("sast"),
    
    DAST("dast"),
    
    UNKNOWN("unknown");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private TypeEnum type;

  public static final String SERIALIZED_NAME_INTRODUCED_DATE = "introducedDate";
  @SerializedName(SERIALIZED_NAME_INTRODUCED_DATE)
  @javax.annotation.Nonnull
  private OffsetDateTime introducedDate;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  @javax.annotation.Nonnull
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  @javax.annotation.Nonnull
  private VulnerabilitySeverity severity;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  @javax.annotation.Nullable
  private List<Identifier> identifiers = new ArrayList<>();

  /**
   * The current status of the Vulnerability. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    OPEN("open"),
    
    CLOSED("closed"),
    
    IGNORED("ignored"),
    
    UNKNOWN("unknown");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private StatusEnum status;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFO = "additionalInfo";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFO)
  @javax.annotation.Nullable
  private VulnerabilityAdditionalInfo additionalInfo;

  public static final String SERIALIZED_NAME_ADD_ASSOCIATIONS = "addAssociations";
  @SerializedName(SERIALIZED_NAME_ADD_ASSOCIATIONS)
  @javax.annotation.Nullable
  private List<IssueIdOrKeysAssociation> addAssociations = new ArrayList<>();

  public static final String SERIALIZED_NAME_REMOVE_ASSOCIATIONS = "removeAssociations";
  @SerializedName(SERIALIZED_NAME_REMOVE_ASSOCIATIONS)
  @javax.annotation.Nullable
  private List<IssueIdOrKeysAssociation> removeAssociations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSOCIATIONS_LAST_UPDATED = "associationsLastUpdated";
  @SerializedName(SERIALIZED_NAME_ASSOCIATIONS_LAST_UPDATED)
  @javax.annotation.Nullable
  private OffsetDateTime associationsLastUpdated;

  public static final String SERIALIZED_NAME_ASSOCIATIONS_UPDATE_SEQUENCE_NUMBER = "associationsUpdateSequenceNumber";
  @SerializedName(SERIALIZED_NAME_ASSOCIATIONS_UPDATE_SEQUENCE_NUMBER)
  @javax.annotation.Nullable
  private Long associationsUpdateSequenceNumber;

  public VulnerabilityDetails() {
  }

  public VulnerabilityDetails schemaVersion(@javax.annotation.Nonnull SchemaVersionEnum schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

  /**
   * The VulnerabilityData schema version used for this vulnerability data.  Placeholder to support potential schema changes in the future. 
   * @return schemaVersion
   */
  @javax.annotation.Nonnull
  public SchemaVersionEnum getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(@javax.annotation.Nonnull SchemaVersionEnum schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


  public VulnerabilityDetails id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * The identifier for the Vulnerability. Must be unique for a given Provider. 
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public VulnerabilityDetails updateSequenceNumber(@javax.annotation.Nonnull Long updateSequenceNumber) {
    this.updateSequenceNumber = updateSequenceNumber;
    return this;
  }

  /**
   * An ID used to apply an ordering to updates for this Vulnerability in the case of out-of-order receipt of update requests.  This can be any monotonically increasing number. A suggested implementation is to use epoch millis from the Provider system, but other alternatives are valid (e.g. a Provider could store a counter against each Vulnerability and increment that on each update to Jira).  Updates for a Vulnerability that are received with an updateSequenceId lower than what is currently stored will be ignored. 
   * @return updateSequenceNumber
   */
  @javax.annotation.Nonnull
  public Long getUpdateSequenceNumber() {
    return updateSequenceNumber;
  }

  public void setUpdateSequenceNumber(@javax.annotation.Nonnull Long updateSequenceNumber) {
    this.updateSequenceNumber = updateSequenceNumber;
  }


  public VulnerabilityDetails containerId(@javax.annotation.Nonnull String containerId) {
    this.containerId = containerId;
    return this;
  }

  /**
   * The identifier of the Container where this Vulnerability was found. Must be unique for a given Provider. This must follow this regex pattern: &#x60;[a-zA-Z0-9\\\\-_.~@:{}&#x3D;]+(/[a-zA-Z0-9\\\\-_.~@:{}&#x3D;]+)*&#x60; 
   * @return containerId
   */
  @javax.annotation.Nonnull
  public String getContainerId() {
    return containerId;
  }

  public void setContainerId(@javax.annotation.Nonnull String containerId) {
    this.containerId = containerId;
  }


  public VulnerabilityDetails displayName(@javax.annotation.Nonnull String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The human-readable name for the Vulnerability. Will be shown in the UI.  If not provided, will use the ID for display. 
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(@javax.annotation.Nonnull String displayName) {
    this.displayName = displayName;
  }


  public VulnerabilityDetails description(@javax.annotation.Nonnull String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the issue in markdown format that will be shown in the UI and used when creating Jira Issues. HTML tags are not supported in the markdown format. For creating a new line &#x60;\\n&#x60; can be used. Read more about the accepted markdown transformations [here](https://atlaskit.atlassian.com/packages/editor/editor-markdown-transformer). 
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nonnull String description) {
    this.description = description;
  }


  public VulnerabilityDetails url(@javax.annotation.Nonnull URI url) {
    this.url = url;
    return this;
  }

  /**
   * A URL users can use to link to a summary view of this vulnerability, if appropriate.  This could be any location that makes sense in the Provider system (e.g. if the summary information comes from a specific project, it might make sense to link the user to the vulnerability in that project). 
   * @return url
   */
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nonnull URI url) {
    this.url = url;
  }


  public VulnerabilityDetails type(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of Vulnerability detected.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }


  public VulnerabilityDetails introducedDate(@javax.annotation.Nonnull OffsetDateTime introducedDate) {
    this.introducedDate = introducedDate;
    return this;
  }

  /**
   * The timestamp to present to the user that shows when the Vulnerability was introduced.  Expected format is an RFC3339 formatted string. 
   * @return introducedDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getIntroducedDate() {
    return introducedDate;
  }

  public void setIntroducedDate(@javax.annotation.Nonnull OffsetDateTime introducedDate) {
    this.introducedDate = introducedDate;
  }


  public VulnerabilityDetails lastUpdated(@javax.annotation.Nonnull OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The last-updated timestamp to present to the user the last time the Vulnerability was updated.  Expected format is an RFC3339 formatted string. 
   * @return lastUpdated
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(@javax.annotation.Nonnull OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public VulnerabilityDetails severity(@javax.annotation.Nonnull VulnerabilitySeverity severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nonnull
  public VulnerabilitySeverity getSeverity() {
    return severity;
  }

  public void setSeverity(@javax.annotation.Nonnull VulnerabilitySeverity severity) {
    this.severity = severity;
  }


  public VulnerabilityDetails identifiers(@javax.annotation.Nullable List<Identifier> identifiers) {
    this.identifiers = identifiers;
    return this;
  }

  public VulnerabilityDetails addIdentifiersItem(Identifier identifiersItem) {
    if (this.identifiers == null) {
      this.identifiers = new ArrayList<>();
    }
    this.identifiers.add(identifiersItem);
    return this;
  }

  /**
   * The identifying information for the Vulnerability. 
   * @return identifiers
   */
  @javax.annotation.Nullable
  public List<Identifier> getIdentifiers() {
    return identifiers;
  }

  public void setIdentifiers(@javax.annotation.Nullable List<Identifier> identifiers) {
    this.identifiers = identifiers;
  }


  public VulnerabilityDetails status(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The current status of the Vulnerability. 
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
  }


  public VulnerabilityDetails additionalInfo(@javax.annotation.Nullable VulnerabilityAdditionalInfo additionalInfo) {
    this.additionalInfo = additionalInfo;
    return this;
  }

  /**
   * Get additionalInfo
   * @return additionalInfo
   */
  @javax.annotation.Nullable
  public VulnerabilityAdditionalInfo getAdditionalInfo() {
    return additionalInfo;
  }

  public void setAdditionalInfo(@javax.annotation.Nullable VulnerabilityAdditionalInfo additionalInfo) {
    this.additionalInfo = additionalInfo;
  }


  public VulnerabilityDetails addAssociations(@javax.annotation.Nullable List<IssueIdOrKeysAssociation> addAssociations) {
    this.addAssociations = addAssociations;
    return this;
  }

  public VulnerabilityDetails addAddAssociationsItem(IssueIdOrKeysAssociation addAssociationsItem) {
    if (this.addAssociations == null) {
      this.addAssociations = new ArrayList<>();
    }
    this.addAssociations.add(addAssociationsItem);
    return this;
  }

  /**
   * The associations (e.g. Jira issue) to add in addition to the currently stored associations of the Security Vulnerability. 
   * @return addAssociations
   */
  @javax.annotation.Nullable
  public List<IssueIdOrKeysAssociation> getAddAssociations() {
    return addAssociations;
  }

  public void setAddAssociations(@javax.annotation.Nullable List<IssueIdOrKeysAssociation> addAssociations) {
    this.addAssociations = addAssociations;
  }


  public VulnerabilityDetails removeAssociations(@javax.annotation.Nullable List<IssueIdOrKeysAssociation> removeAssociations) {
    this.removeAssociations = removeAssociations;
    return this;
  }

  public VulnerabilityDetails addRemoveAssociationsItem(IssueIdOrKeysAssociation removeAssociationsItem) {
    if (this.removeAssociations == null) {
      this.removeAssociations = new ArrayList<>();
    }
    this.removeAssociations.add(removeAssociationsItem);
    return this;
  }

  /**
   * The associations (e.g. Jira issue) to remove from currently stored associations of the Security Vulnerability. 
   * @return removeAssociations
   */
  @javax.annotation.Nullable
  public List<IssueIdOrKeysAssociation> getRemoveAssociations() {
    return removeAssociations;
  }

  public void setRemoveAssociations(@javax.annotation.Nullable List<IssueIdOrKeysAssociation> removeAssociations) {
    this.removeAssociations = removeAssociations;
  }


  public VulnerabilityDetails associationsLastUpdated(@javax.annotation.Nullable OffsetDateTime associationsLastUpdated) {
    this.associationsLastUpdated = associationsLastUpdated;
    return this;
  }

  /**
   * An ISO-8601 Date-time string representing the last time the provider updated associations on this entity.  Expected format is an RFC3339 formatted string. 
   * @return associationsLastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAssociationsLastUpdated() {
    return associationsLastUpdated;
  }

  public void setAssociationsLastUpdated(@javax.annotation.Nullable OffsetDateTime associationsLastUpdated) {
    this.associationsLastUpdated = associationsLastUpdated;
  }


  public VulnerabilityDetails associationsUpdateSequenceNumber(@javax.annotation.Nullable Long associationsUpdateSequenceNumber) {
    this.associationsUpdateSequenceNumber = associationsUpdateSequenceNumber;
    return this;
  }

  /**
   * A sequence number to compare when writing entity associations to the database.  This can be any monotonically increasing number. A highly recommended implementation is to use epoch millis.  This is an optional field. If it is not provided it will default to being equal to the corresponding entity&#39;s &#x60;updateSequenceNumber&#x60;.  Associations are written following a LastWriteWins strategy, association that are received with an associationsUpdateSequenceNumber lower than what is currently stored will be ignored. 
   * @return associationsUpdateSequenceNumber
   */
  @javax.annotation.Nullable
  public Long getAssociationsUpdateSequenceNumber() {
    return associationsUpdateSequenceNumber;
  }

  public void setAssociationsUpdateSequenceNumber(@javax.annotation.Nullable Long associationsUpdateSequenceNumber) {
    this.associationsUpdateSequenceNumber = associationsUpdateSequenceNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VulnerabilityDetails vulnerabilityDetails = (VulnerabilityDetails) o;
    return Objects.equals(this.schemaVersion, vulnerabilityDetails.schemaVersion) &&
        Objects.equals(this.id, vulnerabilityDetails.id) &&
        Objects.equals(this.updateSequenceNumber, vulnerabilityDetails.updateSequenceNumber) &&
        Objects.equals(this.containerId, vulnerabilityDetails.containerId) &&
        Objects.equals(this.displayName, vulnerabilityDetails.displayName) &&
        Objects.equals(this.description, vulnerabilityDetails.description) &&
        Objects.equals(this.url, vulnerabilityDetails.url) &&
        Objects.equals(this.type, vulnerabilityDetails.type) &&
        Objects.equals(this.introducedDate, vulnerabilityDetails.introducedDate) &&
        Objects.equals(this.lastUpdated, vulnerabilityDetails.lastUpdated) &&
        Objects.equals(this.severity, vulnerabilityDetails.severity) &&
        Objects.equals(this.identifiers, vulnerabilityDetails.identifiers) &&
        Objects.equals(this.status, vulnerabilityDetails.status) &&
        Objects.equals(this.additionalInfo, vulnerabilityDetails.additionalInfo) &&
        Objects.equals(this.addAssociations, vulnerabilityDetails.addAssociations) &&
        Objects.equals(this.removeAssociations, vulnerabilityDetails.removeAssociations) &&
        Objects.equals(this.associationsLastUpdated, vulnerabilityDetails.associationsLastUpdated) &&
        Objects.equals(this.associationsUpdateSequenceNumber, vulnerabilityDetails.associationsUpdateSequenceNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaVersion, id, updateSequenceNumber, containerId, displayName, description, url, type, introducedDate, lastUpdated, severity, identifiers, status, additionalInfo, addAssociations, removeAssociations, associationsLastUpdated, associationsUpdateSequenceNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VulnerabilityDetails {\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    updateSequenceNumber: ").append(toIndentedString(updateSequenceNumber)).append("\n");
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    introducedDate: ").append(toIndentedString(introducedDate)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    addAssociations: ").append(toIndentedString(addAssociations)).append("\n");
    sb.append("    removeAssociations: ").append(toIndentedString(removeAssociations)).append("\n");
    sb.append("    associationsLastUpdated: ").append(toIndentedString(associationsLastUpdated)).append("\n");
    sb.append("    associationsUpdateSequenceNumber: ").append(toIndentedString(associationsUpdateSequenceNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("schemaVersion");
    openapiFields.add("id");
    openapiFields.add("updateSequenceNumber");
    openapiFields.add("containerId");
    openapiFields.add("displayName");
    openapiFields.add("description");
    openapiFields.add("url");
    openapiFields.add("type");
    openapiFields.add("introducedDate");
    openapiFields.add("lastUpdated");
    openapiFields.add("severity");
    openapiFields.add("identifiers");
    openapiFields.add("status");
    openapiFields.add("additionalInfo");
    openapiFields.add("addAssociations");
    openapiFields.add("removeAssociations");
    openapiFields.add("associationsLastUpdated");
    openapiFields.add("associationsUpdateSequenceNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemaVersion");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("updateSequenceNumber");
    openapiRequiredFields.add("containerId");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("introducedDate");
    openapiRequiredFields.add("lastUpdated");
    openapiRequiredFields.add("severity");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VulnerabilityDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VulnerabilityDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VulnerabilityDetails is not found in the empty JSON string", VulnerabilityDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VulnerabilityDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VulnerabilityDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VulnerabilityDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("schemaVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaVersion").toString()));
      }
      // validate the required field `schemaVersion`
      SchemaVersionEnum.validateJsonElement(jsonObj.get("schemaVersion"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("containerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerId").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      // validate the required field `severity`
      VulnerabilitySeverity.validateJsonElement(jsonObj.get("severity"));
      if (jsonObj.get("identifiers") != null && !jsonObj.get("identifiers").isJsonNull()) {
        JsonArray jsonArrayidentifiers = jsonObj.getAsJsonArray("identifiers");
        if (jsonArrayidentifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identifiers` to be an array in the JSON string but got `%s`", jsonObj.get("identifiers").toString()));
          }

          // validate the optional field `identifiers` (array)
          for (int i = 0; i < jsonArrayidentifiers.size(); i++) {
            Identifier.validateJsonElement(jsonArrayidentifiers.get(i));
          };
        }
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `additionalInfo`
      if (jsonObj.get("additionalInfo") != null && !jsonObj.get("additionalInfo").isJsonNull()) {
        VulnerabilityAdditionalInfo.validateJsonElement(jsonObj.get("additionalInfo"));
      }
      if (jsonObj.get("addAssociations") != null && !jsonObj.get("addAssociations").isJsonNull()) {
        JsonArray jsonArrayaddAssociations = jsonObj.getAsJsonArray("addAssociations");
        if (jsonArrayaddAssociations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addAssociations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addAssociations` to be an array in the JSON string but got `%s`", jsonObj.get("addAssociations").toString()));
          }

          // validate the optional field `addAssociations` (array)
          for (int i = 0; i < jsonArrayaddAssociations.size(); i++) {
            IssueIdOrKeysAssociation.validateJsonElement(jsonArrayaddAssociations.get(i));
          };
        }
      }
      if (jsonObj.get("removeAssociations") != null && !jsonObj.get("removeAssociations").isJsonNull()) {
        JsonArray jsonArrayremoveAssociations = jsonObj.getAsJsonArray("removeAssociations");
        if (jsonArrayremoveAssociations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("removeAssociations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `removeAssociations` to be an array in the JSON string but got `%s`", jsonObj.get("removeAssociations").toString()));
          }

          // validate the optional field `removeAssociations` (array)
          for (int i = 0; i < jsonArrayremoveAssociations.size(); i++) {
            IssueIdOrKeysAssociation.validateJsonElement(jsonArrayremoveAssociations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VulnerabilityDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VulnerabilityDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VulnerabilityDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VulnerabilityDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<VulnerabilityDetails>() {
           @Override
           public void write(JsonWriter out, VulnerabilityDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VulnerabilityDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VulnerabilityDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VulnerabilityDetails
   * @throws IOException if the JSON string is invalid with respect to VulnerabilityDetails
   */
  public static VulnerabilityDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VulnerabilityDetails.class);
  }

  /**
   * Convert an instance of VulnerabilityDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

