/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.GetIssue200ResponseFieldsClosedSprintsInner;
import com.atlassian.jira.software.model.GetIssue200ResponseFieldsSprint;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * GetIssue200ResponseFields
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class GetIssue200ResponseFields {
  public static final String SERIALIZED_NAME_FLAGGED = "flagged";
  @SerializedName(SERIALIZED_NAME_FLAGGED)
  @javax.annotation.Nullable
  private Boolean flagged;

  public static final String SERIALIZED_NAME_SPRINT = "sprint";
  @SerializedName(SERIALIZED_NAME_SPRINT)
  @javax.annotation.Nullable
  private GetIssue200ResponseFieldsSprint sprint;

  public static final String SERIALIZED_NAME_CLOSED_SPRINTS = "closedSprints";
  @SerializedName(SERIALIZED_NAME_CLOSED_SPRINTS)
  @javax.annotation.Nullable
  private List<GetIssue200ResponseFieldsClosedSprintsInner> closedSprints = new ArrayList<>();

  public GetIssue200ResponseFields() {
  }

  public GetIssue200ResponseFields flagged(@javax.annotation.Nullable Boolean flagged) {
    this.flagged = flagged;
    return this;
  }

  /**
   * Get flagged
   * @return flagged
   */
  @javax.annotation.Nullable
  public Boolean getFlagged() {
    return flagged;
  }

  public void setFlagged(@javax.annotation.Nullable Boolean flagged) {
    this.flagged = flagged;
  }


  public GetIssue200ResponseFields sprint(@javax.annotation.Nullable GetIssue200ResponseFieldsSprint sprint) {
    this.sprint = sprint;
    return this;
  }

  /**
   * Get sprint
   * @return sprint
   */
  @javax.annotation.Nullable
  public GetIssue200ResponseFieldsSprint getSprint() {
    return sprint;
  }

  public void setSprint(@javax.annotation.Nullable GetIssue200ResponseFieldsSprint sprint) {
    this.sprint = sprint;
  }


  public GetIssue200ResponseFields closedSprints(@javax.annotation.Nullable List<GetIssue200ResponseFieldsClosedSprintsInner> closedSprints) {
    this.closedSprints = closedSprints;
    return this;
  }

  public GetIssue200ResponseFields addClosedSprintsItem(GetIssue200ResponseFieldsClosedSprintsInner closedSprintsItem) {
    if (this.closedSprints == null) {
      this.closedSprints = new ArrayList<>();
    }
    this.closedSprints.add(closedSprintsItem);
    return this;
  }

  /**
   * Get closedSprints
   * @return closedSprints
   */
  @javax.annotation.Nullable
  public List<GetIssue200ResponseFieldsClosedSprintsInner> getClosedSprints() {
    return closedSprints;
  }

  public void setClosedSprints(@javax.annotation.Nullable List<GetIssue200ResponseFieldsClosedSprintsInner> closedSprints) {
    this.closedSprints = closedSprints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetIssue200ResponseFields getIssue200ResponseFields = (GetIssue200ResponseFields) o;
    return Objects.equals(this.flagged, getIssue200ResponseFields.flagged) &&
        Objects.equals(this.sprint, getIssue200ResponseFields.sprint) &&
        Objects.equals(this.closedSprints, getIssue200ResponseFields.closedSprints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(flagged, sprint, closedSprints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetIssue200ResponseFields {\n");
    sb.append("    flagged: ").append(toIndentedString(flagged)).append("\n");
    sb.append("    sprint: ").append(toIndentedString(sprint)).append("\n");
    sb.append("    closedSprints: ").append(toIndentedString(closedSprints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("flagged");
    openapiFields.add("sprint");
    openapiFields.add("closedSprints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetIssue200ResponseFields
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetIssue200ResponseFields.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetIssue200ResponseFields is not found in the empty JSON string", GetIssue200ResponseFields.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetIssue200ResponseFields.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetIssue200ResponseFields` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `sprint`
      if (jsonObj.get("sprint") != null && !jsonObj.get("sprint").isJsonNull()) {
        GetIssue200ResponseFieldsSprint.validateJsonElement(jsonObj.get("sprint"));
      }
      if (jsonObj.get("closedSprints") != null && !jsonObj.get("closedSprints").isJsonNull()) {
        JsonArray jsonArrayclosedSprints = jsonObj.getAsJsonArray("closedSprints");
        if (jsonArrayclosedSprints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("closedSprints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `closedSprints` to be an array in the JSON string but got `%s`", jsonObj.get("closedSprints").toString()));
          }

          // validate the optional field `closedSprints` (array)
          for (int i = 0; i < jsonArrayclosedSprints.size(); i++) {
            GetIssue200ResponseFieldsClosedSprintsInner.validateJsonElement(jsonArrayclosedSprints.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetIssue200ResponseFields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetIssue200ResponseFields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetIssue200ResponseFields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetIssue200ResponseFields.class));

       return (TypeAdapter<T>) new TypeAdapter<GetIssue200ResponseFields>() {
           @Override
           public void write(JsonWriter out, GetIssue200ResponseFields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetIssue200ResponseFields read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetIssue200ResponseFields given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetIssue200ResponseFields
   * @throws IOException if the JSON string is invalid with respect to GetIssue200ResponseFields
   */
  public static GetIssue200ResponseFields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetIssue200ResponseFields.class);
  }

  /**
   * Convert an instance of GetIssue200ResponseFields to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

