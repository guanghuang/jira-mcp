/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.ErrorMessage1;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * The result of a successful submitDevopsComponents request. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class SubmitDevopsComponentsResponse {
  public static final String SERIALIZED_NAME_ACCEPTED_COMPONENTS = "acceptedComponents";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_COMPONENTS)
  @javax.annotation.Nullable
  private List<String> acceptedComponents = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAILED_COMPONENTS = "failedComponents";
  @SerializedName(SERIALIZED_NAME_FAILED_COMPONENTS)
  @javax.annotation.Nullable
  private Map<String, List<ErrorMessage1>> failedComponents = new HashMap<>();

  public static final String SERIALIZED_NAME_UNKNOWN_PROJECT_KEYS = "unknownProjectKeys";
  @SerializedName(SERIALIZED_NAME_UNKNOWN_PROJECT_KEYS)
  @javax.annotation.Nullable
  private List<String> unknownProjectKeys = new ArrayList<>();

  public SubmitDevopsComponentsResponse() {
  }

  public SubmitDevopsComponentsResponse acceptedComponents(@javax.annotation.Nullable List<String> acceptedComponents) {
    this.acceptedComponents = acceptedComponents;
    return this;
  }

  public SubmitDevopsComponentsResponse addAcceptedComponentsItem(String acceptedComponentsItem) {
    if (this.acceptedComponents == null) {
      this.acceptedComponents = new ArrayList<>();
    }
    this.acceptedComponents.add(acceptedComponentsItem);
    return this;
  }

  /**
   * The IDs of Components that have been accepted for submission.  A Component may be rejected if it was only associated with unknown project keys.  Note that a Component that isn&#39;t updated due to it&#39;s updateSequenceNumber being out of order is not considered a failed submission. 
   * @return acceptedComponents
   */
  @javax.annotation.Nullable
  public List<String> getAcceptedComponents() {
    return acceptedComponents;
  }

  public void setAcceptedComponents(@javax.annotation.Nullable List<String> acceptedComponents) {
    this.acceptedComponents = acceptedComponents;
  }


  public SubmitDevopsComponentsResponse failedComponents(@javax.annotation.Nullable Map<String, List<ErrorMessage1>> failedComponents) {
    this.failedComponents = failedComponents;
    return this;
  }

  public SubmitDevopsComponentsResponse putFailedComponentsItem(String key, List<ErrorMessage1> failedComponentsItem) {
    if (this.failedComponents == null) {
      this.failedComponents = new HashMap<>();
    }
    this.failedComponents.put(key, failedComponentsItem);
    return this;
  }

  /**
   * Details of Components that have not been accepted for submission, usually due to a problem with the request data.  The object (if present) will be keyed by Component ID and include any errors associated with that Component that have prevented it being submitted. 
   * @return failedComponents
   */
  @javax.annotation.Nullable
  public Map<String, List<ErrorMessage1>> getFailedComponents() {
    return failedComponents;
  }

  public void setFailedComponents(@javax.annotation.Nullable Map<String, List<ErrorMessage1>> failedComponents) {
    this.failedComponents = failedComponents;
  }


  public SubmitDevopsComponentsResponse unknownProjectKeys(@javax.annotation.Nullable List<String> unknownProjectKeys) {
    this.unknownProjectKeys = unknownProjectKeys;
    return this;
  }

  public SubmitDevopsComponentsResponse addUnknownProjectKeysItem(String unknownProjectKeysItem) {
    if (this.unknownProjectKeys == null) {
      this.unknownProjectKeys = new ArrayList<>();
    }
    this.unknownProjectKeys.add(unknownProjectKeysItem);
    return this;
  }

  /**
   * Project keys that are not known on this Jira instance (if any).  These may be invalid keys (e.g. &#x60;UTF&#x60; is sometimes incorrectly identified as a Jira project key), or they may be for projects that no longer exist.  If a Component has been associated with project keys other than those in this array it will still be stored against those valid keys. If a Component was only associated with project keys deemed to be invalid it won&#39;t be persisted. 
   * @return unknownProjectKeys
   */
  @javax.annotation.Nullable
  public List<String> getUnknownProjectKeys() {
    return unknownProjectKeys;
  }

  public void setUnknownProjectKeys(@javax.annotation.Nullable List<String> unknownProjectKeys) {
    this.unknownProjectKeys = unknownProjectKeys;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubmitDevopsComponentsResponse submitDevopsComponentsResponse = (SubmitDevopsComponentsResponse) o;
    return Objects.equals(this.acceptedComponents, submitDevopsComponentsResponse.acceptedComponents) &&
        Objects.equals(this.failedComponents, submitDevopsComponentsResponse.failedComponents) &&
        Objects.equals(this.unknownProjectKeys, submitDevopsComponentsResponse.unknownProjectKeys);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptedComponents, failedComponents, unknownProjectKeys);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubmitDevopsComponentsResponse {\n");
    sb.append("    acceptedComponents: ").append(toIndentedString(acceptedComponents)).append("\n");
    sb.append("    failedComponents: ").append(toIndentedString(failedComponents)).append("\n");
    sb.append("    unknownProjectKeys: ").append(toIndentedString(unknownProjectKeys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceptedComponents");
    openapiFields.add("failedComponents");
    openapiFields.add("unknownProjectKeys");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubmitDevopsComponentsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubmitDevopsComponentsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubmitDevopsComponentsResponse is not found in the empty JSON string", SubmitDevopsComponentsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubmitDevopsComponentsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubmitDevopsComponentsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("acceptedComponents") != null && !jsonObj.get("acceptedComponents").isJsonNull() && !jsonObj.get("acceptedComponents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `acceptedComponents` to be an array in the JSON string but got `%s`", jsonObj.get("acceptedComponents").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("unknownProjectKeys") != null && !jsonObj.get("unknownProjectKeys").isJsonNull() && !jsonObj.get("unknownProjectKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `unknownProjectKeys` to be an array in the JSON string but got `%s`", jsonObj.get("unknownProjectKeys").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubmitDevopsComponentsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubmitDevopsComponentsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubmitDevopsComponentsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubmitDevopsComponentsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SubmitDevopsComponentsResponse>() {
           @Override
           public void write(JsonWriter out, SubmitDevopsComponentsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubmitDevopsComponentsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubmitDevopsComponentsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubmitDevopsComponentsResponse
   * @throws IOException if the JSON string is invalid with respect to SubmitDevopsComponentsResponse
   */
  public static SubmitDevopsComponentsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubmitDevopsComponentsResponse.class);
  }

  /**
   * Convert an instance of SubmitDevopsComponentsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

