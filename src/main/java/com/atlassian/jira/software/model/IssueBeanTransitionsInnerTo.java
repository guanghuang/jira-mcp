/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.IssueBeanTransitionsInnerToAllOfScope;
import com.atlassian.jira.software.model.IssueBeanTransitionsInnerToAllOfStatusCategory;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * Details of the issue status after the transition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class IssueBeanTransitionsInnerTo {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_ICON_URL = "iconUrl";
  @SerializedName(SERIALIZED_NAME_ICON_URL)
  @javax.annotation.Nullable
  private String iconUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  @javax.annotation.Nullable
  private IssueBeanTransitionsInnerToAllOfScope scope;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  @javax.annotation.Nullable
  private String self;

  public static final String SERIALIZED_NAME_STATUS_CATEGORY = "statusCategory";
  @SerializedName(SERIALIZED_NAME_STATUS_CATEGORY)
  @javax.annotation.Nullable
  private IssueBeanTransitionsInnerToAllOfStatusCategory statusCategory;

  public IssueBeanTransitionsInnerTo() {
  }

  public IssueBeanTransitionsInnerTo(
     String description, 
     String iconUrl, 
     String id, 
     String name, 
     String self
  ) {
    this();
    this.description = description;
    this.iconUrl = iconUrl;
    this.id = id;
    this.name = name;
    this.self = self;
  }

  /**
   * The description of the status.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * The URL of the icon used to represent the status.
   * @return iconUrl
   */
  @javax.annotation.Nullable
  public String getIconUrl() {
    return iconUrl;
  }



  /**
   * The ID of the status.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * The name of the status.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public IssueBeanTransitionsInnerTo scope(@javax.annotation.Nullable IssueBeanTransitionsInnerToAllOfScope scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nullable
  public IssueBeanTransitionsInnerToAllOfScope getScope() {
    return scope;
  }

  public void setScope(@javax.annotation.Nullable IssueBeanTransitionsInnerToAllOfScope scope) {
    this.scope = scope;
  }


  /**
   * The URL of the status.
   * @return self
   */
  @javax.annotation.Nullable
  public String getSelf() {
    return self;
  }



  public IssueBeanTransitionsInnerTo statusCategory(@javax.annotation.Nullable IssueBeanTransitionsInnerToAllOfStatusCategory statusCategory) {
    this.statusCategory = statusCategory;
    return this;
  }

  /**
   * Get statusCategory
   * @return statusCategory
   */
  @javax.annotation.Nullable
  public IssueBeanTransitionsInnerToAllOfStatusCategory getStatusCategory() {
    return statusCategory;
  }

  public void setStatusCategory(@javax.annotation.Nullable IssueBeanTransitionsInnerToAllOfStatusCategory statusCategory) {
    this.statusCategory = statusCategory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueBeanTransitionsInnerTo issueBeanTransitionsInnerTo = (IssueBeanTransitionsInnerTo) o;
    return Objects.equals(this.description, issueBeanTransitionsInnerTo.description) &&
        Objects.equals(this.iconUrl, issueBeanTransitionsInnerTo.iconUrl) &&
        Objects.equals(this.id, issueBeanTransitionsInnerTo.id) &&
        Objects.equals(this.name, issueBeanTransitionsInnerTo.name) &&
        Objects.equals(this.scope, issueBeanTransitionsInnerTo.scope) &&
        Objects.equals(this.self, issueBeanTransitionsInnerTo.self) &&
        Objects.equals(this.statusCategory, issueBeanTransitionsInnerTo.statusCategory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, iconUrl, id, name, scope, self, statusCategory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueBeanTransitionsInnerTo {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    statusCategory: ").append(toIndentedString(statusCategory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("iconUrl");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("scope");
    openapiFields.add("self");
    openapiFields.add("statusCategory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IssueBeanTransitionsInnerTo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IssueBeanTransitionsInnerTo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssueBeanTransitionsInnerTo is not found in the empty JSON string", IssueBeanTransitionsInnerTo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IssueBeanTransitionsInnerTo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IssueBeanTransitionsInnerTo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("iconUrl") != null && !jsonObj.get("iconUrl").isJsonNull()) && !jsonObj.get("iconUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconUrl").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `scope`
      if (jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) {
        IssueBeanTransitionsInnerToAllOfScope.validateJsonElement(jsonObj.get("scope"));
      }
      if ((jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) && !jsonObj.get("self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("self").toString()));
      }
      // validate the optional field `statusCategory`
      if (jsonObj.get("statusCategory") != null && !jsonObj.get("statusCategory").isJsonNull()) {
        IssueBeanTransitionsInnerToAllOfStatusCategory.validateJsonElement(jsonObj.get("statusCategory"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssueBeanTransitionsInnerTo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssueBeanTransitionsInnerTo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssueBeanTransitionsInnerTo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssueBeanTransitionsInnerTo.class));

       return (TypeAdapter<T>) new TypeAdapter<IssueBeanTransitionsInnerTo>() {
           @Override
           public void write(JsonWriter out, IssueBeanTransitionsInnerTo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IssueBeanTransitionsInnerTo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IssueBeanTransitionsInnerTo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IssueBeanTransitionsInnerTo
   * @throws IOException if the JSON string is invalid with respect to IssueBeanTransitionsInnerTo
   */
  public static IssueBeanTransitionsInnerTo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssueBeanTransitionsInnerTo.class);
  }

  /**
   * Convert an instance of IssueBeanTransitionsInnerTo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

