/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.GetFeaturesForBoard200ResponseFeaturesInnerPermissibleEstimationTypesInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * FeatureBean
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class FeatureBean {
  /**
   * Gets or Sets boardFeature
   */
  @JsonAdapter(BoardFeatureEnum.Adapter.class)
  public enum BoardFeatureEnum {
    SIMPLE_ROADMAP("SIMPLE_ROADMAP"),
    
    BACKLOG("BACKLOG"),
    
    SPRINTS("SPRINTS"),
    
    CALENDAR("CALENDAR"),
    
    DEVTOOLS("DEVTOOLS"),
    
    REPORTS("REPORTS"),
    
    ESTIMATION("ESTIMATION"),
    
    PAGES("PAGES"),
    
    CODE("CODE"),
    
    SECURITY("SECURITY"),
    
    REQUESTS("REQUESTS"),
    
    INCIDENTS("INCIDENTS"),
    
    RELEASES("RELEASES"),
    
    DEPLOYMENTS("DEPLOYMENTS"),
    
    ISSUE_NAVIGATOR("ISSUE_NAVIGATOR"),
    
    ON_CALL_SCHEDULE("ON_CALL_SCHEDULE"),
    
    BOARD("BOARD"),
    
    GOALS("GOALS"),
    
    LIST_VIEW("LIST_VIEW");

    private String value;

    BoardFeatureEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BoardFeatureEnum fromValue(String value) {
      for (BoardFeatureEnum b : BoardFeatureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BoardFeatureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BoardFeatureEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BoardFeatureEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BoardFeatureEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BoardFeatureEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BOARD_FEATURE = "boardFeature";
  @SerializedName(SERIALIZED_NAME_BOARD_FEATURE)
  @javax.annotation.Nullable
  private BoardFeatureEnum boardFeature;

  public static final String SERIALIZED_NAME_BOARD_ID = "boardId";
  @SerializedName(SERIALIZED_NAME_BOARD_ID)
  @javax.annotation.Nullable
  private Long boardId;

  public static final String SERIALIZED_NAME_FEATURE_ID = "featureId";
  @SerializedName(SERIALIZED_NAME_FEATURE_ID)
  @javax.annotation.Nullable
  private String featureId;

  /**
   * Gets or Sets featureType
   */
  @JsonAdapter(FeatureTypeEnum.Adapter.class)
  public enum FeatureTypeEnum {
    BASIC("BASIC"),
    
    ESTIMATION("ESTIMATION");

    private String value;

    FeatureTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeatureTypeEnum fromValue(String value) {
      for (FeatureTypeEnum b : FeatureTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeatureTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeatureTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeatureTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeatureTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeatureTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEATURE_TYPE = "featureType";
  @SerializedName(SERIALIZED_NAME_FEATURE_TYPE)
  @javax.annotation.Nullable
  private FeatureTypeEnum featureType;

  public static final String SERIALIZED_NAME_IMAGE_URI = "imageUri";
  @SerializedName(SERIALIZED_NAME_IMAGE_URI)
  @javax.annotation.Nullable
  private String imageUri;

  public static final String SERIALIZED_NAME_LEARN_MORE_ARTICLE_ID = "learnMoreArticleId";
  @SerializedName(SERIALIZED_NAME_LEARN_MORE_ARTICLE_ID)
  @javax.annotation.Nullable
  private String learnMoreArticleId;

  public static final String SERIALIZED_NAME_LEARN_MORE_LINK = "learnMoreLink";
  @SerializedName(SERIALIZED_NAME_LEARN_MORE_LINK)
  @javax.annotation.Nullable
  private String learnMoreLink;

  public static final String SERIALIZED_NAME_LOCALISED_DESCRIPTION = "localisedDescription";
  @SerializedName(SERIALIZED_NAME_LOCALISED_DESCRIPTION)
  @javax.annotation.Nullable
  private String localisedDescription;

  public static final String SERIALIZED_NAME_LOCALISED_GROUP = "localisedGroup";
  @SerializedName(SERIALIZED_NAME_LOCALISED_GROUP)
  @javax.annotation.Nullable
  private String localisedGroup;

  public static final String SERIALIZED_NAME_LOCALISED_NAME = "localisedName";
  @SerializedName(SERIALIZED_NAME_LOCALISED_NAME)
  @javax.annotation.Nullable
  private String localisedName;

  public static final String SERIALIZED_NAME_PERMISSIBLE_ESTIMATION_TYPES = "permissibleEstimationTypes";
  @SerializedName(SERIALIZED_NAME_PERMISSIBLE_ESTIMATION_TYPES)
  @javax.annotation.Nullable
  private List<GetFeaturesForBoard200ResponseFeaturesInnerPermissibleEstimationTypesInner> permissibleEstimationTypes = new ArrayList<>();

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED"),
    
    COMING_SOON("COMING_SOON");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private StateEnum state;

  public static final String SERIALIZED_NAME_TOGGLE_LOCKED = "toggleLocked";
  @SerializedName(SERIALIZED_NAME_TOGGLE_LOCKED)
  @javax.annotation.Nullable
  private Boolean toggleLocked;

  public FeatureBean() {
  }

  public FeatureBean boardFeature(@javax.annotation.Nullable BoardFeatureEnum boardFeature) {
    this.boardFeature = boardFeature;
    return this;
  }

  /**
   * Get boardFeature
   * @return boardFeature
   */
  @javax.annotation.Nullable
  public BoardFeatureEnum getBoardFeature() {
    return boardFeature;
  }

  public void setBoardFeature(@javax.annotation.Nullable BoardFeatureEnum boardFeature) {
    this.boardFeature = boardFeature;
  }


  public FeatureBean boardId(@javax.annotation.Nullable Long boardId) {
    this.boardId = boardId;
    return this;
  }

  /**
   * Get boardId
   * @return boardId
   */
  @javax.annotation.Nullable
  public Long getBoardId() {
    return boardId;
  }

  public void setBoardId(@javax.annotation.Nullable Long boardId) {
    this.boardId = boardId;
  }


  public FeatureBean featureId(@javax.annotation.Nullable String featureId) {
    this.featureId = featureId;
    return this;
  }

  /**
   * Get featureId
   * @return featureId
   */
  @javax.annotation.Nullable
  public String getFeatureId() {
    return featureId;
  }

  public void setFeatureId(@javax.annotation.Nullable String featureId) {
    this.featureId = featureId;
  }


  public FeatureBean featureType(@javax.annotation.Nullable FeatureTypeEnum featureType) {
    this.featureType = featureType;
    return this;
  }

  /**
   * Get featureType
   * @return featureType
   */
  @javax.annotation.Nullable
  public FeatureTypeEnum getFeatureType() {
    return featureType;
  }

  public void setFeatureType(@javax.annotation.Nullable FeatureTypeEnum featureType) {
    this.featureType = featureType;
  }


  public FeatureBean imageUri(@javax.annotation.Nullable String imageUri) {
    this.imageUri = imageUri;
    return this;
  }

  /**
   * Get imageUri
   * @return imageUri
   */
  @javax.annotation.Nullable
  public String getImageUri() {
    return imageUri;
  }

  public void setImageUri(@javax.annotation.Nullable String imageUri) {
    this.imageUri = imageUri;
  }


  public FeatureBean learnMoreArticleId(@javax.annotation.Nullable String learnMoreArticleId) {
    this.learnMoreArticleId = learnMoreArticleId;
    return this;
  }

  /**
   * Get learnMoreArticleId
   * @return learnMoreArticleId
   */
  @javax.annotation.Nullable
  public String getLearnMoreArticleId() {
    return learnMoreArticleId;
  }

  public void setLearnMoreArticleId(@javax.annotation.Nullable String learnMoreArticleId) {
    this.learnMoreArticleId = learnMoreArticleId;
  }


  public FeatureBean learnMoreLink(@javax.annotation.Nullable String learnMoreLink) {
    this.learnMoreLink = learnMoreLink;
    return this;
  }

  /**
   * Get learnMoreLink
   * @return learnMoreLink
   */
  @javax.annotation.Nullable
  public String getLearnMoreLink() {
    return learnMoreLink;
  }

  public void setLearnMoreLink(@javax.annotation.Nullable String learnMoreLink) {
    this.learnMoreLink = learnMoreLink;
  }


  public FeatureBean localisedDescription(@javax.annotation.Nullable String localisedDescription) {
    this.localisedDescription = localisedDescription;
    return this;
  }

  /**
   * Get localisedDescription
   * @return localisedDescription
   */
  @javax.annotation.Nullable
  public String getLocalisedDescription() {
    return localisedDescription;
  }

  public void setLocalisedDescription(@javax.annotation.Nullable String localisedDescription) {
    this.localisedDescription = localisedDescription;
  }


  public FeatureBean localisedGroup(@javax.annotation.Nullable String localisedGroup) {
    this.localisedGroup = localisedGroup;
    return this;
  }

  /**
   * Get localisedGroup
   * @return localisedGroup
   */
  @javax.annotation.Nullable
  public String getLocalisedGroup() {
    return localisedGroup;
  }

  public void setLocalisedGroup(@javax.annotation.Nullable String localisedGroup) {
    this.localisedGroup = localisedGroup;
  }


  public FeatureBean localisedName(@javax.annotation.Nullable String localisedName) {
    this.localisedName = localisedName;
    return this;
  }

  /**
   * Get localisedName
   * @return localisedName
   */
  @javax.annotation.Nullable
  public String getLocalisedName() {
    return localisedName;
  }

  public void setLocalisedName(@javax.annotation.Nullable String localisedName) {
    this.localisedName = localisedName;
  }


  public FeatureBean permissibleEstimationTypes(@javax.annotation.Nullable List<GetFeaturesForBoard200ResponseFeaturesInnerPermissibleEstimationTypesInner> permissibleEstimationTypes) {
    this.permissibleEstimationTypes = permissibleEstimationTypes;
    return this;
  }

  public FeatureBean addPermissibleEstimationTypesItem(GetFeaturesForBoard200ResponseFeaturesInnerPermissibleEstimationTypesInner permissibleEstimationTypesItem) {
    if (this.permissibleEstimationTypes == null) {
      this.permissibleEstimationTypes = new ArrayList<>();
    }
    this.permissibleEstimationTypes.add(permissibleEstimationTypesItem);
    return this;
  }

  /**
   * Get permissibleEstimationTypes
   * @return permissibleEstimationTypes
   */
  @javax.annotation.Nullable
  public List<GetFeaturesForBoard200ResponseFeaturesInnerPermissibleEstimationTypesInner> getPermissibleEstimationTypes() {
    return permissibleEstimationTypes;
  }

  public void setPermissibleEstimationTypes(@javax.annotation.Nullable List<GetFeaturesForBoard200ResponseFeaturesInnerPermissibleEstimationTypesInner> permissibleEstimationTypes) {
    this.permissibleEstimationTypes = permissibleEstimationTypes;
  }


  public FeatureBean state(@javax.annotation.Nullable StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable StateEnum state) {
    this.state = state;
  }


  public FeatureBean toggleLocked(@javax.annotation.Nullable Boolean toggleLocked) {
    this.toggleLocked = toggleLocked;
    return this;
  }

  /**
   * Get toggleLocked
   * @return toggleLocked
   */
  @javax.annotation.Nullable
  public Boolean getToggleLocked() {
    return toggleLocked;
  }

  public void setToggleLocked(@javax.annotation.Nullable Boolean toggleLocked) {
    this.toggleLocked = toggleLocked;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeatureBean featureBean = (FeatureBean) o;
    return Objects.equals(this.boardFeature, featureBean.boardFeature) &&
        Objects.equals(this.boardId, featureBean.boardId) &&
        Objects.equals(this.featureId, featureBean.featureId) &&
        Objects.equals(this.featureType, featureBean.featureType) &&
        Objects.equals(this.imageUri, featureBean.imageUri) &&
        Objects.equals(this.learnMoreArticleId, featureBean.learnMoreArticleId) &&
        Objects.equals(this.learnMoreLink, featureBean.learnMoreLink) &&
        Objects.equals(this.localisedDescription, featureBean.localisedDescription) &&
        Objects.equals(this.localisedGroup, featureBean.localisedGroup) &&
        Objects.equals(this.localisedName, featureBean.localisedName) &&
        Objects.equals(this.permissibleEstimationTypes, featureBean.permissibleEstimationTypes) &&
        Objects.equals(this.state, featureBean.state) &&
        Objects.equals(this.toggleLocked, featureBean.toggleLocked);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boardFeature, boardId, featureId, featureType, imageUri, learnMoreArticleId, learnMoreLink, localisedDescription, localisedGroup, localisedName, permissibleEstimationTypes, state, toggleLocked);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeatureBean {\n");
    sb.append("    boardFeature: ").append(toIndentedString(boardFeature)).append("\n");
    sb.append("    boardId: ").append(toIndentedString(boardId)).append("\n");
    sb.append("    featureId: ").append(toIndentedString(featureId)).append("\n");
    sb.append("    featureType: ").append(toIndentedString(featureType)).append("\n");
    sb.append("    imageUri: ").append(toIndentedString(imageUri)).append("\n");
    sb.append("    learnMoreArticleId: ").append(toIndentedString(learnMoreArticleId)).append("\n");
    sb.append("    learnMoreLink: ").append(toIndentedString(learnMoreLink)).append("\n");
    sb.append("    localisedDescription: ").append(toIndentedString(localisedDescription)).append("\n");
    sb.append("    localisedGroup: ").append(toIndentedString(localisedGroup)).append("\n");
    sb.append("    localisedName: ").append(toIndentedString(localisedName)).append("\n");
    sb.append("    permissibleEstimationTypes: ").append(toIndentedString(permissibleEstimationTypes)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    toggleLocked: ").append(toIndentedString(toggleLocked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boardFeature");
    openapiFields.add("boardId");
    openapiFields.add("featureId");
    openapiFields.add("featureType");
    openapiFields.add("imageUri");
    openapiFields.add("learnMoreArticleId");
    openapiFields.add("learnMoreLink");
    openapiFields.add("localisedDescription");
    openapiFields.add("localisedGroup");
    openapiFields.add("localisedName");
    openapiFields.add("permissibleEstimationTypes");
    openapiFields.add("state");
    openapiFields.add("toggleLocked");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FeatureBean
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FeatureBean.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeatureBean is not found in the empty JSON string", FeatureBean.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FeatureBean.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeatureBean` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("boardFeature") != null && !jsonObj.get("boardFeature").isJsonNull()) && !jsonObj.get("boardFeature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `boardFeature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("boardFeature").toString()));
      }
      // validate the optional field `boardFeature`
      if (jsonObj.get("boardFeature") != null && !jsonObj.get("boardFeature").isJsonNull()) {
        BoardFeatureEnum.validateJsonElement(jsonObj.get("boardFeature"));
      }
      if ((jsonObj.get("featureId") != null && !jsonObj.get("featureId").isJsonNull()) && !jsonObj.get("featureId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `featureId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("featureId").toString()));
      }
      if ((jsonObj.get("featureType") != null && !jsonObj.get("featureType").isJsonNull()) && !jsonObj.get("featureType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `featureType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("featureType").toString()));
      }
      // validate the optional field `featureType`
      if (jsonObj.get("featureType") != null && !jsonObj.get("featureType").isJsonNull()) {
        FeatureTypeEnum.validateJsonElement(jsonObj.get("featureType"));
      }
      if ((jsonObj.get("imageUri") != null && !jsonObj.get("imageUri").isJsonNull()) && !jsonObj.get("imageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUri").toString()));
      }
      if ((jsonObj.get("learnMoreArticleId") != null && !jsonObj.get("learnMoreArticleId").isJsonNull()) && !jsonObj.get("learnMoreArticleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `learnMoreArticleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("learnMoreArticleId").toString()));
      }
      if ((jsonObj.get("learnMoreLink") != null && !jsonObj.get("learnMoreLink").isJsonNull()) && !jsonObj.get("learnMoreLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `learnMoreLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("learnMoreLink").toString()));
      }
      if ((jsonObj.get("localisedDescription") != null && !jsonObj.get("localisedDescription").isJsonNull()) && !jsonObj.get("localisedDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localisedDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localisedDescription").toString()));
      }
      if ((jsonObj.get("localisedGroup") != null && !jsonObj.get("localisedGroup").isJsonNull()) && !jsonObj.get("localisedGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localisedGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localisedGroup").toString()));
      }
      if ((jsonObj.get("localisedName") != null && !jsonObj.get("localisedName").isJsonNull()) && !jsonObj.get("localisedName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localisedName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localisedName").toString()));
      }
      if (jsonObj.get("permissibleEstimationTypes") != null && !jsonObj.get("permissibleEstimationTypes").isJsonNull()) {
        JsonArray jsonArraypermissibleEstimationTypes = jsonObj.getAsJsonArray("permissibleEstimationTypes");
        if (jsonArraypermissibleEstimationTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("permissibleEstimationTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `permissibleEstimationTypes` to be an array in the JSON string but got `%s`", jsonObj.get("permissibleEstimationTypes").toString()));
          }

          // validate the optional field `permissibleEstimationTypes` (array)
          for (int i = 0; i < jsonArraypermissibleEstimationTypes.size(); i++) {
            GetFeaturesForBoard200ResponseFeaturesInnerPermissibleEstimationTypesInner.validateJsonElement(jsonArraypermissibleEstimationTypes.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeatureBean.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeatureBean' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeatureBean> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeatureBean.class));

       return (TypeAdapter<T>) new TypeAdapter<FeatureBean>() {
           @Override
           public void write(JsonWriter out, FeatureBean value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeatureBean read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FeatureBean given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FeatureBean
   * @throws IOException if the JSON string is invalid with respect to FeatureBean
   */
  public static FeatureBean fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeatureBean.class);
  }

  /**
   * Convert an instance of FeatureBean to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

