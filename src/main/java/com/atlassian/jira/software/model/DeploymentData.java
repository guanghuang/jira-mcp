/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.Command;
import com.atlassian.jira.software.model.DeploymentDataAssociationsInner;
import com.atlassian.jira.software.model.Environment;
import com.atlassian.jira.software.model.Pipeline;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * Data related to a specific deployment in a specific environment that the deployment is present in. Must specify one of &#x60;issueKeys&#x60; or &#x60;associations&#x60;. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class DeploymentData {
  public static final String SERIALIZED_NAME_DEPLOYMENT_SEQUENCE_NUMBER = "deploymentSequenceNumber";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_SEQUENCE_NUMBER)
  @javax.annotation.Nonnull
  private Long deploymentSequenceNumber;

  public static final String SERIALIZED_NAME_UPDATE_SEQUENCE_NUMBER = "updateSequenceNumber";
  @SerializedName(SERIALIZED_NAME_UPDATE_SEQUENCE_NUMBER)
  @javax.annotation.Nonnull
  private Long updateSequenceNumber;

  public static final String SERIALIZED_NAME_ISSUE_KEYS = "issueKeys";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ISSUE_KEYS)
  @javax.annotation.Nullable
  private List<String> issueKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSOCIATIONS = "associations";
  @SerializedName(SERIALIZED_NAME_ASSOCIATIONS)
  @javax.annotation.Nullable
  private List<DeploymentDataAssociationsInner> associations = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  @javax.annotation.Nonnull
  private String displayName;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nonnull
  private URI url;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nonnull
  private String description;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  @javax.annotation.Nonnull
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  @javax.annotation.Nullable
  private String label;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  @javax.annotation.Nullable
  private Long duration;

  /**
   * The state of the deployment 
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    UNKNOWN("unknown"),
    
    PENDING("pending"),
    
    IN_PROGRESS("in_progress"),
    
    CANCELLED("cancelled"),
    
    FAILED("failed"),
    
    ROLLED_BACK("rolled_back"),
    
    SUCCESSFUL("successful");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nonnull
  private StateEnum state;

  public static final String SERIALIZED_NAME_PIPELINE = "pipeline";
  @SerializedName(SERIALIZED_NAME_PIPELINE)
  @javax.annotation.Nonnull
  private Pipeline pipeline;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  @javax.annotation.Nonnull
  private Environment environment;

  public static final String SERIALIZED_NAME_COMMANDS = "commands";
  @SerializedName(SERIALIZED_NAME_COMMANDS)
  @javax.annotation.Nullable
  private List<Command> commands = new ArrayList<>();

  /**
   * The DeploymentData schema version used for this deployment data.  Placeholder to support potential schema changes in the future. 
   */
  @JsonAdapter(SchemaVersionEnum.Adapter.class)
  public enum SchemaVersionEnum {
    _1_0("1.0");

    private String value;

    SchemaVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SchemaVersionEnum fromValue(String value) {
      for (SchemaVersionEnum b : SchemaVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SchemaVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SchemaVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SchemaVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SchemaVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SchemaVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  @javax.annotation.Nullable
  private SchemaVersionEnum schemaVersion = SchemaVersionEnum._1_0;

  public DeploymentData() {
  }

  public DeploymentData deploymentSequenceNumber(@javax.annotation.Nonnull Long deploymentSequenceNumber) {
    this.deploymentSequenceNumber = deploymentSequenceNumber;
    return this;
  }

  /**
   * This is the identifier for the deployment. It must be unique for the specified pipeline and environment. It must be a monotonically increasing number, as this is used to sequence the deployments. 
   * @return deploymentSequenceNumber
   */
  @javax.annotation.Nonnull
  public Long getDeploymentSequenceNumber() {
    return deploymentSequenceNumber;
  }

  public void setDeploymentSequenceNumber(@javax.annotation.Nonnull Long deploymentSequenceNumber) {
    this.deploymentSequenceNumber = deploymentSequenceNumber;
  }


  public DeploymentData updateSequenceNumber(@javax.annotation.Nonnull Long updateSequenceNumber) {
    this.updateSequenceNumber = updateSequenceNumber;
    return this;
  }

  /**
   * A number used to apply an order to the updates to the deployment, as identified by the deploymentSequenceNumber, in the case of out-of-order receipt of update requests. It must be a monotonically increasing number. For example, epoch time could be one way to generate the updateSequenceNumber. 
   * @return updateSequenceNumber
   */
  @javax.annotation.Nonnull
  public Long getUpdateSequenceNumber() {
    return updateSequenceNumber;
  }

  public void setUpdateSequenceNumber(@javax.annotation.Nonnull Long updateSequenceNumber) {
    this.updateSequenceNumber = updateSequenceNumber;
  }


  @Deprecated
  public DeploymentData issueKeys(@javax.annotation.Nullable List<String> issueKeys) {
    this.issueKeys = issueKeys;
    return this;
  }

  public DeploymentData addIssueKeysItem(String issueKeysItem) {
    if (this.issueKeys == null) {
      this.issueKeys = new ArrayList<>();
    }
    this.issueKeys.add(issueKeysItem);
    return this;
  }

  /**
   * Deprecated. The Jira issue keys to associate the Deployment information with. Should replace this field with the \&quot;associations\&quot; field to associate Deployment information with issueKeys or other types of associations. 
   * @return issueKeys
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getIssueKeys() {
    return issueKeys;
  }

  @Deprecated
  public void setIssueKeys(@javax.annotation.Nullable List<String> issueKeys) {
    this.issueKeys = issueKeys;
  }


  public DeploymentData associations(@javax.annotation.Nullable List<DeploymentDataAssociationsInner> associations) {
    this.associations = associations;
    return this;
  }

  public DeploymentData addAssociationsItem(DeploymentDataAssociationsInner associationsItem) {
    if (this.associations == null) {
      this.associations = new ArrayList<>();
    }
    this.associations.add(associationsItem);
    return this;
  }

  /**
   * The entities to associate the Deployment information with. It must contain at least one of IssueIdOrKeysAssociation or ServiceIdOrKeysAssociation. 
   * @return associations
   */
  @javax.annotation.Nullable
  public List<DeploymentDataAssociationsInner> getAssociations() {
    return associations;
  }

  public void setAssociations(@javax.annotation.Nullable List<DeploymentDataAssociationsInner> associations) {
    this.associations = associations;
  }


  public DeploymentData displayName(@javax.annotation.Nonnull String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The human-readable name for the deployment. Will be shown in the UI. 
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(@javax.annotation.Nonnull String displayName) {
    this.displayName = displayName;
  }


  public DeploymentData url(@javax.annotation.Nonnull URI url) {
    this.url = url;
    return this;
  }

  /**
   * A URL users can use to link to this deployment, in this environment. 
   * @return url
   */
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nonnull URI url) {
    this.url = url;
  }


  public DeploymentData description(@javax.annotation.Nonnull String description) {
    this.description = description;
    return this;
  }

  /**
   * A short description of the deployment 
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nonnull String description) {
    this.description = description;
  }


  public DeploymentData lastUpdated(@javax.annotation.Nonnull OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The last-updated timestamp to present to the user as a summary of the state of the deployment. 
   * @return lastUpdated
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(@javax.annotation.Nonnull OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public DeploymentData label(@javax.annotation.Nullable String label) {
    this.label = label;
    return this;
  }

  /**
   * An (optional) additional label that may be displayed with deployment information. Can be used to display version information etc. for the deployment. 
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(@javax.annotation.Nullable String label) {
    this.label = label;
  }


  public DeploymentData duration(@javax.annotation.Nullable Long duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The duration of the deployment (in seconds). 
   * @return duration
   */
  @javax.annotation.Nullable
  public Long getDuration() {
    return duration;
  }

  public void setDuration(@javax.annotation.Nullable Long duration) {
    this.duration = duration;
  }


  public DeploymentData state(@javax.annotation.Nonnull StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state of the deployment 
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(@javax.annotation.Nonnull StateEnum state) {
    this.state = state;
  }


  public DeploymentData pipeline(@javax.annotation.Nonnull Pipeline pipeline) {
    this.pipeline = pipeline;
    return this;
  }

  /**
   * Get pipeline
   * @return pipeline
   */
  @javax.annotation.Nonnull
  public Pipeline getPipeline() {
    return pipeline;
  }

  public void setPipeline(@javax.annotation.Nonnull Pipeline pipeline) {
    this.pipeline = pipeline;
  }


  public DeploymentData environment(@javax.annotation.Nonnull Environment environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nonnull
  public Environment getEnvironment() {
    return environment;
  }

  public void setEnvironment(@javax.annotation.Nonnull Environment environment) {
    this.environment = environment;
  }


  public DeploymentData commands(@javax.annotation.Nullable List<Command> commands) {
    this.commands = commands;
    return this;
  }

  public DeploymentData addCommandsItem(Command commandsItem) {
    if (this.commands == null) {
      this.commands = new ArrayList<>();
    }
    this.commands.add(commandsItem);
    return this;
  }

  /**
   * A list of commands to be actioned for this Deployment 
   * @return commands
   */
  @javax.annotation.Nullable
  public List<Command> getCommands() {
    return commands;
  }

  public void setCommands(@javax.annotation.Nullable List<Command> commands) {
    this.commands = commands;
  }


  public DeploymentData schemaVersion(@javax.annotation.Nullable SchemaVersionEnum schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

  /**
   * The DeploymentData schema version used for this deployment data.  Placeholder to support potential schema changes in the future. 
   * @return schemaVersion
   */
  @javax.annotation.Nullable
  public SchemaVersionEnum getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(@javax.annotation.Nullable SchemaVersionEnum schemaVersion) {
    this.schemaVersion = schemaVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeploymentData deploymentData = (DeploymentData) o;
    return Objects.equals(this.deploymentSequenceNumber, deploymentData.deploymentSequenceNumber) &&
        Objects.equals(this.updateSequenceNumber, deploymentData.updateSequenceNumber) &&
        Objects.equals(this.issueKeys, deploymentData.issueKeys) &&
        Objects.equals(this.associations, deploymentData.associations) &&
        Objects.equals(this.displayName, deploymentData.displayName) &&
        Objects.equals(this.url, deploymentData.url) &&
        Objects.equals(this.description, deploymentData.description) &&
        Objects.equals(this.lastUpdated, deploymentData.lastUpdated) &&
        Objects.equals(this.label, deploymentData.label) &&
        Objects.equals(this.duration, deploymentData.duration) &&
        Objects.equals(this.state, deploymentData.state) &&
        Objects.equals(this.pipeline, deploymentData.pipeline) &&
        Objects.equals(this.environment, deploymentData.environment) &&
        Objects.equals(this.commands, deploymentData.commands) &&
        Objects.equals(this.schemaVersion, deploymentData.schemaVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deploymentSequenceNumber, updateSequenceNumber, issueKeys, associations, displayName, url, description, lastUpdated, label, duration, state, pipeline, environment, commands, schemaVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeploymentData {\n");
    sb.append("    deploymentSequenceNumber: ").append(toIndentedString(deploymentSequenceNumber)).append("\n");
    sb.append("    updateSequenceNumber: ").append(toIndentedString(updateSequenceNumber)).append("\n");
    sb.append("    issueKeys: ").append(toIndentedString(issueKeys)).append("\n");
    sb.append("    associations: ").append(toIndentedString(associations)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    pipeline: ").append(toIndentedString(pipeline)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    commands: ").append(toIndentedString(commands)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deploymentSequenceNumber");
    openapiFields.add("updateSequenceNumber");
    openapiFields.add("issueKeys");
    openapiFields.add("associations");
    openapiFields.add("displayName");
    openapiFields.add("url");
    openapiFields.add("description");
    openapiFields.add("lastUpdated");
    openapiFields.add("label");
    openapiFields.add("duration");
    openapiFields.add("state");
    openapiFields.add("pipeline");
    openapiFields.add("environment");
    openapiFields.add("commands");
    openapiFields.add("schemaVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("deploymentSequenceNumber");
    openapiRequiredFields.add("updateSequenceNumber");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("lastUpdated");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("pipeline");
    openapiRequiredFields.add("environment");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeploymentData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeploymentData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeploymentData is not found in the empty JSON string", DeploymentData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeploymentData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeploymentData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeploymentData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("issueKeys") != null && !jsonObj.get("issueKeys").isJsonNull() && !jsonObj.get("issueKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueKeys` to be an array in the JSON string but got `%s`", jsonObj.get("issueKeys").toString()));
      }
      if (jsonObj.get("associations") != null && !jsonObj.get("associations").isJsonNull()) {
        JsonArray jsonArrayassociations = jsonObj.getAsJsonArray("associations");
        if (jsonArrayassociations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("associations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `associations` to be an array in the JSON string but got `%s`", jsonObj.get("associations").toString()));
          }

          // validate the optional field `associations` (array)
          for (int i = 0; i < jsonArrayassociations.size(); i++) {
            DeploymentDataAssociationsInner.validateJsonElement(jsonArrayassociations.get(i));
          };
        }
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `state`
      StateEnum.validateJsonElement(jsonObj.get("state"));
      // validate the required field `pipeline`
      Pipeline.validateJsonElement(jsonObj.get("pipeline"));
      // validate the required field `environment`
      Environment.validateJsonElement(jsonObj.get("environment"));
      if (jsonObj.get("commands") != null && !jsonObj.get("commands").isJsonNull()) {
        JsonArray jsonArraycommands = jsonObj.getAsJsonArray("commands");
        if (jsonArraycommands != null) {
          // ensure the json data is an array
          if (!jsonObj.get("commands").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `commands` to be an array in the JSON string but got `%s`", jsonObj.get("commands").toString()));
          }

          // validate the optional field `commands` (array)
          for (int i = 0; i < jsonArraycommands.size(); i++) {
            Command.validateJsonElement(jsonArraycommands.get(i));
          };
        }
      }
      if ((jsonObj.get("schemaVersion") != null && !jsonObj.get("schemaVersion").isJsonNull()) && !jsonObj.get("schemaVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaVersion").toString()));
      }
      // validate the optional field `schemaVersion`
      if (jsonObj.get("schemaVersion") != null && !jsonObj.get("schemaVersion").isJsonNull()) {
        SchemaVersionEnum.validateJsonElement(jsonObj.get("schemaVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeploymentData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeploymentData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeploymentData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeploymentData.class));

       return (TypeAdapter<T>) new TypeAdapter<DeploymentData>() {
           @Override
           public void write(JsonWriter out, DeploymentData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeploymentData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeploymentData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeploymentData
   * @throws IOException if the JSON string is invalid with respect to DeploymentData
   */
  public static DeploymentData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeploymentData.class);
  }

  /**
   * Convert an instance of DeploymentData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

