/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.ProviderMetadata5;
import com.atlassian.jira.software.model.VulnerabilityDetails;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * The payload used to submit (update / insert) Vulnerability data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class SubmitVulnerabilitiesRequest {
  /**
   * Indicates the operation being performed by the provider system when sending this data. \&quot;NORMAL\&quot; - Data received during real-time, user-triggered actions (e.g. user closed or updated a vulnerability). \&quot;SCAN\&quot; - Data sent through some automated process (e.g. some periodically scheduled repository scan). \&quot;BACKFILL\&quot; - Data received while backfilling existing data (e.g. pushing historical vulnerabilities when re-connect a workspace). Default is \&quot;NORMAL\&quot;. \&quot;NORMAL\&quot; traffic has higher priority but tighter rate limits, \&quot;SCAN\&quot; traffic has medium priority and looser limits, \&quot;BACKFILL\&quot; has lower priority and much looser limits 
   */
  @JsonAdapter(OperationTypeEnum.Adapter.class)
  public enum OperationTypeEnum {
    NORMAL("NORMAL"),
    
    SCAN("SCAN"),
    
    BACKFILL("BACKFILL");

    private String value;

    OperationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationTypeEnum fromValue(String value) {
      for (OperationTypeEnum b : OperationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "operationType";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  @javax.annotation.Nullable
  private OperationTypeEnum operationType;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  @javax.annotation.Nullable
  private Map<String, String> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_VULNERABILITIES = "vulnerabilities";
  @SerializedName(SERIALIZED_NAME_VULNERABILITIES)
  @javax.annotation.Nonnull
  private List<VulnerabilityDetails> vulnerabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDER_METADATA = "providerMetadata";
  @SerializedName(SERIALIZED_NAME_PROVIDER_METADATA)
  @javax.annotation.Nullable
  private ProviderMetadata5 providerMetadata;

  public SubmitVulnerabilitiesRequest() {
  }

  public SubmitVulnerabilitiesRequest operationType(@javax.annotation.Nullable OperationTypeEnum operationType) {
    this.operationType = operationType;
    return this;
  }

  /**
   * Indicates the operation being performed by the provider system when sending this data. \&quot;NORMAL\&quot; - Data received during real-time, user-triggered actions (e.g. user closed or updated a vulnerability). \&quot;SCAN\&quot; - Data sent through some automated process (e.g. some periodically scheduled repository scan). \&quot;BACKFILL\&quot; - Data received while backfilling existing data (e.g. pushing historical vulnerabilities when re-connect a workspace). Default is \&quot;NORMAL\&quot;. \&quot;NORMAL\&quot; traffic has higher priority but tighter rate limits, \&quot;SCAN\&quot; traffic has medium priority and looser limits, \&quot;BACKFILL\&quot; has lower priority and much looser limits 
   * @return operationType
   */
  @javax.annotation.Nullable
  public OperationTypeEnum getOperationType() {
    return operationType;
  }

  public void setOperationType(@javax.annotation.Nullable OperationTypeEnum operationType) {
    this.operationType = operationType;
  }


  public SubmitVulnerabilitiesRequest properties(@javax.annotation.Nullable Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public SubmitVulnerabilitiesRequest putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Properties assigned to vulnerability data that can then be used for delete / query operations.  Examples might be an account or user ID that can then be used to clean up data if an account is removed from the Provider system.  Properties are supplied as key/value pairs, and a maximum of 5 properties can be supplied, keys cannot contain &#39;:&#39; or start with &#39;_&#39;. 
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(@javax.annotation.Nullable Map<String, String> properties) {
    this.properties = properties;
  }


  public SubmitVulnerabilitiesRequest vulnerabilities(@javax.annotation.Nonnull List<VulnerabilityDetails> vulnerabilities) {
    this.vulnerabilities = vulnerabilities;
    return this;
  }

  public SubmitVulnerabilitiesRequest addVulnerabilitiesItem(VulnerabilityDetails vulnerabilitiesItem) {
    if (this.vulnerabilities == null) {
      this.vulnerabilities = new ArrayList<>();
    }
    this.vulnerabilities.add(vulnerabilitiesItem);
    return this;
  }

  /**
   * Get vulnerabilities
   * @return vulnerabilities
   */
  @javax.annotation.Nonnull
  public List<VulnerabilityDetails> getVulnerabilities() {
    return vulnerabilities;
  }

  public void setVulnerabilities(@javax.annotation.Nonnull List<VulnerabilityDetails> vulnerabilities) {
    this.vulnerabilities = vulnerabilities;
  }


  public SubmitVulnerabilitiesRequest providerMetadata(@javax.annotation.Nullable ProviderMetadata5 providerMetadata) {
    this.providerMetadata = providerMetadata;
    return this;
  }

  /**
   * Get providerMetadata
   * @return providerMetadata
   */
  @javax.annotation.Nullable
  public ProviderMetadata5 getProviderMetadata() {
    return providerMetadata;
  }

  public void setProviderMetadata(@javax.annotation.Nullable ProviderMetadata5 providerMetadata) {
    this.providerMetadata = providerMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubmitVulnerabilitiesRequest submitVulnerabilitiesRequest = (SubmitVulnerabilitiesRequest) o;
    return Objects.equals(this.operationType, submitVulnerabilitiesRequest.operationType) &&
        Objects.equals(this.properties, submitVulnerabilitiesRequest.properties) &&
        Objects.equals(this.vulnerabilities, submitVulnerabilitiesRequest.vulnerabilities) &&
        Objects.equals(this.providerMetadata, submitVulnerabilitiesRequest.providerMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operationType, properties, vulnerabilities, providerMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubmitVulnerabilitiesRequest {\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    vulnerabilities: ").append(toIndentedString(vulnerabilities)).append("\n");
    sb.append("    providerMetadata: ").append(toIndentedString(providerMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("operationType");
    openapiFields.add("properties");
    openapiFields.add("vulnerabilities");
    openapiFields.add("providerMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("vulnerabilities");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubmitVulnerabilitiesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubmitVulnerabilitiesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubmitVulnerabilitiesRequest is not found in the empty JSON string", SubmitVulnerabilitiesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubmitVulnerabilitiesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubmitVulnerabilitiesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SubmitVulnerabilitiesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonNull()) && !jsonObj.get("operationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationType").toString()));
      }
      // validate the optional field `operationType`
      if (jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonNull()) {
        OperationTypeEnum.validateJsonElement(jsonObj.get("operationType"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("vulnerabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vulnerabilities` to be an array in the JSON string but got `%s`", jsonObj.get("vulnerabilities").toString()));
      }

      JsonArray jsonArrayvulnerabilities = jsonObj.getAsJsonArray("vulnerabilities");
      // validate the required field `vulnerabilities` (array)
      for (int i = 0; i < jsonArrayvulnerabilities.size(); i++) {
        VulnerabilityDetails.validateJsonElement(jsonArrayvulnerabilities.get(i));
      };
      // validate the optional field `providerMetadata`
      if (jsonObj.get("providerMetadata") != null && !jsonObj.get("providerMetadata").isJsonNull()) {
        ProviderMetadata5.validateJsonElement(jsonObj.get("providerMetadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubmitVulnerabilitiesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubmitVulnerabilitiesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubmitVulnerabilitiesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubmitVulnerabilitiesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SubmitVulnerabilitiesRequest>() {
           @Override
           public void write(JsonWriter out, SubmitVulnerabilitiesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubmitVulnerabilitiesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubmitVulnerabilitiesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubmitVulnerabilitiesRequest
   * @throws IOException if the JSON string is invalid with respect to SubmitVulnerabilitiesRequest
   */
  public static SubmitVulnerabilitiesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubmitVulnerabilitiesRequest.class);
  }

  /**
   * Convert an instance of SubmitVulnerabilitiesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

