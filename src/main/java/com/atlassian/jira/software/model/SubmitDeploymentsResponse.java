/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.atlassian.jira.software.model.DeploymentKey;
import com.atlassian.jira.software.model.RejectedDeployment;
import com.atlassian.jira.software.model.SubmitDeploymentsResponseUnknownAssociationsInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * The result of a successful submitDeployments request. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class SubmitDeploymentsResponse {
  public static final String SERIALIZED_NAME_ACCEPTED_DEPLOYMENTS = "acceptedDeployments";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_DEPLOYMENTS)
  @javax.annotation.Nullable
  private List<DeploymentKey> acceptedDeployments = new ArrayList<>();

  public static final String SERIALIZED_NAME_REJECTED_DEPLOYMENTS = "rejectedDeployments";
  @SerializedName(SERIALIZED_NAME_REJECTED_DEPLOYMENTS)
  @javax.annotation.Nullable
  private List<RejectedDeployment> rejectedDeployments = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNKNOWN_ISSUE_KEYS = "unknownIssueKeys";
  @SerializedName(SERIALIZED_NAME_UNKNOWN_ISSUE_KEYS)
  @javax.annotation.Nullable
  private List<String> unknownIssueKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNKNOWN_ASSOCIATIONS = "unknownAssociations";
  @SerializedName(SERIALIZED_NAME_UNKNOWN_ASSOCIATIONS)
  @javax.annotation.Nullable
  private List<SubmitDeploymentsResponseUnknownAssociationsInner> unknownAssociations = new ArrayList<>();

  public SubmitDeploymentsResponse() {
  }

  public SubmitDeploymentsResponse acceptedDeployments(@javax.annotation.Nullable List<DeploymentKey> acceptedDeployments) {
    this.acceptedDeployments = acceptedDeployments;
    return this;
  }

  public SubmitDeploymentsResponse addAcceptedDeploymentsItem(DeploymentKey acceptedDeploymentsItem) {
    if (this.acceptedDeployments == null) {
      this.acceptedDeployments = new ArrayList<>();
    }
    this.acceptedDeployments.add(acceptedDeploymentsItem);
    return this;
  }

  /**
   * The keys of deployments that have been accepted for submission. A deployment key is a composite key that consists of &#x60;pipelineId&#x60;, &#x60;environmentId&#x60; and &#x60;deploymentSequenceNumber&#x60;.  A deployment may be rejected if it was only associated with unknown issue keys.  Note that a deployment that isn&#39;t updated due to it&#39;s updateSequenceNumber being out of order is not considered a failed submission. 
   * @return acceptedDeployments
   */
  @javax.annotation.Nullable
  public List<DeploymentKey> getAcceptedDeployments() {
    return acceptedDeployments;
  }

  public void setAcceptedDeployments(@javax.annotation.Nullable List<DeploymentKey> acceptedDeployments) {
    this.acceptedDeployments = acceptedDeployments;
  }


  public SubmitDeploymentsResponse rejectedDeployments(@javax.annotation.Nullable List<RejectedDeployment> rejectedDeployments) {
    this.rejectedDeployments = rejectedDeployments;
    return this;
  }

  public SubmitDeploymentsResponse addRejectedDeploymentsItem(RejectedDeployment rejectedDeploymentsItem) {
    if (this.rejectedDeployments == null) {
      this.rejectedDeployments = new ArrayList<>();
    }
    this.rejectedDeployments.add(rejectedDeploymentsItem);
    return this;
  }

  /**
   * Details of deployments that have not been accepted for submission, usually due to a problem with the request data.  The object will contain the deployment key and any errors associated with that deployment that have prevented it being submitted. 
   * @return rejectedDeployments
   */
  @javax.annotation.Nullable
  public List<RejectedDeployment> getRejectedDeployments() {
    return rejectedDeployments;
  }

  public void setRejectedDeployments(@javax.annotation.Nullable List<RejectedDeployment> rejectedDeployments) {
    this.rejectedDeployments = rejectedDeployments;
  }


  public SubmitDeploymentsResponse unknownIssueKeys(@javax.annotation.Nullable List<String> unknownIssueKeys) {
    this.unknownIssueKeys = unknownIssueKeys;
    return this;
  }

  public SubmitDeploymentsResponse addUnknownIssueKeysItem(String unknownIssueKeysItem) {
    if (this.unknownIssueKeys == null) {
      this.unknownIssueKeys = new ArrayList<>();
    }
    this.unknownIssueKeys.add(unknownIssueKeysItem);
    return this;
  }

  /**
   * Issue keys that are not known on this Jira instance (if any).  These may be invalid keys (e.g. &#x60;UTF-8&#x60; is sometimes incorrectly identified as a Jira issue key), or they may be for projects that no longer exist.  If a deployment has been associated with issue keys other than those in this array it will still be stored against those valid keys. If a deployment was only associated with issue keys deemed to be invalid it won&#39;t be persisted. 
   * @return unknownIssueKeys
   */
  @javax.annotation.Nullable
  public List<String> getUnknownIssueKeys() {
    return unknownIssueKeys;
  }

  public void setUnknownIssueKeys(@javax.annotation.Nullable List<String> unknownIssueKeys) {
    this.unknownIssueKeys = unknownIssueKeys;
  }


  public SubmitDeploymentsResponse unknownAssociations(@javax.annotation.Nullable List<SubmitDeploymentsResponseUnknownAssociationsInner> unknownAssociations) {
    this.unknownAssociations = unknownAssociations;
    return this;
  }

  public SubmitDeploymentsResponse addUnknownAssociationsItem(SubmitDeploymentsResponseUnknownAssociationsInner unknownAssociationsItem) {
    if (this.unknownAssociations == null) {
      this.unknownAssociations = new ArrayList<>();
    }
    this.unknownAssociations.add(unknownAssociationsItem);
    return this;
  }

  /**
   * Associations (e.g. Issue Keys or Service IDs) that are not known on this Jira instance (if any).  These may be invalid keys (e.g. &#x60;UTF-8&#x60; is sometimes incorrectly identified as a Jira issue key), or they may be for projects that no longer exist.  If a deployment has been associated with any other association other than those in this array it will still be stored against those valid associations. If a deployment was only associated with the associations in this array, it is deemed to be invalid and it won&#39;t be persisted. 
   * @return unknownAssociations
   */
  @javax.annotation.Nullable
  public List<SubmitDeploymentsResponseUnknownAssociationsInner> getUnknownAssociations() {
    return unknownAssociations;
  }

  public void setUnknownAssociations(@javax.annotation.Nullable List<SubmitDeploymentsResponseUnknownAssociationsInner> unknownAssociations) {
    this.unknownAssociations = unknownAssociations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubmitDeploymentsResponse submitDeploymentsResponse = (SubmitDeploymentsResponse) o;
    return Objects.equals(this.acceptedDeployments, submitDeploymentsResponse.acceptedDeployments) &&
        Objects.equals(this.rejectedDeployments, submitDeploymentsResponse.rejectedDeployments) &&
        Objects.equals(this.unknownIssueKeys, submitDeploymentsResponse.unknownIssueKeys) &&
        Objects.equals(this.unknownAssociations, submitDeploymentsResponse.unknownAssociations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptedDeployments, rejectedDeployments, unknownIssueKeys, unknownAssociations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubmitDeploymentsResponse {\n");
    sb.append("    acceptedDeployments: ").append(toIndentedString(acceptedDeployments)).append("\n");
    sb.append("    rejectedDeployments: ").append(toIndentedString(rejectedDeployments)).append("\n");
    sb.append("    unknownIssueKeys: ").append(toIndentedString(unknownIssueKeys)).append("\n");
    sb.append("    unknownAssociations: ").append(toIndentedString(unknownAssociations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceptedDeployments");
    openapiFields.add("rejectedDeployments");
    openapiFields.add("unknownIssueKeys");
    openapiFields.add("unknownAssociations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubmitDeploymentsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubmitDeploymentsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubmitDeploymentsResponse is not found in the empty JSON string", SubmitDeploymentsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubmitDeploymentsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubmitDeploymentsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("acceptedDeployments") != null && !jsonObj.get("acceptedDeployments").isJsonNull()) {
        JsonArray jsonArrayacceptedDeployments = jsonObj.getAsJsonArray("acceptedDeployments");
        if (jsonArrayacceptedDeployments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("acceptedDeployments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `acceptedDeployments` to be an array in the JSON string but got `%s`", jsonObj.get("acceptedDeployments").toString()));
          }

          // validate the optional field `acceptedDeployments` (array)
          for (int i = 0; i < jsonArrayacceptedDeployments.size(); i++) {
            DeploymentKey.validateJsonElement(jsonArrayacceptedDeployments.get(i));
          };
        }
      }
      if (jsonObj.get("rejectedDeployments") != null && !jsonObj.get("rejectedDeployments").isJsonNull()) {
        JsonArray jsonArrayrejectedDeployments = jsonObj.getAsJsonArray("rejectedDeployments");
        if (jsonArrayrejectedDeployments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rejectedDeployments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rejectedDeployments` to be an array in the JSON string but got `%s`", jsonObj.get("rejectedDeployments").toString()));
          }

          // validate the optional field `rejectedDeployments` (array)
          for (int i = 0; i < jsonArrayrejectedDeployments.size(); i++) {
            RejectedDeployment.validateJsonElement(jsonArrayrejectedDeployments.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("unknownIssueKeys") != null && !jsonObj.get("unknownIssueKeys").isJsonNull() && !jsonObj.get("unknownIssueKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `unknownIssueKeys` to be an array in the JSON string but got `%s`", jsonObj.get("unknownIssueKeys").toString()));
      }
      if (jsonObj.get("unknownAssociations") != null && !jsonObj.get("unknownAssociations").isJsonNull()) {
        JsonArray jsonArrayunknownAssociations = jsonObj.getAsJsonArray("unknownAssociations");
        if (jsonArrayunknownAssociations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unknownAssociations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unknownAssociations` to be an array in the JSON string but got `%s`", jsonObj.get("unknownAssociations").toString()));
          }

          // validate the optional field `unknownAssociations` (array)
          for (int i = 0; i < jsonArrayunknownAssociations.size(); i++) {
            SubmitDeploymentsResponseUnknownAssociationsInner.validateJsonElement(jsonArrayunknownAssociations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubmitDeploymentsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubmitDeploymentsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubmitDeploymentsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubmitDeploymentsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SubmitDeploymentsResponse>() {
           @Override
           public void write(JsonWriter out, SubmitDeploymentsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubmitDeploymentsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubmitDeploymentsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubmitDeploymentsResponse
   * @throws IOException if the JSON string is invalid with respect to SubmitDeploymentsResponse
   */
  public static SubmitDeploymentsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubmitDeploymentsResponse.class);
  }

  /**
   * Convert an instance of SubmitDeploymentsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

