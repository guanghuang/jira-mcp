/*
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.software.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.atlassian.jira.invoker.JSON;

/**
 * IDs of entities grouped by entity type
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-05T13:52:26.392070-04:00[America/New_York]", comments = "Generator version: 7.12.0")
public class EntityIds {
  public static final String SERIALIZED_NAME_COMMITS = "commits";
  @SerializedName(SERIALIZED_NAME_COMMITS)
  @javax.annotation.Nullable
  private List<String> commits = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRANCHES = "branches";
  @SerializedName(SERIALIZED_NAME_BRANCHES)
  @javax.annotation.Nullable
  private List<String> branches = new ArrayList<>();

  public static final String SERIALIZED_NAME_PULL_REQUESTS = "pullRequests";
  @SerializedName(SERIALIZED_NAME_PULL_REQUESTS)
  @javax.annotation.Nullable
  private List<String> pullRequests = new ArrayList<>();

  public EntityIds() {
  }

  public EntityIds commits(@javax.annotation.Nullable List<String> commits) {
    this.commits = commits;
    return this;
  }

  public EntityIds addCommitsItem(String commitsItem) {
    if (this.commits == null) {
      this.commits = new ArrayList<>();
    }
    this.commits.add(commitsItem);
    return this;
  }

  /**
   * Commits IDs
   * @return commits
   */
  @javax.annotation.Nullable
  public List<String> getCommits() {
    return commits;
  }

  public void setCommits(@javax.annotation.Nullable List<String> commits) {
    this.commits = commits;
  }


  public EntityIds branches(@javax.annotation.Nullable List<String> branches) {
    this.branches = branches;
    return this;
  }

  public EntityIds addBranchesItem(String branchesItem) {
    if (this.branches == null) {
      this.branches = new ArrayList<>();
    }
    this.branches.add(branchesItem);
    return this;
  }

  /**
   * Branch IDs
   * @return branches
   */
  @javax.annotation.Nullable
  public List<String> getBranches() {
    return branches;
  }

  public void setBranches(@javax.annotation.Nullable List<String> branches) {
    this.branches = branches;
  }


  public EntityIds pullRequests(@javax.annotation.Nullable List<String> pullRequests) {
    this.pullRequests = pullRequests;
    return this;
  }

  public EntityIds addPullRequestsItem(String pullRequestsItem) {
    if (this.pullRequests == null) {
      this.pullRequests = new ArrayList<>();
    }
    this.pullRequests.add(pullRequestsItem);
    return this;
  }

  /**
   * Pull request IDs
   * @return pullRequests
   */
  @javax.annotation.Nullable
  public List<String> getPullRequests() {
    return pullRequests;
  }

  public void setPullRequests(@javax.annotation.Nullable List<String> pullRequests) {
    this.pullRequests = pullRequests;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityIds entityIds = (EntityIds) o;
    return Objects.equals(this.commits, entityIds.commits) &&
        Objects.equals(this.branches, entityIds.branches) &&
        Objects.equals(this.pullRequests, entityIds.pullRequests);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commits, branches, pullRequests);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityIds {\n");
    sb.append("    commits: ").append(toIndentedString(commits)).append("\n");
    sb.append("    branches: ").append(toIndentedString(branches)).append("\n");
    sb.append("    pullRequests: ").append(toIndentedString(pullRequests)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commits");
    openapiFields.add("branches");
    openapiFields.add("pullRequests");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntityIds
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntityIds.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntityIds is not found in the empty JSON string", EntityIds.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntityIds.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntityIds` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("commits") != null && !jsonObj.get("commits").isJsonNull() && !jsonObj.get("commits").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `commits` to be an array in the JSON string but got `%s`", jsonObj.get("commits").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("branches") != null && !jsonObj.get("branches").isJsonNull() && !jsonObj.get("branches").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `branches` to be an array in the JSON string but got `%s`", jsonObj.get("branches").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pullRequests") != null && !jsonObj.get("pullRequests").isJsonNull() && !jsonObj.get("pullRequests").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pullRequests` to be an array in the JSON string but got `%s`", jsonObj.get("pullRequests").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntityIds.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntityIds' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntityIds> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntityIds.class));

       return (TypeAdapter<T>) new TypeAdapter<EntityIds>() {
           @Override
           public void write(JsonWriter out, EntityIds value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntityIds read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntityIds given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntityIds
   * @throws IOException if the JSON string is invalid with respect to EntityIds
   */
  public static EntityIds fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntityIds.class);
  }

  /**
   * Convert an instance of EntityIds to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

